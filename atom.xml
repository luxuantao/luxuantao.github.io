<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Luson&#39;s home</title>
  
  <subtitle>就怕你宁愿流泪望天却不昂首向前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luxuantao.github.io/"/>
  <updated>2019-01-24T10:13:29.663Z</updated>
  <id>https://luxuantao.github.io/</id>
  
  <author>
    <name>陆轩韬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JetsonTX2自主无人车原型开发</title>
    <link href="https://luxuantao.github.io/2019/01/24/JetsonTX2%E8%87%AA%E4%B8%BB%E6%97%A0%E4%BA%BA%E8%BD%A6%E5%8E%9F%E5%9E%8B%E5%BC%80%E5%8F%91/"/>
    <id>https://luxuantao.github.io/2019/01/24/JetsonTX2自主无人车原型开发/</id>
    <published>2019-01-24T08:46:26.000Z</published>
    <updated>2019-01-24T10:13:29.663Z</updated>
    
    <content type="html"><![CDATA[<p>本科生培育的项目，目前已基本成型，涉及的技术包括：opencv，caffe，arduino，android</p><p>项目github地址：<a href="https://github.com/luxuantao/jetsontx2_car" target="_blank" rel="external">https://github.com/luxuantao/jetsontx2_car</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当初搞这个项目，纯粹是我一厢情愿。自从有了JetsonTX2开发板，就想着这么又贵又强的东西不用怎么行。断断续续搞了一学期，也算学了不少新东西。队里加我总共四个人，其中三个不干活的（没错，从头到尾只有我一个人在瞎忙活）。你问我有怨气吗，自然是有的，这学期第13周的时候，我把物体识别的任务交给了一位队友，就想着后面要期末考所以特地提前了些，结果他硬生生地拖到第十九周学期结束，都没有碰一下开发板。罢了，给他学习的机会他不要，又能怪谁呢？而且我在一开始申报项目时就做好了一带三的准备，那么好，opencv，caffe，arduino，android，全都由我一个人负责。</p><p>我不贴代码，arduino和android的全部代码可以从<a href="https://github.com/luxuantao/jetsontx2_car" target="_blank" rel="external">https://github.com/luxuantao/jetsontx2_car</a> 获取。</p><p>这是一篇开发手札，主要是写给我自己看的，记录一下开发中遇到的问题。</p><h2 id="已完成的目标"><a href="#已完成的目标" class="headerlink" title="已完成的目标"></a>已完成的目标</h2><ul><li>JetsonTX2架设在小车上，调用usb摄像头，能够识别出20种不同的物体，包括人，车，显示屏等等，并能将带有标记的流（实际上传的是图片）传回手机</li><li>用于控制小车和显示回传视频的app</li><li>小车用anduino开发，有两种运行模式：手动控制行驶（由app和anduino蓝牙通信实现）和自动行驶（由一组超声波模块+三组红外探测模块实现避障），可随时通过app切换模式</li></ul><h2 id="Arduino小车部分"><a href="#Arduino小车部分" class="headerlink" title="Arduino小车部分"></a>Arduino小车部分</h2><p>最先做的是小车，网上买的小车零件，买回来后要自己全部一个个拼接起来，比如扩展板上，每一个排角，电阻都要自己焊上去。这里要感谢我的爸爸，他虽然不怎么懂编程，但是焊接东西他很拿手，帮我一个部件一个部件的焊好，前后焊了有一周的时间，感谢我的爸爸，没有他，第一步都没法完成。</p><p>小车上最重要的是这些模块：正前方的一组超声波云台模块，正前方/左前方/右前方各一组红外探测模块，以及一组蓝牙模块。为什么正前方又要装超声波又要装红外？因为超声波打的距离比较远，能提早做出判断，但是在车上的位置比较高，打不到较低的地方，所以我在低处补了一组红外探测模块，做两手准备。而左前方和右前方的红外探测模块是后来加的，因为当小车以接近四十五度角接近前方障碍时，无法通过正前方的超声波和红外探测到，所以我在左前方和右前方各补了一个红外，效果不错。</p><h2 id="JetsonTX2部分"><a href="#JetsonTX2部分" class="headerlink" title="JetsonTX2部分"></a>JetsonTX2部分</h2><p>NVIDIA的JetsonTX2是比JetsonTX1性能更强的一块开发板（不过最近好像又有了一块比JetsonTX2还要厉害的开发板）。说它是开发板，其实并不准确，它其实是一台嵌入式计算机，由于其GPU的强大，专门用于做图像处理方面的工作。</p><p>刚到手的JetsonTX2是一台裸机，内置ubuntu16.04操作系统，看上去就和普通的计算机没什么两样。要让它变得更强，先要在NVIDIA的官网上下载JetPack开发包，装好后，就有了CUDA等一系列基础设施。</p><p>关于图像识别，我用的是<code>Faster R-CNN</code> ，但是用它之前，先要装好<code>Caffe</code> 和 <code>PyCaffe</code> ，但是装<code>Caffe</code> 之前，先要装好<code>opencv</code> 。是不是感觉挺麻烦的？没错，难就难在这，有不少依赖要装，而且要翻墙。给出一个很不错的博客，我基本上就是照着这个博客中所说的一步步做的，装了两天（其中caffe装了两遍，注意一定要用python2）。</p><p>opencv3安装：<a href="https://jkjung-avt.github.io/opencv3-on-tx2/" target="_blank" rel="external">https://jkjung-avt.github.io/opencv3-on-tx2/</a></p><p>caffe安装：<a href="https://jkjung-avt.github.io/caffe-on-tx2/" target="_blank" rel="external">https://jkjung-avt.github.io/caffe-on-tx2/</a></p><p>opencv3和caffe都是下载源码在本地编译，所以很慢很慢。。。</p><p>然后就是套<code>Faster R-CNN</code>：<a href="https://jkjung-avt.github.io/faster-rcnn/" target="_blank" rel="external">https://jkjung-avt.github.io/faster-rcnn/</a> ，用到了别人训练好的模型，细心的你会发现github上说这个模型已经废弃了，现在有更快的模型可以用。没错，<code>Faster R-CNN</code> 虽然有个<code>Faster</code> 但是它的速度真心不快，0.9秒识别一张图片（后面会提到如何加速），但是这个模型的准确度非常好，比起别的模型更具优势，所以我还是采用了这个模型。</p><p>那如何做到更快呢，<a href="https://jkjung-avt.github.io/making-frcn-faster/" target="_blank" rel="external">https://jkjung-avt.github.io/making-frcn-faster/</a> 里面提到可以用<code>GoogLeNet</code>换掉速度较慢的<code>VGG16</code> ，也就是对神经网络中的某一层做了改动，但是简简单单的这一步带来的改良是巨大的，在JetsonTX2开最佳性能的情况下<code>sudo nvpmodel -m 0</code>，可以做到0.5秒识别一张图片。</p><p>视频流可以选择使用板载摄像头或者自己搞个usb摄像头，我都试了下，运行后，opencv会在JetsonTX2上会新建一个窗口，里面实时显示带有识别框的图片，每0.5秒换一次图片。</p><h2 id="Android部分"><a href="#Android部分" class="headerlink" title="Android部分"></a>Android部分</h2><p>手机是通过蓝牙和小车交互，但是由于和JetsonTX2需要进行图片流的传输，数据量较大，所以采用Wifi，经TCP传输，socket通信。</p><p><a href="https://jkjung-avt.github.io/faster-rcnn/" target="_blank" rel="external">https://jkjung-avt.github.io/faster-rcnn/</a> 中提到的<code>demo_camera.py</code> 自然不包括传图片的回手机的部分，这个需要自己实现。原本代码中用于显示在窗口中的每一张图片其实是一个三维的<code>ndarray</code>（长、宽和RGB），我的做法是把这个<code>ndarray</code>转换为照片先存在本地，然后再读取这个图片把它传输出去。这里有个坑，<code>ndarray</code>中的某两个颜色次序（好像是G和B）要反一下，不然生成的图片你会觉得颜色不对劲。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>我也试了试<code>yolov3</code>，<a href="https://jkjung-avt.github.io/yolov3/" target="_blank" rel="external">https://jkjung-avt.github.io/yolov3/</a> ，但是实际效果很差，主要是延时太久，理论上<code>yolov3</code> 的速度应该是最快的，可能是有什么没注意到的地方，今后再说。</p><p>PS：很多事情只能靠自己。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本科生培育的项目，目前已基本成型，涉及的技术包括：opencv，caffe，arduino，android&lt;/p&gt;
&lt;p&gt;项目github地址：&lt;a href=&quot;https://github.com/luxuantao/jetsontx2_car&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/luxuantao/jetsontx2_car&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JetsonTX2" scheme="https://luxuantao.github.io/categories/JetsonTX2/"/>
    
    
      <category term="机器视觉" scheme="https://luxuantao.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow实现手写体数字识别</title>
    <link href="https://luxuantao.github.io/2018/09/03/tensorflow%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99%E4%BD%93%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>https://luxuantao.github.io/2018/09/03/tensorflow实现手写体数字识别/</id>
    <published>2018-09-03T06:47:08.000Z</published>
    <updated>2018-09-03T06:48:52.502Z</updated>
    
    <content type="html"><![CDATA[<p>调用tensorflow实现手写体数字识别。<br><a id="more"></a></p><blockquote><p>内容参考自北京大学曹健教授的tensorflow课程，在此感谢</p><p>代码原址：<a href="https://github.com/cj0012/AI-Practice-Tensorflow-Notes" target="_blank" rel="external">https://github.com/cj0012/AI-Practice-Tensorflow-Notes</a></p></blockquote><p>之前在人工智能课上自己手动搭建过一个BP神经网络实现MNIST数据集的手写体数字识别，使用的是<code>c++</code>，最终准确率的上限在<code>95%至96%</code>左右（毕竟水平有限）。这次不一样了，使用<code>tensorflow</code>进行实验，准确率确实提高了不少。可能有人会觉得<code>tensorflow</code>有点过时，现在的大企业不怎么用<code>tensorflow</code>了，但我觉得，对于初学者来说，<code>tensorflow</code>还是不错的选择。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>ubuntu 16.04</li><li>python 2.7.13</li><li>tensorflow 1.3.0</li><li>MNIST数据集</li></ul><p>我不清楚windows下可不可以装tensorflow，反正很久以前是不行，现在好像可以了？？？</p><h2 id="总体框架"><a href="#总体框架" class="headerlink" title="总体框架"></a>总体框架</h2><p>主要分为三个部分如下：</p><ul><li>前向传播过程(mnist_forward.py)</li><li>进行网络参数优化方法的反向传播过程 ( mnist_backward.py )</li><li>验证模型准确率的测试过程(mnist_test.py)</li></ul><p>每个部分都单独写成了一个模块文件。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><h3 id="mnist-forward-py"><a href="#mnist-forward-py" class="headerlink" title="mnist_forward.py"></a>mnist_forward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line">INPUT_NODE = <span class="number">784</span></div><div class="line">OUTPUT_NODE = <span class="number">10</span></div><div class="line">LAYER1_NODE = <span class="number">500</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weight</span><span class="params">(shape, regularizer)</span>:</span></div><div class="line">w = tf.Variable(tf.truncated_normal(shape, stddev=<span class="number">0.1</span>))</div><div class="line"><span class="keyword">if</span> regularizer != <span class="keyword">None</span>:</div><div class="line">tf.add_to_collection(<span class="string">'losses'</span>, tf.contrib.layers.l2_regularizer(regularizer)(w))</div><div class="line"><span class="keyword">return</span> w</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bias</span><span class="params">(shape)</span>:</span></div><div class="line">b = tf.Variable(tf.zeros(shape))</div><div class="line"><span class="keyword">return</span> b</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(x, regularizer)</span>:</span></div><div class="line">w1 = get_weight([INPUT_NODE, LAYER1_NODE], regularizer)</div><div class="line">b1 = get_bias([LAYER1_NODE])</div><div class="line">y1 = tf.nn.relu(tf.matmul(x, w1) + b1)</div><div class="line"></div><div class="line">w2 = get_weight([LAYER1_NODE, OUTPUT_NODE], regularizer)</div><div class="line">b2 = get_bias([OUTPUT_NODE])</div><div class="line">y = tf.matmul(y1, w2) + b2</div><div class="line"><span class="keyword">return</span> y</div></pre></td></tr></table></figure><h3 id="mnist-backward-py"><a href="#mnist-backward-py" class="headerlink" title="mnist_backward.py"></a>mnist_backward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="keyword">import</span> mnist_forward</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">STEPS = <span class="number">50000</span></div><div class="line">BATCH_SIZE = <span class="number">200</span></div><div class="line">LEARNING_RATE_BASE = <span class="number">0.1</span></div><div class="line">LEARNING_RATE_DECAY = <span class="number">0.99</span></div><div class="line">REGULIZER = <span class="number">0.0001</span></div><div class="line">MOVING_AVERAGE_DECAY = <span class="number">0.99</span></div><div class="line">MODEL_SAVE_PATH = <span class="string">"./model/"</span></div><div class="line">MODEL_NAME = <span class="string">"mnist_model"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(mnist)</span>:</span></div><div class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</div><div class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.OUTPUT_NODE])</div><div class="line">y = mnist_forward.forward(x, REGULIZER)</div><div class="line">global_step = tf.Variable(<span class="number">0</span>, trainable = <span class="keyword">False</span>)</div><div class="line"></div><div class="line">ce = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, labels=tf.argmax(y_,<span class="number">-1</span>))</div><div class="line">cem = tf.reduce_mean(ce)</div><div class="line">loss = cem + tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</div><div class="line"></div><div class="line">learning_rate = tf.train.exponential_decay(</div><div class="line">LEARNING_RATE_BASE,</div><div class="line">global_step,</div><div class="line">mnist.train.num_examples / BATCH_SIZE,</div><div class="line">LEARNING_RATE_DECAY,</div><div class="line">staircase = <span class="keyword">True</span></div><div class="line">)</div><div class="line"></div><div class="line">train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</div><div class="line">ema = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step)</div><div class="line">ema_op = ema.apply(tf.trainable_variables())</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.control_dependencies([train_step, ema_op]):</div><div class="line">train_op = tf.no_op(name = <span class="string">'train'</span>)</div><div class="line"></div><div class="line">saver = tf.train.Saver()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">init_op = tf.global_variables_initializer()</div><div class="line">sess.run(init_op)</div><div class="line"></div><div class="line">ckpt = tf.train.get_checkpoint_state(MODEL_SAVE_PATH)</div><div class="line"><span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</div><div class="line">saver.restore(sess, ckpt.model_checkpoint_path)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(STEPS):</div><div class="line">xs,ys = mnist.train.next_batch(BATCH_SIZE)</div><div class="line">_,loss_value,step = sess.run([train_op, loss, global_step], feed_dict=&#123;x:xs, y_:ys&#125;)</div><div class="line"><span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</div><div class="line"><span class="keyword">print</span> <span class="string">"after %d training steps, loss on training batch is %g"</span> % (step, loss_value)</div><div class="line">saver.save(sess, os.path.join(MODEL_SAVE_PATH,MODEL_NAME), global_step=global_step)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"./data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line">backward(mnist)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">main()</div></pre></td></tr></table></figure><h3 id="mnist-test-py"><a href="#mnist-test-py" class="headerlink" title="mnist_test.py"></a>mnist_test.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding utf-8</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="keyword">import</span> mnist_forward</div><div class="line"><span class="keyword">import</span> mnist_backward</div><div class="line">TEST_INTERVAL_SECS = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(mnist)</span>:</span></div><div class="line"><span class="keyword">with</span> tf.Graph().as_default() <span class="keyword">as</span> g:</div><div class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</div><div class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.OUTPUT_NODE])</div><div class="line">y = mnist_forward.forward(x, <span class="keyword">None</span>)</div><div class="line"></div><div class="line">ema = tf.train.ExponentialMovingAverage(mnist_backward.MOVING_AVERAGE_DECAY)</div><div class="line">ema_restore = ema.variables_to_restore()</div><div class="line">saver = tf.train.Saver(ema_restore)</div><div class="line"></div><div class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">ckpt = tf.train.get_checkpoint_state(mnist_backward.MODEL_SAVE_PATH)</div><div class="line"><span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</div><div class="line">saver.restore(sess, ckpt.model_checkpoint_path)</div><div class="line">global_step = ckpt.model_checkpoint_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>].split(<span class="string">'-'</span>)[<span class="number">-1</span>]</div><div class="line">accuracy_score = sess.run(accuracy, feed_dict=&#123;x:mnist.test.images, y_:mnist.test.labels&#125;)</div><div class="line"><span class="keyword">print</span> <span class="string">"after %s training steps, test accuracy = %g"</span> % (global_step, accuracy_score)</div><div class="line"><span class="keyword">else</span>:</div><div class="line"><span class="keyword">print</span> <span class="string">"no checkpoint file found"</span></div><div class="line"><span class="keyword">return</span></div><div class="line">time.sleep(TEST_INTERVAL_SECS)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"./data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line">test(mnist)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">main()</div></pre></td></tr></table></figure><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="mnist-forward-py-1"><a href="#mnist-forward-py-1" class="headerlink" title="mnist_forward.py"></a>mnist_forward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INPUT_NODE = <span class="number">784</span></div><div class="line">OUTPUT_NODE = <span class="number">10</span></div><div class="line">LAYER1_NODE = <span class="number">500</span></div></pre></td></tr></table></figure><p>在前向传播过程中，规定网络输入结点为 784 个(代表每张输入图片的像素个数)，隐藏层节点 500 个(一层)，输出节点 10 个(表示输出为数字 0-9的十分类)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w = tf.Variable(tf.truncated_normal(shape, stddev=<span class="number">0.1</span>))</div></pre></td></tr></table></figure><p>参数满足截断正态分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> regularizer != <span class="keyword">None</span>:</div><div class="line">tf.add_to_collection(<span class="string">'losses'</span>, tf.contrib.layers.l2_regularizer(regularizer)(w))</div></pre></td></tr></table></figure><p>使用正则化,将每个参数的正则化损失加到总损失中</p><h3 id="mnist-backward-py-1"><a href="#mnist-backward-py-1" class="headerlink" title="mnist_backward.py"></a>mnist_backward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ce = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, labels=tf.argmax(y_,<span class="number">-1</span>))</div><div class="line">cem = tf.reduce_mean(ce)</div><div class="line">loss = cem + tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</div></pre></td></tr></table></figure><p>softmax()函数与交叉熵一起使用，再加上正则化损失以此计算得到总的偏差值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">learning_rate = tf.train.exponential_decay(</div><div class="line">LEARNING_RATE_BASE,</div><div class="line">global_step,</div><div class="line">mnist.train.num_examples / BATCH_SIZE,</div><div class="line">LEARNING_RATE_DECAY,</div><div class="line">staircase = <span class="keyword">True</span></div><div class="line">)</div></pre></td></tr></table></figure><p>使用指数衰减学习率使模型在训练的前期快速收敛接近较优解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</div></pre></td></tr></table></figure><p>使用梯度下降算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ema = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step)</div><div class="line">ema_op = ema.apply(tf.trainable_variables())</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.control_dependencies([train_step, ema_op]):</div><div class="line">train_op = tf.no_op(name = <span class="string">'train'</span>)</div></pre></td></tr></table></figure><p>在模型训练时引入滑动平均使模型在测试数据上表现的更加健壮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">saver = tf.train.Saver()</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ckpt = tf.train.get_checkpoint_state(MODEL_SAVE_PATH)</div><div class="line"><span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</div><div class="line">saver.restore(sess, ckpt.model_checkpoint_path)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">saver.save(sess, os.path.join(MODEL_SAVE_PATH,MODEL_NAME), global_step=global_step)</div></pre></td></tr></table></figure><p>断点续训，因为训练时间比较长，万一断电了呢。。。为了使得之前训练好的参数（w,b）能够保留下来，调用了saver进行保存和恢复</p><h3 id="mnist-test-py-1"><a href="#mnist-test-py-1" class="headerlink" title="mnist_test.py"></a>mnist_test.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TEST_INTERVAL_SECS = <span class="number">5</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">time.sleep(TEST_INTERVAL_SECS)</div></pre></td></tr></table></figure><p>每隔五秒钟测试一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ema = tf.train.ExponentialMovingAverage(mnist_backward.MOVING_AVERAGES_DECAY)</div><div class="line">ema_restore = ema.variables_to_restore()</div><div class="line">saver = tf.train.Saver(ema_restore)</div></pre></td></tr></table></figure><p>实例化具有滑动平均的 saver 对象，从而在会话被加载时，模型中的所有参数被赋值为各自的滑动平均值，增强模型的稳定性</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><blockquote><p>可能你已经注意到了，mnist_forward.py中并没有main函数（说明这个文件只是一个模块用来被其他文件调用，本例中是mnist_backward.py调用了mnist_forward.py），而另两个文件都有main函数。</p></blockquote><ul><li>终端输入<code>python mnist_backward.py</code>，开始训练，会显示实时的损失值，如：<code>after 15005 training steps, loss on training batch is 0.159981</code></li><li>再开一个终端，输入<code>python mnist_test.py</code>，进行同步的测试（每五秒一次），会显示实时的损失值，如：<code>after 15005 training steps, test accuracy = 0.979</code></li></ul><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>代码里设置的总循环数是50000次，但是我只跑到15000次（毕竟时间比较久），但已经能有98%的准确率了，如果全跑完的话，预计能达到99%以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;调用tensorflow实现手写体数字识别。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="tensorflow" scheme="https://luxuantao.github.io/tags/tensorflow/"/>
    
      <category term="人工智能" scheme="https://luxuantao.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>WeChall Training: Programming 1</title>
    <link href="https://luxuantao.github.io/2018/08/17/WeChall-Training-Programming-1/"/>
    <id>https://luxuantao.github.io/2018/08/17/WeChall-Training-Programming-1/</id>
    <published>2018-08-17T09:34:25.000Z</published>
    <updated>2018-08-17T09:51:37.948Z</updated>
    
    <content type="html"><![CDATA[<hr><p>刚入ctf的坑，做一些题练练手。</p><p>WeChall上的题还是比较适合入门的。</p><a id="more"></a><p>题目如下：</p><blockquote><p>When you visit <a href="http://www.wechall.net/challenge/training/programming1/index.php?action=request" target="_blank" rel="external">this link</a> you receive a message.</p><p>Submit the same message back to <a href="http://www.wechall.net/challenge/training/programming1/index.php?answer=the_message" target="_blank" rel="external">http://www.wechall.net/challenge/training/programming1/index.php?answer=the_message</a></p><p>Your timelimit is 1.337 seconds</p></blockquote><p>给了个链接，点进去后显示一个字符串，要把它加在指定的URL中并进行访问，整个过程要在1.337秒内完成。</p><p>我竟然还真的手动试了几次。。。最快也要四秒。。。</p><p>正解就是写个脚本，我用Python实现，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://www.wechall.net/challenge/training/programming1/index.php?action=request'</span></div><div class="line">cookie = dict(WC = <span class="string">'************************'</span>)</div><div class="line">re = requests.get(url, cookies = cookie)</div><div class="line">key = re.text</div><div class="line">url2 = <span class="string">'http://www.wechall.net/challenge/training/programming1/index.php?answer='</span></div><div class="line">y = requests.get(url2 + key, cookies = cookie)</div></pre></td></tr></table></figure><p>其中<code>************************</code>部分要填入的是你浏览器的cookie</p><p>至于如何查询cookie，这里我以Chrome浏览器为例：</p><ol><li><code>Ctrl+Shift+Delete</code>调出清除历史记录的界面，点击取消（这样的目的纯粹是因为方便一些）</li><li>依次点击<code>内容设置</code>-&gt;<code>Cookie</code>-&gt;<code>查看所有 Cookie 和网站数据</code></li><li>搜索<code>wechall.net</code>-&gt;找到名称为<code>WC</code>的cookie内容</li></ol><p>PS：上面的代码运行完成后并不会出现提示性的语句，但是你会惊奇地发现题目已经过了</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;刚入ctf的坑，做一些题练练手。&lt;/p&gt;
&lt;p&gt;WeChall上的题还是比较适合入门的。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="WeChall" scheme="https://luxuantao.github.io/tags/WeChall/"/>
    
  </entry>
  
  <entry>
    <title>手动搭建BP神经网络</title>
    <link href="https://luxuantao.github.io/2018/07/29/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BABP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://luxuantao.github.io/2018/07/29/手动搭建BP神经网络/</id>
    <published>2018-07-29T01:02:32.000Z</published>
    <updated>2018-07-29T01:23:16.858Z</updated>
    
    <content type="html"><![CDATA[<hr><p>人工智能的最后一次作业，搭建BP神经网络实现手写体数字识别。</p><a id="more"></a><h2 id="数据集介绍"><a href="#数据集介绍" class="headerlink" title="数据集介绍"></a>数据集介绍</h2><p>数据集采用著名的MNIST数据集，来自美国国家标准与技术研究所，由来自250个不同人手写的数字构成，其中50%是高中学生，50%来自人口普查局的工作人员。测试集也是同样比例的手写数字数据。</p><p>它包含了四个部分：前两个文件为训练集，后两个文件为测试集。</p><table><thead><tr><th style="text-align:center">-数字样本</th><th style="text-align:center">-数字标签</th></tr></thead><tbody><tr><td style="text-align:center">Training set images:train-images-idx3-ubyte.gz (包含60,000个样本)</td><td style="text-align:center">Training set labels:train-labels-idx1-ubyte.gz (包含60,000个标签)</td></tr><tr><td style="text-align:center">Test set images: t10k-images-idx3-ubyte.gz (包含10,000个样本)</td><td style="text-align:center">Test set labels: t10k-labels-idx1-ubyte.gz (包含10,000个标签)</td></tr></tbody></table><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>BP神经网络是一种按误差逆传播算法训练的多层前馈网络，能学习和存贮大量的输入-输出模式映射关系，而无需事前揭示描述这种映射关系的数学方程。它的学习规则是使用梯度下降法，通过反向传播来不断调整网络的权值和阈值，使网络的误差最小，其结构包括输入层、隐藏层和输出层。 </p><p>本实验中，对于每一张手写图片，我先把它处理成一个28 * 28 的01矩阵，其中1代表数字的笔画着色部分，0则代表空白。然后我们把该矩阵，扁平成一个784维的输入向量，输入到输入层。经过隐藏层到达输出层时，是一个10维的输出向量，每一位分别对应是数字0~9的可能性。通过比较输出层的实际输出与期望输出，进行反向反馈调节，并循环重复上述步骤直到达到指定迭代次数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码并不是很长，我用c++进行实现。</p><h3 id="BP-h文件"><a href="#BP-h文件" class="headerlink" title="BP.h文件"></a>BP.h文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BP_H_INCLUDED</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BP_H_INCLUDED</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INPUT_LAYER = <span class="number">784</span>; <span class="comment">//输入层维度</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> HIDDEN_LAYER = <span class="number">40</span>; <span class="comment">//隐含层维度</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> OUTPUT_LAYER = <span class="number">10</span>; <span class="comment">//输出层维度</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> LEARN_RATE = <span class="number">0.3</span>; <span class="comment">//学习率</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> TRAIN_TIMES = <span class="number">10</span>; <span class="comment">//迭代训练次数</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BP</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> input_array[INPUT_LAYER]; <span class="comment">//输入向量</span></div><div class="line">    <span class="keyword">int</span> aim_array[OUTPUT_LAYER]; <span class="comment">//目标结果</span></div><div class="line">    <span class="keyword">double</span> weight1_array[INPUT_LAYER][HIDDEN_LAYER]; <span class="comment">//输入层与隐含层之间的权重</span></div><div class="line">    <span class="keyword">double</span> weight2_array[HIDDEN_LAYER][OUTPUT_LAYER]; <span class="comment">//隐含层与输出层之间的权重</span></div><div class="line">    <span class="keyword">double</span> output1_array[HIDDEN_LAYER]; <span class="comment">//隐含层输出</span></div><div class="line">    <span class="keyword">double</span> output2_array[OUTPUT_LAYER]; <span class="comment">//输出层输出</span></div><div class="line">    <span class="keyword">double</span> deviation1_array[HIDDEN_LAYER]; <span class="comment">//隐含层误差</span></div><div class="line">    <span class="keyword">double</span> deviation2_array[OUTPUT_LAYER]; <span class="comment">//输出层误差</span></div><div class="line">    <span class="keyword">double</span> threshold1_array[HIDDEN_LAYER]; <span class="comment">//隐含层阈值</span></div><div class="line">    <span class="keyword">double</span> threshold2_array[OUTPUT_LAYER]; <span class="comment">//输出层阈值</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>; <span class="comment">//初始化各参数</span></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Sigmoid</span><span class="params">(<span class="keyword">double</span> x)</span></span>; <span class="comment">//sigmoid激活函数</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetOutput1</span><span class="params">()</span></span>; <span class="comment">//得到隐含层输出</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetOutput2</span><span class="params">()</span></span>; <span class="comment">//得到输出层输出</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetDeviation1</span><span class="params">()</span></span>; <span class="comment">//得到隐含层误差</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetDeviation2</span><span class="params">()</span></span>; <span class="comment">//得到输出层误差</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Feedback1</span><span class="params">()</span></span>; <span class="comment">//反馈输入层与隐含层之间的权重</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Feedback2</span><span class="params">()</span></span>; <span class="comment">//反馈隐含层与输出层之间的权重</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Train</span><span class="params">()</span></span>; <span class="comment">//训练</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>; <span class="comment">//测试</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BP_H_INCLUDED</span></span></div></pre></td></tr></table></figure><h3 id="BP-cpp文件"><a href="#BP-cpp文件" class="headerlink" title="BP.cpp文件"></a>BP.cpp文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BP.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//初始化各参数</span></div><div class="line"><span class="keyword">void</span> BP::Init()</div><div class="line">&#123;</div><div class="line">    srand(time(<span class="literal">NULL</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INPUT_LAYER; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; HIDDEN_LAYER; j++)</div><div class="line">            weight1_array[i][j] = rand()/(<span class="keyword">double</span>)(RAND_MAX) * <span class="number">2</span> - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIDDEN_LAYER; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OUTPUT_LAYER; j++)</div><div class="line">            weight2_array[i][j] = rand()/(<span class="keyword">double</span>)(RAND_MAX) * <span class="number">2</span> - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIDDEN_LAYER; i++)</div><div class="line">        threshold1_array[i] = rand()/(<span class="keyword">double</span>)(RAND_MAX) * <span class="number">2</span> - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; OUTPUT_LAYER; i++)</div><div class="line">        threshold2_array[i] = rand()/(<span class="keyword">double</span>)(RAND_MAX) * <span class="number">2</span> - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//sigmoid激活函数</span></div><div class="line"><span class="keyword">double</span> BP::Sigmoid(<span class="keyword">double</span> x)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + <span class="built_in">exp</span>(-x));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//得到隐含层输出</span></div><div class="line"><span class="keyword">void</span> BP::GetOutput1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; HIDDEN_LAYER; j++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">double</span> total = threshold1_array[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INPUT_LAYER; i++)</div><div class="line">            total += input_array[i] * weight1_array[i][j];</div><div class="line">        output1_array[j] = Sigmoid(total);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//得到输出层输出</span></div><div class="line"><span class="keyword">void</span> BP::GetOutput2()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OUTPUT_LAYER; j++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">double</span> total = threshold2_array[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIDDEN_LAYER; i++)</div><div class="line">            total += output1_array[i] * weight2_array[i][j];</div><div class="line">        output2_array[j] = Sigmoid(total);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//得到隐含层误差</span></div><div class="line"><span class="keyword">void</span> BP::GetDeviation1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIDDEN_LAYER; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OUTPUT_LAYER; j++)</div><div class="line">            total += weight2_array[i][j] * deviation2_array[j];</div><div class="line">        deviation1_array[i] = (output1_array[i]) * (<span class="number">1.0</span> - output1_array[i]) * total;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//得到输出层误差</span></div><div class="line"><span class="keyword">void</span> BP::GetDeviation2()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; OUTPUT_LAYER; i++)</div><div class="line">        deviation2_array[i] = (output2_array[i]) * (<span class="number">1.0</span> - output2_array[i]) * (output2_array[i] - aim_array[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//反馈输入层与隐含层之间的权重</span></div><div class="line"><span class="keyword">void</span> BP::Feedback1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; HIDDEN_LAYER; j++)</div><div class="line">    &#123;</div><div class="line">        threshold1_array[j] -= LEARN_RATE * deviation1_array[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INPUT_LAYER; i++)</div><div class="line">            weight1_array[i][j] = weight1_array[i][j] - LEARN_RATE * input_array[i] * deviation1_array[j];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//反馈隐含层与输出层之间的权重</span></div><div class="line"><span class="keyword">void</span> BP::Feedback2()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OUTPUT_LAYER; j++)</div><div class="line">    &#123;</div><div class="line">        threshold2_array[j] = threshold2_array[j] - LEARN_RATE * deviation2_array[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIDDEN_LAYER; i++)</div><div class="line">            weight2_array[i][j] = weight2_array[i][j] - LEARN_RATE * output1_array[i] * deviation2_array[j];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//训练</span></div><div class="line"><span class="keyword">void</span> BP::Train()</div><div class="line">&#123;</div><div class="line">    FILE *train_images;</div><div class="line">    FILE *train_labels;</div><div class="line">    train_images = fopen(<span class="string">"train-images.idx3-ubyte"</span>, <span class="string">"rb"</span>);</div><div class="line">    train_labels = fopen(<span class="string">"train-labels.idx1-ubyte"</span>, <span class="string">"rb"</span>);</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> image[INPUT_LAYER];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> label[OUTPUT_LAYER];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> temp[<span class="number">100</span>];</div><div class="line">    <span class="comment">//读取文件开头</span></div><div class="line">    fread(temp, <span class="number">1</span>, <span class="number">16</span>, train_images);</div><div class="line">    fread(temp, <span class="number">1</span>, <span class="number">8</span>, train_labels);</div><div class="line">    <span class="keyword">int</span> times = <span class="number">0</span>; <span class="comment">//当前训练了几次</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"开始训练..."</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">while</span> (!feof(train_images) &amp;&amp; !feof(train_labels))</div><div class="line">    &#123;</div><div class="line">        fread(image, <span class="number">1</span>, INPUT_LAYER, train_images);</div><div class="line">        fread(label, <span class="number">1</span>, <span class="number">1</span>, train_labels);</div><div class="line">        <span class="comment">//设置输入向量</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INPUT_LAYER; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)image[i] &lt; <span class="number">64</span>)</div><div class="line">                input_array[i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                input_array[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置目标值</span></div><div class="line">        <span class="keyword">int</span> index = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)label[<span class="number">0</span>];</div><div class="line">        <span class="built_in">memset</span>(aim_array, <span class="number">0</span>, <span class="keyword">sizeof</span>(aim_array));</div><div class="line">        aim_array[index] = <span class="number">1</span>;</div><div class="line">        GetOutput1(); <span class="comment">//得到隐含层输出</span></div><div class="line">        GetOutput2(); <span class="comment">//得到输出层输出</span></div><div class="line">        GetDeviation2(); <span class="comment">//得到输出层误差</span></div><div class="line">        GetDeviation1(); <span class="comment">//得到隐含层误差</span></div><div class="line">        Feedback1(); <span class="comment">//反馈输入层与隐含层之间的权重</span></div><div class="line">        Feedback2(); <span class="comment">//反馈隐含层与输出层之间的权重</span></div><div class="line">        ++times;</div><div class="line">        <span class="keyword">if</span>(times % <span class="number">2000</span> == <span class="number">0</span>)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"已训练 "</span> &lt;&lt; times &lt;&lt; <span class="string">"组"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">if</span>(times % <span class="number">10000</span> == <span class="number">0</span>) <span class="comment">//每10000组就测试一下</span></div><div class="line">            Test();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试</span></div><div class="line"><span class="keyword">void</span> BP::Test()</div><div class="line">&#123;</div><div class="line">    FILE *test_images;</div><div class="line">    FILE *test_labels;</div><div class="line">    test_images = fopen(<span class="string">"t10k-images.idx3-ubyte"</span>, <span class="string">"rb"</span>);</div><div class="line">    test_labels = fopen(<span class="string">"t10k-labels.idx1-ubyte"</span>, <span class="string">"rb"</span>);</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> image[<span class="number">784</span>];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> label[<span class="number">10</span>];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> temp[<span class="number">100</span>];</div><div class="line">    <span class="comment">//读取文件开头</span></div><div class="line">    fread(temp, <span class="number">1</span>, <span class="number">16</span>, test_images);</div><div class="line">    fread(temp, <span class="number">1</span>, <span class="number">8</span>, test_labels);</div><div class="line">    <span class="keyword">int</span> total_times = <span class="number">0</span>; <span class="comment">//当前测试了几次</span></div><div class="line">    <span class="keyword">int</span> success_times = <span class="number">0</span>; <span class="comment">//当前正确了几次</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"开始测试..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">while</span> (!feof(test_images) &amp;&amp; !feof(test_labels))</div><div class="line">    &#123;</div><div class="line">        fread(image, <span class="number">1</span>, INPUT_LAYER, test_images);</div><div class="line">        fread(label, <span class="number">1</span>, <span class="number">1</span>, test_labels);</div><div class="line">        <span class="comment">//设置输入向量</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INPUT_LAYER; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)image[i] &lt; <span class="number">64</span>)</div><div class="line">                input_array[i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                input_array[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置目标值</span></div><div class="line">        <span class="built_in">memset</span>(aim_array, <span class="number">0</span>, <span class="keyword">sizeof</span>(aim_array));</div><div class="line">        <span class="keyword">int</span> index = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)label[<span class="number">0</span>];</div><div class="line">        aim_array[index] = <span class="number">1</span>;</div><div class="line">        GetOutput1(); <span class="comment">//得到隐含层输出</span></div><div class="line">        GetOutput2(); <span class="comment">//得到输出层输出</span></div><div class="line">        <span class="comment">//以输出结果中最大的那个值所对应的数字作为预测的数字</span></div><div class="line">        <span class="keyword">double</span> maxn = <span class="number">-99999999</span>;</div><div class="line">        <span class="keyword">int</span> max_index = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; OUTPUT_LAYER; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (output2_array[i] &gt; maxn)</div><div class="line">            &#123;</div><div class="line">                maxn = output2_array[i];</div><div class="line">                max_index = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果预测正确</span></div><div class="line">        <span class="keyword">if</span> (aim_array[max_index] == <span class="number">1</span>)</div><div class="line">            ++success_times;</div><div class="line">        ++total_times;</div><div class="line">        <span class="keyword">if</span>(total_times % <span class="number">2000</span> == <span class="number">0</span>)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"已测试："</span> &lt;&lt; total_times &lt;&lt; <span class="string">"组"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"正确率: "</span> &lt;&lt; <span class="number">100.0</span> * success_times / total_times &lt;&lt; <span class="string">"%"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"*************************"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    BP bp;</div><div class="line">    bp.Init();</div><div class="line">    <span class="comment">//训练数据反复利用TRAIN_TIMES次</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TRAIN_TIMES; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"开始第"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"轮迭代"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        bp.Train();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>本实验中，BP神经网络中人为可调的参数就两个，一个是隐含层维度，还有一个是学习率。隐含层维度影响了程序判断的正确性，同时也影响着程序运行的时间。学习率的设置也很有讲究，过小会导致收敛过慢以及陷入局部最优，过大会使得结果发生震荡。</p><p>此外，由于BP神经网络在训练时有遗忘旧样本的趋势，所以对于60000组测试数据，我进行了反复利用，设置了迭代次数，使得正确率可以进一步提高，但也不可避免地增加了程序的运行时间。</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>每一轮迭代都完整的使用了60000组训练数据，每训练10000组训练数据，就进行一次测试，取最佳准确率。      </p><table><thead><tr><th style="text-align:center">- 第几轮迭代</th><th style="text-align:center">- 最佳准确率</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">92.22%</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">93.64%</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">94.13%</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">94.47%</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">94.69%</td></tr></tbody></table><p>可以发现，正确率的增长逐渐变得缓慢，程序的运行时间也要相应的加长。</p><h2 id="可以改进的地方"><a href="#可以改进的地方" class="headerlink" title="可以改进的地方"></a>可以改进的地方</h2><p>由于60000组训练数据被反复训练，所以时间久了会出现过拟合现象，这可以通过画出”学习曲线”来观测，具体可以借鉴吴恩达老师的课程。解决的办法是每次随机地从60000组数据中抽取一部分进行训练，而不是60000组按顺序循环。</p><p>此外，学习率我设为了固定值，其实可以根据训练的推进逐步变小，可以达到更好的效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;人工智能的最后一次作业，搭建BP神经网络实现手写体数字识别。&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="人工智能" scheme="https://luxuantao.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="神经网络" scheme="https://luxuantao.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>俄罗斯方块</title>
    <link href="https://luxuantao.github.io/2018/07/29/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
    <id>https://luxuantao.github.io/2018/07/29/俄罗斯方块/</id>
    <published>2018-07-29T00:31:05.000Z</published>
    <updated>2018-07-29T00:39:31.580Z</updated>
    
    <content type="html"><![CDATA[<hr><p>多平台的一次作业，使用wxpython实现俄罗斯方块。</p><a id="more"></a><p>代码改编自<a href="http://zetcode.com/wxpython/thetetrisgame/" target="_blank" rel="external">http://zetcode.com/wxpython/thetetrisgame/</a></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> wx</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">SPEED = <span class="number">300</span></div><div class="line">selectDifficulty = <span class="number">101</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tetris</span><span class="params">(wx.Frame)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent, title)</span>:</span></div><div class="line">        wx.Frame.__init__(self, parent, title=title, size=(<span class="number">324</span>, <span class="number">684</span>))</div><div class="line">        </div><div class="line">        self.icon = wx.Icon(name=<span class="string">"icon.ico"</span>, type=wx.BITMAP_TYPE_ICO)</div><div class="line">        self.SetIcon(self.icon)</div><div class="line">        </div><div class="line">        self.menuBar = wx.MenuBar()</div><div class="line">        </div><div class="line">        self.menu1 = wx.Menu()</div><div class="line">        self.menu1.Append(wx.ID_EXIT, <span class="string">u"退出(&amp;X)"</span>)</div><div class="line">        self.Bind(wx.EVT_MENU, self.OnClose, id=wx.ID_EXIT)</div><div class="line">        self.menu1.Append(<span class="number">501</span>, <span class="string">u"重新开始(&amp;R)"</span>)</div><div class="line">        self.Bind(wx.EVT_MENU, self.OnRestart, id=<span class="number">501</span>)</div><div class="line">        self.menu1.Append(<span class="number">502</span>, <span class="string">u"查看耗时(需要先暂停游戏)"</span>)</div><div class="line">        self.Bind(wx.EVT_MENU, self.OnCostTime, id=<span class="number">502</span>)</div><div class="line">        self.menuBar.Append(self.menu1, <span class="string">u"开始(&amp;F)"</span>)</div><div class="line">        self.menuBar.Enable(<span class="number">502</span>, <span class="keyword">False</span>)    </div><div class="line">        </div><div class="line">        self.menu2 = wx.Menu()</div><div class="line">        self.menu2.Append(<span class="number">101</span>, <span class="string">u"简单\tCtrl+1"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">        self.menu2.Append(<span class="number">102</span>, <span class="string">u"中等\tCtrl+2"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">        self.menu2.Append(<span class="number">103</span>, <span class="string">u"困难\tCtrl+3"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">        self.Bind(wx.EVT_MENU_RANGE, self.OnDifficulty, id=<span class="number">101</span>, id2=<span class="number">103</span>)</div><div class="line">        self.menuBar.Append(self.menu2, <span class="string">u"难度(&amp;D)"</span>) </div><div class="line">        <span class="keyword">global</span> selectDifficulty</div><div class="line">        self.menuBar.Check(selectDifficulty, <span class="keyword">True</span>)</div><div class="line">          </div><div class="line">        self.menu3 = wx.Menu()</div><div class="line">        self.menu3.Append(<span class="number">301</span>, <span class="string">u"程序信息(&amp;I)\tF1"</span>)</div><div class="line">        self.Bind(wx.EVT_MENU, self.OnAbout, id=<span class="number">301</span>)</div><div class="line">        self.menu3.Append(<span class="number">302</span>, <span class="string">u"帮助(&amp;H)\tF2"</span>)</div><div class="line">        self.Bind(wx.EVT_MENU, self.OnHelp, id=<span class="number">302</span>)</div><div class="line">        self.menuBar.Append(self.menu3, <span class="string">u"关于(&amp;A)"</span>)</div><div class="line">           </div><div class="line">        self.SetMenuBar(self.menuBar)</div><div class="line"></div><div class="line">        self.statusbar = self.CreateStatusBar()</div><div class="line">        self.statusbar.SetStatusText(<span class="string">'0'</span>)</div><div class="line">        self.board = Board(self)</div><div class="line">        self.board.SetFocus()</div><div class="line">        self.board.start()</div><div class="line"></div><div class="line">        self.Centre()</div><div class="line">        self.Show(<span class="keyword">True</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnDifficulty</span><span class="params">(self, evt)</span>:</span></div><div class="line">        number = evt.GetId()</div><div class="line">        <span class="keyword">global</span> SPEED</div><div class="line">        <span class="keyword">global</span> selectDifficulty</div><div class="line">        <span class="keyword">if</span> number == <span class="number">101</span>:</div><div class="line">            SPEED = <span class="number">300</span></div><div class="line">            selectDifficulty = <span class="number">101</span></div><div class="line">        <span class="keyword">elif</span> number == <span class="number">102</span>:</div><div class="line">            SPEED = <span class="number">200</span></div><div class="line">            selectDifficulty = <span class="number">102</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            SPEED = <span class="number">100</span></div><div class="line">            selectDifficulty = <span class="number">103</span></div><div class="line">        Tetris(<span class="keyword">None</span>, title=<span class="string">'Tetris'</span>)</div><div class="line">        self.Destroy()  </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnRestart</span><span class="params">(self, evt)</span>:</span>     </div><div class="line">        Tetris(<span class="keyword">None</span>, title=<span class="string">'Tetris'</span>)</div><div class="line">        self.Destroy()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnCostTime</span><span class="params">(self, evt)</span>:</span> <span class="comment"># 查看耗时</span></div><div class="line">        wx.MessageBox(<span class="string">u'您已经坚持了 %.1f 秒'</span>%(<span class="number">1.0</span> * self.board.costTime * self.board.Speed / <span class="number">1000</span>),</div><div class="line">           <span class="string">u"用时"</span>, wx.OK | wx.ICON_INFORMATION, self)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnAbout</span><span class="params">(self, evt)</span>:</span> </div><div class="line">        wx.MessageBox(<span class="string">u"16级第7次上机练习(WX)\n俄罗斯方块"</span>,</div><div class="line">            <span class="string">u"16Lab7(WX)"</span>, wx.OK | wx.ICON_INFORMATION, self)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnHelp</span><span class="params">(self, evt)</span>:</span> </div><div class="line">        wx.MessageBox(<span class="string">u"按P暂停\n按D加速下落\n按空格直接落下"</span>, <span class="string">u"帮助"</span>, wx.OK | wx.ICON_INFORMATION, self)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnClose</span><span class="params">(self, evt)</span>:</span></div><div class="line">        self.Close()</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span><span class="params">(wx.Panel)</span>:</span></div><div class="line">    </div><div class="line">    BoardWidth = <span class="number">10</span></div><div class="line">    BoardHeight = <span class="number">22</span></div><div class="line">    Speed = <span class="number">300</span></div><div class="line">    ID_TIMER = <span class="number">1</span></div><div class="line">    costTime = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent)</span>:</span> </div><div class="line">        wx.Panel.__init__(self, parent, style=wx.WANTS_CHARS)</div><div class="line">        <span class="keyword">global</span> SPEED</div><div class="line">        Board.Speed = SPEED</div><div class="line">        </div><div class="line">        self.initBoard()</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initBoard</span><span class="params">(self)</span>:</span>    </div><div class="line">        </div><div class="line">        Board.costTime = <span class="number">0</span></div><div class="line">        self.timer = wx.Timer(self, Board.ID_TIMER)</div><div class="line">        self.isWaitingAfterLine = <span class="keyword">False</span></div><div class="line">        self.curPiece = Shape()</div><div class="line">        self.nextPiece = Shape()</div><div class="line">        self.curX = <span class="number">0</span></div><div class="line">        self.curY = <span class="number">0</span></div><div class="line">        self.numLinesRemoved = <span class="number">0</span></div><div class="line">        self.board = []</div><div class="line"></div><div class="line">        self.isStarted = <span class="keyword">False</span></div><div class="line">        self.isPaused = <span class="keyword">False</span></div><div class="line"></div><div class="line">        self.Bind(wx.EVT_PAINT, self.OnPaint)</div><div class="line">        self.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)</div><div class="line">        self.Bind(wx.EVT_TIMER, self.OnTimer, id=Board.ID_TIMER)</div><div class="line"></div><div class="line">        self.clearBoard()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shapeAt</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.board[(y * Board.BoardWidth) + x]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setShapeAt</span><span class="params">(self, x, y, shape)</span>:</span></div><div class="line">        </div><div class="line">        self.board[(y * Board.BoardWidth) + x] = shape</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">squareWidth</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.GetClientSize().GetWidth() / Board.BoardWidth</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">squareHeight</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.GetClientSize().GetHeight() / Board.BoardHeight</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        self.isStarted = <span class="keyword">True</span></div><div class="line">        self.isWaitingAfterLine = <span class="keyword">False</span></div><div class="line">        self.numLinesRemoved = <span class="number">0</span></div><div class="line">        self.clearBoard()</div><div class="line"></div><div class="line">        self.newPiece()</div><div class="line">        self.timer.Start(Board.Speed)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pause</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.isStarted:</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        self.isPaused = <span class="keyword">not</span> self.isPaused</div><div class="line">        statusbar = self.GetParent().statusbar</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            self.GetParent().GetMenuBar().Enable(<span class="number">502</span>, <span class="keyword">True</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.GetParent().GetMenuBar().Enable(<span class="number">502</span>, <span class="keyword">False</span>)    </div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            self.timer.Stop()</div><div class="line">            statusbar.SetStatusText(<span class="string">'paused'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.timer.Start(Board.Speed)</div><div class="line">            statusbar.SetStatusText(str(self.numLinesRemoved))</div><div class="line"></div><div class="line">        self.Refresh()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clearBoard</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(Board.BoardHeight * Board.BoardWidth):</div><div class="line">            self.board.append(Tetrominoes.NoShape)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnPaint</span><span class="params">(self, event)</span>:</span></div><div class="line"></div><div class="line">        dc = wx.PaintDC(self)        </div><div class="line"></div><div class="line">        size = self.GetClientSize()</div><div class="line">        boardTop = size.GetHeight() - Board.BoardHeight * self.squareHeight()</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(Board.BoardHeight):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(Board.BoardWidth):</div><div class="line">                shape = self.shapeAt(j, Board.BoardHeight - i - <span class="number">1</span>)</div><div class="line">                <span class="keyword">if</span> shape != Tetrominoes.NoShape:</div><div class="line">                    self.drawSquare(dc,</div><div class="line">                        <span class="number">0</span> + j * self.squareWidth(),</div><div class="line">                        boardTop + i * self.squareHeight(), shape)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.curPiece.shape() != Tetrominoes.NoShape:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">                x = self.curX + self.curPiece.x(i)</div><div class="line">                y = self.curY - self.curPiece.y(i)</div><div class="line">                self.drawSquare(dc, <span class="number">0</span> + x * self.squareWidth(),</div><div class="line">                    boardTop + (Board.BoardHeight - y - <span class="number">1</span>) * self.squareHeight(),</div><div class="line">                    self.curPiece.shape())</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnKeyDown</span><span class="params">(self, event)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.isStarted <span class="keyword">or</span> self.curPiece.shape() == Tetrominoes.NoShape:</div><div class="line">            event.Skip()</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        keycode = event.GetKeyCode()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> keycode == ord(<span class="string">'P'</span>) <span class="keyword">or</span> keycode == ord(<span class="string">'p'</span>):</div><div class="line">            self.pause()</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">elif</span> keycode == wx.WXK_LEFT:</div><div class="line">            self.tryMove(self.curPiece, self.curX - <span class="number">1</span>, self.curY)</div><div class="line">        <span class="keyword">elif</span> keycode == wx.WXK_RIGHT:</div><div class="line">            self.tryMove(self.curPiece, self.curX + <span class="number">1</span>, self.curY)</div><div class="line">        <span class="keyword">elif</span> keycode == wx.WXK_DOWN:</div><div class="line">            self.tryMove(self.curPiece.rotatedRight(), self.curX, self.curY)</div><div class="line">        <span class="keyword">elif</span> keycode == wx.WXK_UP:</div><div class="line">            self.tryMove(self.curPiece.rotatedLeft(), self.curX, self.curY)</div><div class="line">        <span class="keyword">elif</span> keycode == wx.WXK_SPACE:</div><div class="line">            self.dropDown()</div><div class="line">        <span class="keyword">elif</span> keycode == ord(<span class="string">'D'</span>) <span class="keyword">or</span> keycode == ord(<span class="string">'d'</span>):</div><div class="line">            self.oneLineDown()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            event.Skip()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnTimer</span><span class="params">(self, event)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> event.GetId() == Board.ID_TIMER:</div><div class="line">            <span class="keyword">if</span> self.isWaitingAfterLine:</div><div class="line">                self.isWaitingAfterLine = <span class="keyword">False</span></div><div class="line">                self.newPiece()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.oneLineDown()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            event.Skip()</div><div class="line"></div><div class="line">        Board.costTime += <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dropDown</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        newY = self.curY</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> newY &gt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.tryMove(self.curPiece, self.curX, newY - <span class="number">1</span>):</div><div class="line">                <span class="keyword">break</span></div><div class="line">            newY -= <span class="number">1</span></div><div class="line"></div><div class="line">        self.pieceDropped()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">oneLineDown</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tryMove(self.curPiece, self.curX, self.curY - <span class="number">1</span>):</div><div class="line">            self.pieceDropped()</div><div class="line">            </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pieceDropped</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            x = self.curX + self.curPiece.x(i)</div><div class="line">            y = self.curY - self.curPiece.y(i)</div><div class="line">            self.setShapeAt(x, y, self.curPiece.shape())</div><div class="line"></div><div class="line">        self.removeFullLines()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.isWaitingAfterLine:</div><div class="line">            self.newPiece()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeFullLines</span><span class="params">(self)</span>:</span></div><div class="line">    </div><div class="line">        numFullLines = <span class="number">0</span></div><div class="line"></div><div class="line">        statusbar = self.GetParent().statusbar</div><div class="line"></div><div class="line">        rowsToRemove = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(Board.BoardHeight):</div><div class="line">            n = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(Board.BoardWidth):</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.shapeAt(j, i) == Tetrominoes.NoShape:</div><div class="line">                    n = n + <span class="number">1</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> n == <span class="number">10</span>:</div><div class="line">                rowsToRemove.append(i)</div><div class="line"></div><div class="line">        rowsToRemove.reverse()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> rowsToRemove:</div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(m, Board.BoardHeight):</div><div class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> range(Board.BoardWidth):</div><div class="line">                        self.setShapeAt(l, k, self.shapeAt(l, k + <span class="number">1</span>))</div><div class="line"></div><div class="line">            numFullLines = numFullLines + len(rowsToRemove)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> numFullLines &gt; <span class="number">0</span>:</div><div class="line">                self.numLinesRemoved = self.numLinesRemoved + numFullLines</div><div class="line">                statusbar.SetStatusText(str(self.numLinesRemoved)) </div><div class="line">                self.isWaitingAfterLine = <span class="keyword">True</span></div><div class="line">                self.curPiece.setShape(Tetrominoes.NoShape)</div><div class="line">                self.Refresh()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newPiece</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.curPiece = self.nextPiece</div><div class="line">        statusbar = self.GetParent().statusbar</div><div class="line">        self.nextPiece.setRandomShape()</div><div class="line">        self.curX = Board.BoardWidth / <span class="number">2</span> + <span class="number">1</span></div><div class="line">        self.curY = Board.BoardHeight - <span class="number">1</span> + self.curPiece.minY()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tryMove(self.curPiece, self.curX, self.curY):</div><div class="line">            </div><div class="line">            self.curPiece.setShape(Tetrominoes.NoShape)</div><div class="line">            self.timer.Stop()</div><div class="line">            self.isStarted = <span class="keyword">False</span></div><div class="line">            statusbar.SetStatusText(<span class="string">'Game over'</span>)</div><div class="line">            </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tryMove</span><span class="params">(self, newPiece, newX, newY)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            </div><div class="line">            x = newX + newPiece.x(i)</div><div class="line">            y = newY - newPiece.y(i)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= Board.BoardWidth <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= Board.BoardHeight:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> self.shapeAt(x, y) != Tetrominoes.NoShape:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        self.curPiece = newPiece</div><div class="line">        self.curX = newX</div><div class="line">        self.curY = newY</div><div class="line">        self.Refresh()</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawSquare</span><span class="params">(self, dc, x, y, shape)</span>:</span></div><div class="line">        </div><div class="line">        colors = [<span class="string">'#000000'</span>, <span class="string">'#CC6666'</span>, <span class="string">'#66CC66'</span>, <span class="string">'#6666CC'</span>,</div><div class="line">                  <span class="string">'#CCCC66'</span>, <span class="string">'#CC66CC'</span>, <span class="string">'#66CCCC'</span>, <span class="string">'#DAAA00'</span>]</div><div class="line"></div><div class="line">        light = [<span class="string">'#000000'</span>, <span class="string">'#F89FAB'</span>, <span class="string">'#79FC79'</span>, <span class="string">'#7979FC'</span>, </div><div class="line">                 <span class="string">'#FCFC79'</span>, <span class="string">'#FC79FC'</span>, <span class="string">'#79FCFC'</span>, <span class="string">'#FCC600'</span>]</div><div class="line"></div><div class="line">        dark = [<span class="string">'#000000'</span>, <span class="string">'#803C3B'</span>, <span class="string">'#3B803B'</span>, <span class="string">'#3B3B80'</span>, </div><div class="line">                 <span class="string">'#80803B'</span>, <span class="string">'#803B80'</span>, <span class="string">'#3B8080'</span>, <span class="string">'#806200'</span>]</div><div class="line"></div><div class="line">        pen = wx.Pen(light[shape])</div><div class="line">        pen.SetCap(wx.CAP_PROJECTING)</div><div class="line">        dc.SetPen(pen)</div><div class="line"></div><div class="line">        dc.DrawLine(x, y + self.squareHeight() - <span class="number">1</span>, x, y)</div><div class="line">        dc.DrawLine(x, y, x + self.squareWidth() - <span class="number">1</span>, y)</div><div class="line"></div><div class="line">        darkpen = wx.Pen(dark[shape])</div><div class="line">        darkpen.SetCap(wx.CAP_PROJECTING)</div><div class="line">        dc.SetPen(darkpen)</div><div class="line"></div><div class="line">        dc.DrawLine(x + <span class="number">1</span>, y + self.squareHeight() - <span class="number">1</span>,</div><div class="line">            x + self.squareWidth() - <span class="number">1</span>, y + self.squareHeight() - <span class="number">1</span>)</div><div class="line">        dc.DrawLine(x + self.squareWidth() - <span class="number">1</span>, </div><div class="line">        y + self.squareHeight() - <span class="number">1</span>, x + self.squareWidth() - <span class="number">1</span>, y + <span class="number">1</span>)</div><div class="line"></div><div class="line">        dc.SetPen(wx.TRANSPARENT_PEN)</div><div class="line">        dc.SetBrush(wx.Brush(colors[shape]))</div><div class="line">        dc.DrawRectangle(x + <span class="number">1</span>, y + <span class="number">1</span>, self.squareWidth() - <span class="number">2</span>, </div><div class="line">        self.squareHeight() - <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tetrominoes</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    NoShape = <span class="number">0</span></div><div class="line">    ZShape = <span class="number">1</span></div><div class="line">    SShape = <span class="number">2</span></div><div class="line">    LineShape = <span class="number">3</span></div><div class="line">    TShape = <span class="number">4</span></div><div class="line">    SquareShape = <span class="number">5</span></div><div class="line">    LShape = <span class="number">6</span></div><div class="line">    MirroredLShape = <span class="number">7</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    coordsTable = (</div><div class="line">        ((<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">0</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">-1</span>, <span class="number">0</span>),    (<span class="number">-1</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>),     (<span class="number">0</span>, <span class="number">2</span>)),</div><div class="line">        ((<span class="number">-1</span>, <span class="number">0</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>),     (<span class="number">1</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">-1</span>, <span class="number">-1</span>),   (<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">1</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.coords = [[<span class="number">0</span>,<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">        self.pieceShape = Tetrominoes.NoShape</div><div class="line"></div><div class="line">        self.setShape(Tetrominoes.NoShape)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shape</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.pieceShape</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setShape</span><span class="params">(self, shape)</span>:</span></div><div class="line">        </div><div class="line">        table = Shape.coordsTable[shape]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>):</div><div class="line">                self.coords[i][j] = table[i][j]</div><div class="line"></div><div class="line">        self.pieceShape = shape</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setRandomShape</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.setShape(random.randint(<span class="number">1</span>, <span class="number">7</span>))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, index)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.coords[index][<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self, index)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.coords[index][<span class="number">1</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setX</span><span class="params">(self, index, x)</span>:</span></div><div class="line">        </div><div class="line">        self.coords[index][<span class="number">0</span>] = x</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setY</span><span class="params">(self, index, y)</span>:</span></div><div class="line">        </div><div class="line">        self.coords[index][<span class="number">1</span>] = y</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minX</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = min(m, self.coords[i][<span class="number">0</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxX</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = max(m, self.coords[i][<span class="number">0</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minY</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = min(m, self.coords[i][<span class="number">1</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxY</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = max(m, self.coords[i][<span class="number">1</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotatedLeft</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.pieceShape == Tetrominoes.SquareShape:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line"></div><div class="line">        result = Shape()</div><div class="line">        result.pieceShape = self.pieceShape</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            result.setX(i, self.y(i))</div><div class="line">            result.setY(i, -self.x(i))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotatedRight</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.pieceShape == Tetrominoes.SquareShape:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line"></div><div class="line">        result = Shape()</div><div class="line">        result.pieceShape = self.pieceShape</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            result.setX(i, -self.y(i))</div><div class="line">            result.setY(i, self.x(i))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    os.chdir(os.path.abspath(sys.path[<span class="number">0</span>]))</div><div class="line">    app = wx.App()</div><div class="line">    Tetris(<span class="keyword">None</span>, title=<span class="string">'Tetris'</span>)</div><div class="line">    app.MainLoop()</div></pre></td></tr></table></figure><h2 id="具体改动"><a href="#具体改动" class="headerlink" title="具体改动"></a>具体改动</h2><p>解决了在windows下不能够直接使用方向键的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent)</span>:</span></div><div class="line">        wx.Panel.__init__(self, parent, style=wx.WANTS_CHARS)</div></pre></td></tr></table></figure><p>扩大了默认的游戏界面大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wx.Frame.__init__(self, parent, title=title, size=(<span class="number">324</span>, <span class="number">684</span>))</div></pre></td></tr></table></figure><p>增加了图标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.icon = wx.Icon(name=<span class="string">"icon.ico"</span>, type=wx.BITMAP_TYPE_ICO)</div><div class="line">self.SetIcon(self.icon)</div></pre></td></tr></table></figure><p>增加了开始菜单栏（包括退出，重新开始，查看用时）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">self.menu1 = wx.Menu()</div><div class="line">self.menu1.Append(wx.ID_EXIT, <span class="string">u"退出(&amp;X)"</span>)</div><div class="line">self.Bind(wx.EVT_MENU, self.OnClose, id=wx.ID_EXIT)</div><div class="line">self.menu1.Append(<span class="number">501</span>, <span class="string">u"重新开始(&amp;R)"</span>)</div><div class="line">self.menu1.Append(<span class="number">502</span>, <span class="string">u"查看耗时(需要先暂停游戏)"</span>)</div><div class="line">self.Bind(wx.EVT_MENU, self.OnCostTime, id=<span class="number">502</span>)</div><div class="line">self.Bind(wx.EVT_MENU, self.OnRestart, id=<span class="number">501</span>)</div><div class="line">self.menuBar.Append(self.menu1, <span class="string">u"开始(&amp;F)"</span>)</div><div class="line">self.menuBar.Enable(<span class="number">502</span>, <span class="keyword">False</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnRestart</span><span class="params">(self, evt)</span>:</span>     </div><div class="line">    Tetris(<span class="keyword">None</span>, title=<span class="string">'Tetris'</span>)</div><div class="line">    self.Destroy()</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnCostTime</span><span class="params">(self, evt)</span>:</span> <span class="comment"># 查看耗时</span></div><div class="line">  wx.MessageBox(<span class="string">u'您已经坚持了 %.1f 秒'</span>%(<span class="number">1.0</span> * self.board.costTime * self.board.Speed / <span class="number">1000</span>),</div><div class="line">           <span class="string">u"用时"</span>, wx.OK | wx.ICON_INFORMATION, self)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> self.isPaused:</div><div class="line">    self.GetParent().GetMenuBar().Enable(<span class="number">502</span>, <span class="keyword">True</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    self.GetParent().GetMenuBar().Enable(<span class="number">502</span>, <span class="keyword">False</span>)</div></pre></td></tr></table></figure><p>增加了难度选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">self.menu2 = wx.Menu()</div><div class="line">self.menu2.Append(<span class="number">101</span>, <span class="string">u"简单\tCtrl+1"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">self.menu2.Append(<span class="number">102</span>, <span class="string">u"中等\tCtrl+2"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">self.menu2.Append(<span class="number">103</span>, <span class="string">u"困难\tCtrl+3"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">self.Bind(wx.EVT_MENU_RANGE, self.OnDifficulty, id=<span class="number">101</span>, id2=<span class="number">103</span>)</div><div class="line">self.menuBar.Append(self.menu2, <span class="string">u"难度(&amp;D)"</span>) </div><div class="line"><span class="keyword">global</span> selectDifficulty</div><div class="line">self.menuBar.Check(selectDifficulty, <span class="keyword">True</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnDifficulty</span><span class="params">(self, evt)</span>:</span></div><div class="line">        number = evt.GetId()</div><div class="line">        <span class="keyword">global</span> SPEED</div><div class="line">        <span class="keyword">global</span> selectDifficulty</div><div class="line">        <span class="keyword">if</span> number == <span class="number">101</span>:</div><div class="line">            SPEED = <span class="number">300</span></div><div class="line">            selectDifficulty = <span class="number">101</span></div><div class="line">        <span class="keyword">elif</span> number == <span class="number">102</span>:</div><div class="line">            SPEED = <span class="number">200</span></div><div class="line">            selectDifficulty = <span class="number">102</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            SPEED = <span class="number">100</span></div><div class="line">            selectDifficulty = <span class="number">103</span></div><div class="line">        Tetris(<span class="keyword">None</span>, title=<span class="string">'Tetris'</span>)</div><div class="line">        self.Destroy()</div></pre></td></tr></table></figure><p>增加了关于菜单栏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">self.menu3 = wx.Menu()</div><div class="line">self.menu3.Append(<span class="number">301</span>, <span class="string">u"程序信息(&amp;I)\tF1"</span>)</div><div class="line">self.Bind(wx.EVT_MENU, self.OnHelp, id=<span class="number">301</span>)</div><div class="line">self.menuBar.Append(self.menu3, <span class="string">u"关于(&amp;A)"</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnHelp</span><span class="params">(self, evt)</span>:</span></div><div class="line">        wx.MessageBox(<span class="string">u"16级第7次上机练习(WX)\n俄罗斯方块"</span>,</div><div class="line">            <span class="string">u"16Lab7(WX)"</span>, wx.OK | wx.ICON_INFORMATION, self)</div></pre></td></tr></table></figure><h2 id="有个小BUG"><a href="#有个小BUG" class="headerlink" title="有个小BUG"></a>有个小BUG</h2><p>程序第一次跑，退出的时候会出现程序崩溃的提示。但第二次以后就正常了，不知道为什么。不光我的程序有问题，网上的示例程序也有这个问题。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>代码所在路径不能有中文。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;多平台的一次作业，使用wxpython实现俄罗斯方块。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="wxpython" scheme="https://luxuantao.github.io/tags/wxpython/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu磁盘空间清理</title>
    <link href="https://luxuantao.github.io/2018/07/09/ubuntu%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/"/>
    <id>https://luxuantao.github.io/2018/07/09/ubuntu磁盘空间清理/</id>
    <published>2018-07-09T05:20:33.000Z</published>
    <updated>2018-07-29T00:57:40.021Z</updated>
    
    <content type="html"><![CDATA[<hr><p>刚开始接触ubuntu的时候，装好系统没多久根目录就满了，而且就像是中了蠕虫病毒一样，就算你什么都没干，它也会不断地侵蚀你的硬盘空间，在重装了三次系统后，发现了问题所在。</p><a id="more"></a><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>来到<code>/var/log</code>目录下，这里存放了ubuntu的日志文件，其中<code>syslog</code> 和 <code>kern.log</code>这两个文件很大，事实上它们基本上每时每刻都在增长，可使用如下命令清理： </p><p><code>sudo -i</code> 改变权限，然后输入密码，执行： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rm -rf /var/log/*.gz</div><div class="line">rm -rf /var/log/*.1</div><div class="line">echo &quot;&quot; &gt; /var/log/dmesg</div><div class="line">echo &quot;&quot; &gt; /var/log/kern.log</div><div class="line">echo &quot;&quot; &gt; /var/log/messages</div><div class="line">echo &quot;&quot; &gt; /var/log/syslog</div></pre></td></tr></table></figure><p>发现一下子就能释放不少空间。</p><p>至于删除日志文件会不会有什么影响，目前亲测还没有遇到问题，应该将来也不会有问题，但是鉴于日志文件终究是有其存在的价值的，所以不到万不得已，建议不要删除，以免误操作。</p><p>一般来说，以下几条命令更为常用：</p><p><code>sudo apt-get autoclean</code>清理旧版本的软件缓存</p><p><code>sudo apt-get clean</code>清理所有软件缓存</p><p><code>sudo apt-get autoremove</code>删除系统不再使用的孤立软件</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>更进一步，我发现即使删除了日志文件后，过一阵子它还是会不断增长，如果你不嫌麻烦，那你可以自己隔一阵子就手动删一次，当然也可以写一个批处理程序自动隔一阵子删除，但终究治标不治本，而且反复地擦写对硬盘（尤其是固态硬盘）的损伤也大。想到日志文件之所以会不断地快速增长，肯定是系统出了什么问题，导致日志文件时刻都在记录错误，所以我们可以打开日志文件进行查看。</p><p>对我的电脑而言，其实是出现了<code>pcie</code>错误，日志文件中大部分的都是同样的东西，诸如<code>PCIe Bus Error</code>等。</p><p>解决方法如下：</p><p>打开终端，修改<code>/etc/default/grub</code>引导文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp /etc/default/grub /etc/default/grub.bak</div><div class="line">sudo -H gedit /etc/default/grub</div></pre></td></tr></table></figure><p>打开之后找到以下这句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</div></pre></td></tr></table></figure><p>然后将其改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash pci=nomsi&quot;</div></pre></td></tr></table></figure><p>保存关闭grub文件，更新grub引导，并重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo update-grub</div><div class="line">sudo reboot</div></pre></td></tr></table></figure><p>问题解决了，日志文件也恢复正常，不会再大量地记录这方面的错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;刚开始接触ubuntu的时候，装好系统没多久根目录就满了，而且就像是中了蠕虫病毒一样，就算你什么都没干，它也会不断地侵蚀你的硬盘空间，在重装了三次系统后，发现了问题所在。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://luxuantao.github.io/categories/Linux/"/>
    
    
      <category term="ubuntu" scheme="https://luxuantao.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>大二ending</title>
    <link href="https://luxuantao.github.io/2018/07/04/%E5%A4%A7%E4%BA%8Cending/"/>
    <id>https://luxuantao.github.io/2018/07/04/大二ending/</id>
    <published>2018-07-04T09:19:17.000Z</published>
    <updated>2018-07-04T09:28:04.287Z</updated>
    
    <content type="html"><![CDATA[<hr><p>大二再见了。</p><a id="more"></a><p>终于放假啦！！！</p><p>经历了进大学以来最黑暗的一个学期，今天终于考完了最后一门，万岁！</p><p>想想已经好久没有更博客了，这篇博文也是为了记录一下我还活着，挺过这学期真是不容易。</p><p>接下来的两个月里，就可以吃着<del>冰西瓜，吹着空调，看“老婆们”的剧啦</del>！慢着慢着，不是说好了要学习的吗？</p><p>当然这学期里也确实学了不少东西，至于要不要一篇一篇做成博文呢。。。看心情好吧。</p><p>最后特别鸣谢@ZZW，感谢一学期的陪伴与教导，大三加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;大二再见了。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>制作一个简易计算器</title>
    <link href="https://luxuantao.github.io/2018/04/20/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>https://luxuantao.github.io/2018/04/20/制作一个简易计算器/</id>
    <published>2018-04-20T10:35:57.000Z</published>
    <updated>2018-04-20T10:39:44.285Z</updated>
    
    <content type="html"><![CDATA[<hr><p>使用java的AWT包实现一个简易的计算器。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.event.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Frame frame;</div><div class="line">    <span class="keyword">private</span> Label label;</div><div class="line">    <span class="keyword">private</span> Panel panel;</div><div class="line">    <span class="keyword">private</span> Button button0,button1,button2,button3,button4,button5,button6,button7,button8,</div><div class="line">            button9,buttonequ,buttondiv,buttondot,buttonmul,buttonsub,buttonadd;</div><div class="line">    <span class="keyword">private</span> ButtonHandler listener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">()</span> </span>&#123;</div><div class="line">        frame = <span class="keyword">new</span> Frame(<span class="string">"My Calculator"</span>);</div><div class="line">        label = <span class="keyword">new</span> Label(<span class="string">"0"</span>, Label.RIGHT);</div><div class="line">        panel = <span class="keyword">new</span> Panel(<span class="keyword">new</span> GridLayout(<span class="number">4</span>, <span class="number">4</span>));</div><div class="line">        button0 = <span class="keyword">new</span> Button(<span class="string">"0"</span>);</div><div class="line">        button1 = <span class="keyword">new</span> Button(<span class="string">"1"</span>);</div><div class="line">        button2 = <span class="keyword">new</span> Button(<span class="string">"2"</span>);</div><div class="line">        button3 = <span class="keyword">new</span> Button(<span class="string">"3"</span>);</div><div class="line">        button4 = <span class="keyword">new</span> Button(<span class="string">"4"</span>);</div><div class="line">        button5 = <span class="keyword">new</span> Button(<span class="string">"5"</span>);</div><div class="line">        button6 = <span class="keyword">new</span> Button(<span class="string">"6"</span>);</div><div class="line">        button7 = <span class="keyword">new</span> Button(<span class="string">"7"</span>);</div><div class="line">        button8 = <span class="keyword">new</span> Button(<span class="string">"8"</span>);</div><div class="line">        button9 = <span class="keyword">new</span> Button(<span class="string">"9"</span>);</div><div class="line">        buttonequ = <span class="keyword">new</span> Button(<span class="string">"="</span>);</div><div class="line">        buttondiv = <span class="keyword">new</span> Button(<span class="string">"/"</span>);</div><div class="line">        buttondot = <span class="keyword">new</span> Button(<span class="string">"."</span>);</div><div class="line">        buttonmul = <span class="keyword">new</span> Button(<span class="string">"*"</span>);</div><div class="line">        buttonsub = <span class="keyword">new</span> Button(<span class="string">"-"</span>);</div><div class="line">        buttonadd = <span class="keyword">new</span> Button(<span class="string">"+"</span>);</div><div class="line">        panel.add(button7);</div><div class="line">        panel.add(button8);</div><div class="line">        panel.add(button9);</div><div class="line">        panel.add(buttonadd);</div><div class="line">        panel.add(button4);</div><div class="line">        panel.add(button5);</div><div class="line">        panel.add(button6);</div><div class="line">        panel.add(buttonsub);</div><div class="line">        panel.add(button1);</div><div class="line">        panel.add(button2);</div><div class="line">        panel.add(button3);</div><div class="line">        panel.add(buttonmul);</div><div class="line">        panel.add(button0);</div><div class="line">        panel.add(buttondot);</div><div class="line">        panel.add(buttonequ);</div><div class="line">        panel.add(buttondiv);</div><div class="line">        frame.add(label, BorderLayout.NORTH);</div><div class="line">        frame.add(panel, BorderLayout.CENTER);</div><div class="line">        frame.pack();</div><div class="line">        frame.setSize(<span class="number">300</span>,<span class="number">300</span>);</div><div class="line">        frame.setVisible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        listener = <span class="keyword">new</span> ButtonHandler();</div><div class="line"></div><div class="line">        <span class="comment">//对按钮添加监听</span></div><div class="line">        button0.addActionListener(listener);</div><div class="line">        button1.addActionListener(listener);</div><div class="line">        button2.addActionListener(listener);</div><div class="line">        button3.addActionListener(listener);</div><div class="line">        button4.addActionListener(listener);</div><div class="line">        button5.addActionListener(listener);</div><div class="line">        button6.addActionListener(listener);</div><div class="line">        button7.addActionListener(listener);</div><div class="line">        button8.addActionListener(listener);</div><div class="line">        button9.addActionListener(listener);</div><div class="line">        buttonadd.addActionListener(listener);</div><div class="line">        buttonsub.addActionListener(listener);</div><div class="line">        buttonmul.addActionListener(listener);</div><div class="line">        buttondiv.addActionListener(listener);</div><div class="line">        buttondot.addActionListener(listener);</div><div class="line">        buttonequ.addActionListener(listener);</div><div class="line"></div><div class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</div><div class="line">                System.exit(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ButtonHandler</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">//存储运算符</span></div><div class="line">        <span class="keyword">boolean</span> equHappened = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">double</span> arg1 = <span class="number">0</span>, arg2 = <span class="number">0</span>, result = <span class="number">0</span>;</div><div class="line">        <span class="comment">//@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(e.getSource() == buttonequ) &#123;</div><div class="line">                equHappened = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">if</span>(flag==<span class="number">0</span>) &#123;</div><div class="line">                    result = arg1 + arg2;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>) &#123;</div><div class="line">                    result = arg1 - arg2;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">2</span>) &#123;</div><div class="line">                    result = arg1 * arg2;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    result = arg1 / arg2;</div><div class="line">                &#125;</div><div class="line">                label.setText(result+<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(equHappened == <span class="keyword">true</span>) &#123;</div><div class="line">                    label.setText(<span class="string">""</span>);</div><div class="line">                    equHappened = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(e.getSource() == buttondot) &#123;</div><div class="line">                    label.setText(<span class="string">"0."</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button0) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"0"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button1) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"1"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button2) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"2"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button3) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"3"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button4) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"4"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button5) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"5"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button6) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"6"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button7) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"7"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button8) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"8"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button9) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"9"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == buttonadd) &#123;</div><div class="line">                    label.setText(<span class="string">""</span>);</div><div class="line">                    arg1 = arg2;</div><div class="line">                    flag = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == buttonsub) &#123;</div><div class="line">                    label.setText(<span class="string">""</span>);</div><div class="line">                    arg1 = arg2;</div><div class="line">                    flag = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == buttonmul) &#123;</div><div class="line">                    label.setText(<span class="string">""</span>);</div><div class="line">                    arg1 = arg2;</div><div class="line">                    flag = <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == buttondiv) &#123;</div><div class="line">                    label.setText(<span class="string">""</span>);</div><div class="line">                    arg1 = arg2;</div><div class="line">                    flag = <span class="number">3</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Calculator cal = <span class="keyword">new</span> Calculator();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>并不难，只用到了AWT，一个小时做完，感兴趣的可以用swing改写一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;使用java的AWT包实现一个简易的计算器。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
      <category term="AWT" scheme="https://luxuantao.github.io/tags/AWT/"/>
    
  </entry>
  
  <entry>
    <title>新增个人主页</title>
    <link href="https://luxuantao.github.io/2018/03/31/%E6%96%B0%E5%A2%9E%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/"/>
    <id>https://luxuantao.github.io/2018/03/31/新增个人主页/</id>
    <published>2018-03-31T11:38:52.000Z</published>
    <updated>2018-03-31T11:43:43.409Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Web作业：制作个人主页。</p><a id="more"></a><p>好像没多久就要交Web作业了，花了一个下午手糊了一个，已加入友链，内容有些许少儿不宜。。。而且第一次加载很慢。你可别怪我，要怪就怪github，免费的东西就将就着用呗。如果你想看，就耐心一点。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Web作业：制作个人主页。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>显示系统当前进程</title>
    <link href="https://luxuantao.github.io/2018/03/31/%E6%98%BE%E7%A4%BA%E7%B3%BB%E7%BB%9F%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B/"/>
    <id>https://luxuantao.github.io/2018/03/31/显示系统当前进程/</id>
    <published>2018-03-31T06:13:47.000Z</published>
    <updated>2018-03-31T06:26:50.976Z</updated>
    
    <content type="html"><![CDATA[<hr><p>分别使用windows SDK和wxpython显示系统当前进程。</p><a id="more"></a><h2 id="windows-SDK版本"><a href="#windows-SDK版本" class="headerlink" title="windows SDK版本"></a>windows SDK版本</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span>    <span class="comment">// self-defined header</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tlhelp32.h&gt; // 声明快照函数的头文件</span></span></div><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,                  <span class="comment">// 入口函数</span></span></span></div><div class="line"><span class="function"><span class="params">                   HINSTANCE,</span></span></div><div class="line"><span class="function"><span class="params">                   LPSTR     lpCmdLine,</span></span></div><div class="line"><span class="function"><span class="params">                   <span class="keyword">int</span>       nCmdShow  )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!InitApplication(hInstance))       <span class="comment">// 应用初始化</span></div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!InitInstance(hInstance,nCmdShow)) <span class="comment">// 实例初始化</span></div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line"></div><div class="line">    MSG msg;</div><div class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))   <span class="comment">// 消息循环</span></div><div class="line">    &#123;</div><div class="line">        TranslateMessage(&amp;msg);</div><div class="line">        DispatchMessage(&amp;msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)msg.wParam;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">InitApplication</span><span class="params">(HINSTANCE hInstance)</span>   <span class="comment">// 应用初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    WNDCLASS  wc;  <span class="comment">// Data structure of the window class</span></div><div class="line"></div><div class="line">    wc.style            = CS_HREDRAW|CS_VREDRAW;</div><div class="line">    wc.lpfnWndProc      = (WNDPROC)MainWndProc;  <span class="comment">// Name of the Window Function</span></div><div class="line">    wc.cbClsExtra       = <span class="number">0</span>;</div><div class="line">    wc.cbWndExtra       = <span class="number">0</span>;</div><div class="line">    wc.hInstance        = hInstance;</div><div class="line">    wc.hIcon            = LoadIcon (<span class="literal">NULL</span>, IDI_APPLICATION);</div><div class="line">    wc.hCursor          = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</div><div class="line">    wc.hbrBackground    = (HBRUSH)GetStockObject(WHITE_BRUSH);</div><div class="line">    wc.lpszMenuName     = <span class="literal">NULL</span>;</div><div class="line">    wc.lpszClassName    = TEXT(<span class="string">"My1stWClass"</span>);  <span class="comment">// Name of the window class</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> RegisterClass(&amp;wc);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span>  <span class="comment">// 实例初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    HWND hWnd = CreateWindow(TEXT(<span class="string">"My1stWClass"</span>),     <span class="comment">// Name of the window class</span></div><div class="line">                             TEXT(<span class="string">"My First Window"</span>), <span class="comment">// Title of the window</span></div><div class="line">                             WS_OVERLAPPEDWINDOW,</div><div class="line">                             CW_USEDEFAULT,</div><div class="line">                             CW_USEDEFAULT,</div><div class="line">                             CW_USEDEFAULT,</div><div class="line">                             CW_USEDEFAULT,</div><div class="line">                             <span class="literal">NULL</span>,</div><div class="line">                             <span class="literal">NULL</span>,</div><div class="line">                             hInstance,</div><div class="line">                             <span class="literal">NULL</span>                                        );</div><div class="line">    <span class="keyword">if</span> (!hWnd) <span class="keyword">return</span> FALSE;</div><div class="line"></div><div class="line">    ShowWindow(hWnd, nCmdShow);</div><div class="line">    UpdateWindow(hWnd);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"></div><div class="line"><span class="comment">// 窗口过程函数</span></div><div class="line"></div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">MainWndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    PAINTSTRUCT ps;</div><div class="line">    HDC hdc;</div><div class="line">    PROCESSENTRY32 pe32;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (message)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> WM_PAINT:  <span class="comment">// 窗口客户区得刷新</span></div><div class="line">        &#123;</div><div class="line">            TCHAR id[<span class="number">30</span>];</div><div class="line">            TCHAR name[<span class="number">30</span>];</div><div class="line">            LPCTSTR title = TEXT(<span class="string">"进程ID               模块名             "</span>);</div><div class="line">            <span class="keyword">int</span> row = <span class="number">0</span>;</div><div class="line"></div><div class="line">            hdc = BeginPaint (hWnd, &amp;ps);</div><div class="line">            <span class="comment">// 给系统内的所有进程拍快照</span></div><div class="line">            HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</div><div class="line">            <span class="comment">// 在使用这个结构之前，先设置它的大小</span></div><div class="line">            pe32.dwSize = <span class="keyword">sizeof</span>(pe32);</div><div class="line">             <span class="comment">// 遍历进程快照，轮流显示每个进程的信息</span></div><div class="line">            BOOL bMore = Process32First(hProcessSnap, &amp;pe32);</div><div class="line"></div><div class="line">            TextOut(hdc,<span class="number">20</span>,<span class="number">20</span>,title,lstrlen(title)); <span class="comment">//显示标题栏</span></div><div class="line">            <span class="keyword">while</span>(bMore)</div><div class="line">            &#123;</div><div class="line">                row += <span class="number">20</span>;</div><div class="line">                <span class="keyword">if</span>(row%<span class="number">400</span> == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    TextOut(hdc,row/<span class="number">400</span>*<span class="number">350</span>+<span class="number">20</span>,<span class="number">20</span>,title,lstrlen(title)); <span class="comment">//显示标题栏</span></div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                wsprintf(id,<span class="string">"%05x"</span>,(<span class="keyword">unsigned</span>)pe32.th32ProcessID);</div><div class="line">                wsprintf(name,<span class="string">"%s"</span>,pe32.szExeFile);</div><div class="line"></div><div class="line">                TextOut(hdc,row/<span class="number">400</span>*<span class="number">350</span>+<span class="number">20</span>,row%<span class="number">400</span>+<span class="number">20</span>,id,lstrlen(id));</div><div class="line">                TextOut(hdc,row/<span class="number">400</span>*<span class="number">350</span>+<span class="number">100</span>,row%<span class="number">400</span>+<span class="number">20</span>,name,lstrlen(name));</div><div class="line"></div><div class="line">                bMore = Process32Next(hProcessSnap, &amp;pe32);</div><div class="line">            &#125;</div><div class="line">            CloseHandle(hProcessSnap); <span class="comment">// 清除snapshot对象</span></div><div class="line">            EndPaint (hWnd, &amp;ps);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> WM_DESTROY: <span class="comment">// 窗口关闭</span></div><div class="line">            PostQuitMessage(<span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:  <span class="comment">// 缺省消息的处理</span></div><div class="line">            <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="wxpython版本"><a href="#wxpython版本" class="headerlink" title="wxpython版本"></a>wxpython版本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> wx</div><div class="line"><span class="keyword">import</span> psutil</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span><span class="params">(wx.Frame)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        wx.Frame.__init__(self, <span class="keyword">None</span>, <span class="number">-1</span>, <span class="string">"My Frame"</span>, size=(<span class="number">800</span>, <span class="number">600</span>))</div><div class="line">        panel = wx.Panel(self, <span class="number">-1</span>)</div><div class="line">        title = wx.StaticText(panel, <span class="number">-1</span>, <span class="string">u"进程ID：    模块名："</span>, pos=(<span class="number">20</span>, <span class="number">20</span>))</div><div class="line">        title.SetForegroundColour(wx.Colour(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line"></div><div class="line">        icon = wx.Icon(name=<span class="string">'About.ico'</span>, type=wx.BITMAP_TYPE_ICO)</div><div class="line">        self.SetIcon(icon)</div><div class="line"></div><div class="line">        ACCESS_DENIED = <span class="string">''</span></div><div class="line">        x, y = <span class="number">20</span>, <span class="number">40</span></div><div class="line">        <span class="keyword">for</span> pid <span class="keyword">in</span> sorted(psutil.pids()):</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">if</span> y % <span class="number">600</span> == <span class="number">0</span>:</div><div class="line">                    x += <span class="number">400</span></div><div class="line">                    y += <span class="number">20</span></div><div class="line">                    title = wx.StaticText(</div><div class="line">                        panel, <span class="number">-1</span>, <span class="string">u"进程ID：    模块名："</span>, pos=(x, y % <span class="number">600</span>))</div><div class="line">                    title.SetForegroundColour(wx.Colour(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">                    y += <span class="number">20</span></div><div class="line">                p = psutil.Process(pid)</div><div class="line">                pinfo = p.as_dict(ad_value=ACCESS_DENIED)</div><div class="line">                s = <span class="string">u"%05x       %s"</span> % (pid, pinfo[<span class="string">'name'</span>])</div><div class="line">                wx.StaticText(panel, <span class="number">-1</span>, s, pos=(x, y % <span class="number">600</span>))</div><div class="line">                y += <span class="number">20</span></div><div class="line">            <span class="keyword">except</span> psutil.NoSuchProcess:</div><div class="line">                <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    os.chdir(<span class="string">u'F:/华师大/大二下/多平台应用开发/Lab2'</span>)</div><div class="line">    app = wx.App()</div><div class="line">    frame = MyFrame()</div><div class="line">    frame.Show(<span class="keyword">True</span>)</div><div class="line">    app.MainLoop()</div></pre></td></tr></table></figure><p>PS:</p><p>毕竟刚学没多久，代码肯定写的不够专业，有很多问题也不理解，先放上来留作今后的参考，有需要的自取。</p><p>这学期什么课都要自学，累啊。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;分别使用windows SDK和wxpython显示系统当前进程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="windows编程" scheme="https://luxuantao.github.io/tags/windows%E7%BC%96%E7%A8%8B/"/>
    
      <category term="wxpython" scheme="https://luxuantao.github.io/tags/wxpython/"/>
    
  </entry>
  
  <entry>
    <title>python-转手绘</title>
    <link href="https://luxuantao.github.io/2018/03/25/python-%E8%BD%AC%E6%89%8B%E7%BB%98/"/>
    <id>https://luxuantao.github.io/2018/03/25/python-转手绘/</id>
    <published>2018-03-25T03:18:24.000Z</published>
    <updated>2018-03-25T03:18:04.885Z</updated>
    
    <content type="html"><![CDATA[<hr><p>用numpy和PIL库进行图像变换。</p><a id="more"></a><h2 id="灰度化"><a href="#灰度化" class="headerlink" title="灰度化"></a>灰度化</h2><p>一张图片无非就是个二维数组，其中的每个元素又是一个三元组[R，G，B]，改变RGB的值也就改变了图片的色调。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">a = np.array(Image.open(<span class="string">'test.jpg'</span>).convert(<span class="string">'L'</span>)) <span class="comment">#二维数组里存储的将不再是RGB，而只有灰度值</span></div><div class="line">print(a.shape,a.dtype) <span class="comment">#获取图片的二维数组大小和格式</span></div><div class="line"></div><div class="line"><span class="comment">#不同的变化</span></div><div class="line"><span class="comment">#b = 255 - a</span></div><div class="line"><span class="comment">#b = (100/255)*a+150</span></div><div class="line">b = <span class="number">255</span>*(a/<span class="number">255</span>)**<span class="number">2</span> </div><div class="line"></div><div class="line">im = Image.fromarray(b.astype(<span class="string">'uint8'</span>))</div><div class="line">im.save(<span class="string">'result.jpg'</span>)</div></pre></td></tr></table></figure><h2 id="转手绘效果"><a href="#转手绘效果" class="headerlink" title="转手绘效果"></a>转手绘效果</h2><p>不只是PS可以这样，用python也可以。</p><p>手绘效果其实就是由立体效果和明暗效果叠加而成的。</p><p>灰度表示的是图像的明暗变化，而梯度表示的是灰度的变化率，所以可以通过调整像素之间的梯度值来改变明暗程度。</p><p>立体效果则通过添加虚拟深度值来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">a = np.asarray(Image.open(<span class="string">'test.jpg'</span>).convert(<span class="string">'L'</span>)).astype(<span class="string">'float'</span>)</div><div class="line"></div><div class="line">depth = <span class="number">10.</span> <span class="comment">#深度值 (0-100)</span></div><div class="line">grad = np.gradient(a)<span class="comment">#取图像灰度的梯度值</span></div><div class="line">grad_x, grad_y = grad <span class="comment">#分别取横纵图像梯度值</span></div><div class="line">grad_x = grad_x*depth/<span class="number">100.</span>          <span class="comment">#根据深度值调整横纵方向的梯度值</span></div><div class="line">grad_y = grad_y*depth/<span class="number">100.</span></div><div class="line"></div><div class="line"><span class="comment">#梯度归一化</span></div><div class="line">A = np.sqrt(grad_x**<span class="number">2</span> + grad_y**<span class="number">2</span> + <span class="number">1.</span>) </div><div class="line">uni_x = grad_x/A</div><div class="line">uni_y = grad_y/A</div><div class="line">uni_z = <span class="number">1.</span>/A</div><div class="line"></div><div class="line"><span class="comment">#光源归一化</span></div><div class="line">vec_el = np.pi/<span class="number">2.2</span> <span class="comment">#光源的俯视角度，弧度值</span></div><div class="line">vec_az = np.pi/<span class="number">4.</span> <span class="comment">#光源的方位角度，弧度值</span></div><div class="line">dx = np.cos(vec_el)*np.cos(vec_az) <span class="comment">#光源对x轴的影响</span></div><div class="line">dy = np.cos(vec_el)*np.sin(vec_az) <span class="comment">#光源对y轴的影响</span></div><div class="line">dz = np.sin(vec_el) <span class="comment">#光源对z轴的影响</span></div><div class="line"></div><div class="line">b = <span class="number">255</span>*(dx*uni_x + dy*uni_y + dz*uni_z) <span class="comment">#梯度与光源相互作用，将梯度转换为灰度</span></div><div class="line">b = b.clip(<span class="number">0</span>,<span class="number">255</span>)<span class="comment">#防止数据越界，将生成的灰度值裁剪至0-255</span></div><div class="line"></div><div class="line">im = Image.fromarray(b.astype(<span class="string">'uint8'</span>)) <span class="comment">#重构图像</span></div><div class="line">im.save(<span class="string">'result.jpg'</span>)</div></pre></td></tr></table></figure><p>原图：</p><p><img src="/images/beijing.jpg" alt="原图"></p><p>手绘效果：</p><p><img src="/images/beijingHD.jpg" alt="手绘效果"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;用numpy和PIL库进行图像变换。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="数据分析" scheme="https://luxuantao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="图像处理" scheme="https://luxuantao.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>python-多线程</title>
    <link href="https://luxuantao.github.io/2018/03/25/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://luxuantao.github.io/2018/03/25/python-多线程/</id>
    <published>2018-03-25T03:05:58.000Z</published>
    <updated>2018-03-25T03:12:13.594Z</updated>
    
    <content type="html"><![CDATA[<hr><p>python中有关多线程的操作方法。</p><a id="more"></a><p>threading库是python支持多线程编程的重要模块。</p><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>一种方法是直接使用threading中的Thread类创建对象。</p><p>另一种方法是继承Thread类并重写<code>__init__()</code>和<code>run()</code>方法。</p><h2 id="线程的管理"><a href="#线程的管理" class="headerlink" title="线程的管理"></a>线程的管理</h2><h3 id="join-timeout"><a href="#join-timeout" class="headerlink" title="join([timeout])"></a>join([timeout])</h3><p>阻塞当前线程，等待被调线程结束或超时后再执行当前线程，timeout单位是秒。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(x, y):</div><div class="line">        print(i, end=<span class="string">' '</span>)</div><div class="line">    print()</div><div class="line">    time.sleep(<span class="number">10</span>) <span class="comment">#等待10秒</span></div><div class="line"></div><div class="line">t1 = Thread(target=fun, args=(<span class="number">15</span>, <span class="number">20</span>))</div><div class="line">t1.start()</div><div class="line">t1.join(<span class="number">5</span>) <span class="comment">#等待t1结束或等待5秒</span></div><div class="line">t2 = Thread(target=fun, args=(<span class="number">5</span>, <span class="number">10</span>))</div><div class="line">t2.start()</div></pre></td></tr></table></figure><h3 id="isAlive"><a href="#isAlive" class="headerlink" title="isAlive()"></a>isAlive()</h3><p>测试线程是否处于运行状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></div><div class="line">    time.sleep(<span class="number">10</span>) <span class="comment">#等待10秒</span></div><div class="line"></div><div class="line">t1 = Thread(target=fun)</div><div class="line">print(<span class="string">'t1:'</span>,t1.isAlive()) <span class="comment">#False</span></div><div class="line"></div><div class="line">t1.start()</div><div class="line">print(<span class="string">'t1:'</span>,t1.isAlive()) <span class="comment">#True</span></div><div class="line"></div><div class="line">t1.join(<span class="number">5</span>) <span class="comment">#因超时而结束</span></div><div class="line">print(<span class="string">'t1:'</span>,t1.isAlive()) <span class="comment">#True</span></div><div class="line"></div><div class="line">t1.join() <span class="comment">#等待t1结束</span></div><div class="line">print(<span class="string">'t1:'</span>,t1.isAlive()) <span class="comment">#False</span></div></pre></td></tr></table></figure><h3 id="daemon属性"><a href="#daemon属性" class="headerlink" title="daemon属性"></a>daemon属性</h3><p>如某个子线程的daemon属性为False（默认情况），主线程结束时会检测该子线程是否结束并等待它结束后再退出。若为True，则该子线程不管有没有运行玩，都会随主线程一起结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mythread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num, threadname)</span>:</span></div><div class="line">        threading.Thread.__init__(self,name=threadname)</div><div class="line">        self.num = num</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span>        </div><div class="line">        time.sleep(self.num)</div><div class="line">        print(self.num)</div><div class="line"></div><div class="line">t1 = mythread(<span class="number">1</span>, <span class="string">'t1'</span>)</div><div class="line">t2 = mythread(<span class="number">5</span>, <span class="string">'t2'</span>)</div><div class="line">t2.daemon = <span class="keyword">True</span></div><div class="line">t2.setDaemon(<span class="keyword">False</span>)</div><div class="line">print(t1.daemon) <span class="comment">#False</span></div><div class="line">print(t2.daemon) <span class="comment">#True</span></div><div class="line">t1.start()</div><div class="line">t2.start()</div></pre></td></tr></table></figure><p>1会输出，但5不会输出。</p><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><h3 id="RLock对象"><a href="#RLock对象" class="headerlink" title="RLock对象"></a>RLock对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mythread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> x</div><div class="line">        lock.acquire() <span class="comment">#获取锁，如果成功则进入临界区</span></div><div class="line">        x += <span class="number">1</span></div><div class="line">        time.sleep(<span class="number">0.5</span>)</div><div class="line">        print(x)</div><div class="line">        lock.release() <span class="comment">#释放锁，退出临界区</span></div><div class="line"></div><div class="line">lock = threading.RLock()</div><div class="line">tl = [] <span class="comment">#用来存放多个进程</span></div><div class="line">x = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</div><div class="line">    t = mythread()</div><div class="line">    tl.append(t)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tl:</div><div class="line">    i.start()</div></pre></td></tr></table></figure><p>如果没有这把读锁，那么x的值将会变得杂乱无章，出现“脏读”现象。</p><p>“死锁”现象：假设有两个线程和两把锁，只有两把锁都给同一个线程的时候这个线程才会运行。那么问题来了，当两个线程各自获得了其中的一把锁，这时它们都在等待另一把锁释放，这时就会出现死锁现象。</p><h3 id="Condition对象"><a href="#Condition对象" class="headerlink" title="Condition对象"></a>Condition对象</h3><p>用经典的生产者和消费者问题演示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadname)</span>:</span></div><div class="line">        threading.Thread.__init__(self,name=threadname)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> x</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            con.acquire() <span class="comment">#获取锁</span></div><div class="line">            <span class="keyword">if</span> len(x) == <span class="number">10</span>:</div><div class="line">                print(<span class="string">'Producer is waiting'</span>)</div><div class="line">                con.wait() <span class="comment">#共享列表已有10个元素，不再生产</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'Producer:'</span>, end=<span class="string">' '</span>)</div><div class="line">                x.append(randint(<span class="number">1</span>,<span class="number">1000</span>))</div><div class="line">                print(x)</div><div class="line">                time.sleep(<span class="number">1</span>)</div><div class="line">                con.notify() <span class="comment">#唤醒等待条件的线程</span></div><div class="line">            con.release() <span class="comment">#释放锁</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadname)</span>:</span></div><div class="line">        threading.Thread.__init__(self, name =threadname)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> x</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            con.acquire()</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> x:</div><div class="line">                print(<span class="string">'Consumer is waiting'</span>)</div><div class="line">                con.wait() <span class="comment">#共享列表没东西，暂停消费</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(x.pop(<span class="number">0</span>))</div><div class="line">                print(x)</div><div class="line">                time.sleep(<span class="number">1</span>)</div><div class="line">                con.notify()</div><div class="line">            con.release()</div><div class="line"></div><div class="line">con = threading.Condition()</div><div class="line">x = []</div><div class="line">p = Producer(<span class="string">'Producer'</span>)</div><div class="line">c = Consumer(<span class="string">'Consumer'</span>)</div><div class="line">p.start()</div><div class="line">c.start()</div><div class="line">p.join()</div><div class="line">c.join()</div></pre></td></tr></table></figure><p>notify()方法是从所有等待这个对象锁的线程中随机唤醒一个。</p><p>notify_all()方法能够唤醒所有正在等待这个对象锁的线程，唤醒的线程获得锁的概率是随机的，取决于cpu调度。</p><p>notify()或者notify_alll()方法并不是真正释放锁，必须等到release方法执行完才真正释放锁。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;python中有关多线程的操作方法。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="多线程" scheme="https://luxuantao.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java-流处理</title>
    <link href="https://luxuantao.github.io/2018/03/04/java-%E6%B5%81%E5%A4%84%E7%90%86/"/>
    <id>https://luxuantao.github.io/2018/03/04/java-流处理/</id>
    <published>2018-03-04T11:23:51.000Z</published>
    <updated>2018-03-04T11:23:19.522Z</updated>
    
    <content type="html"><![CDATA[<hr><p>java常用文件处理方法。</p><a id="more"></a><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"></div><div class="line"><span class="comment">//获取一个路径下的所有目录和文件</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\"</span>);</div><div class="line">        <span class="keyword">if</span>(file.isDirectory()) &#123;</div><div class="line">            String[] names = file.list();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.length; i++) &#123;</div><div class="line">                System.out.println(names[i]);</div><div class="line">            &#125;</div><div class="line">            File[] files = file.listFiles();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</div><div class="line">                System.out.println(files[i].getAbsolutePath());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"不是一个文件夹"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>主要学两个类：FileInputStream和FileOutputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        <span class="keyword">byte</span>[] content = <span class="keyword">null</span>;</div><div class="line">        FileInputStream fis = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">            content = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</div><div class="line">            fis.read(content);</div><div class="line">            fis.close();</div><div class="line">            System.out.println(<span class="string">"读取完成"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            System.out.println(<span class="string">"文件不存在"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            System.out.println(<span class="string">"读取失败"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="keyword">new</span> String(content));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        String str = <span class="string">"写入这个"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file,<span class="keyword">false</span>); <span class="comment">//默认flase表示覆盖文件原有内容；true表示接在文件的最后写入</span></div><div class="line">            fos.write(str.getBytes());</div><div class="line">            fos.close();</div><div class="line">            System.out.println(<span class="string">"写入成功"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            System.out.println(<span class="string">"文件找不到"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            System.out.println(<span class="string">"写入失败"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>不同于字节流：</p><p>例如要写入整数10到文件中，字节流会把数字10的ASCII码写进去，而字符流是以字符1和0写入。</p><p>主要学两个类：FileReader和FileWriter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        <span class="keyword">char</span>[] content = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileReader fr = <span class="keyword">new</span> FileReader(file);</div><div class="line">            content = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">512</span>];</div><div class="line">            fr.read(content);</div><div class="line">            fr.close();</div><div class="line">            System.out.println(<span class="string">"读取成功"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            System.out.println(<span class="string">"文件不存在"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            System.out.println(<span class="string">"读取失败"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="keyword">new</span> String(content));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileWriter;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(file);</div><div class="line">            fw.write(<span class="string">"FileWriter"</span>);</div><div class="line">            fw.close(); <span class="comment">//别忘关，不然东西都在缓冲区里，也可用fw.flush()</span></div><div class="line">            System.out.println(<span class="string">"写入成功"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            System.out.println(<span class="string">"写入失败"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>BufferedReader类：创建对象时，不能直接用File对象做参数，得用Reader。</p><p>可以这样做，先用文件名创建出一个FileReader，再把FileReader作为参数传给BufferedReader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        FileReader fr = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fr = <span class="keyword">new</span> FileReader(file);</div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</div><div class="line">            String str = br.readLine();</div><div class="line">            <span class="keyword">while</span>(str != <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.println(str);</div><div class="line">                str = br.readLine();</div><div class="line">            &#125;</div><div class="line">            br.close();</div><div class="line">            fr.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果用System.in从控制台读入数据,由于读入的是字节流，而BufferedReader只接受字符流，怎么办呢？</p><p>可以用InputStreamReader，将字节流转换为字符流，再传给BufferedReader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String str = br.readLine();</div><div class="line">            <span class="keyword">while</span>(str != <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.println(str);</div><div class="line">                str = br.readLine();</div><div class="line">            &#125;</div><div class="line">            br.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>BufferedWriter类和BufferedReader类一样，都不能直接用File对象做参数，所以要先建一个FileWriter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedWriter;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileWriter;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriterDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String[] strings = &#123;<span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>&#125;;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        FileWriter fw = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fw = <span class="keyword">new</span> FileWriter(file);</div><div class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</div><div class="line">                bw.write(strings[i]);</div><div class="line">                bw.write(<span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">            bw.close();</div><div class="line">            fw.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><p>对象的序列化：把对象转换为字节序列。</p><p>对象的反序列化：把字节序列转换为对象。</p><p>主要学两个类：ObjectInputStream和ObjectOutputStream（不能直接用File对象做参数）。</p><p>先建一个类，叫做Person。注意，要实现序列化和反序列化，这个类必须implements Serializable接口，这是一个标记接口（即一个方法都没有），所以不必Override。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Person[姓名="</span>+name+<span class="string">",年龄="</span>+age+<span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>把Person的对象输出到文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputStreamDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"person.txt"</span>);</div><div class="line">        FileOutputStream fos = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</div><div class="line">            Person person = <span class="keyword">new</span> Person();</div><div class="line">            person.name = <span class="string">"Luson"</span>;</div><div class="line">            person.age = <span class="number">20</span>;</div><div class="line">            oos.writeObject(person);</div><div class="line">            oos.close();</div><div class="line">            fos.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从文件中再把Person的对象读回来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStreamDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"person.txt"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</div><div class="line">            Person person = (Person)ois.readObject();</div><div class="line">            System.out.println(person);</div><div class="line">            ois.close();</div><div class="line">            fis.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意到Person类中age的类型前有一个transient，这表明该变量是不参与序列化的，而且不管你怎么修改它的值，从文件里读回来（即反序列化）的时候，它的值永远是0或null。</p><p>此外，如果类中还有static类型的变量，那么也不会参与序列化，但是它的值却是可以更改的。</p><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>可以读取和写入java的标准数据类型。</p><p>主要学两个类：DataInputStream和DataOutputStream，分别要求传入InputStream和OutputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataStreamDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Person[] persons = <span class="keyword">new</span> Person[]&#123;<span class="keyword">new</span> Person(<span class="string">"Kate"</span>,<span class="number">18</span>),</div><div class="line">                <span class="keyword">new</span> Person(<span class="string">"Tom"</span>,<span class="number">18</span>),<span class="keyword">new</span> Person(<span class="string">"Lucy"</span>,<span class="number">19</span>)&#125;;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"persons.txt"</span>);</div><div class="line">        FileOutputStream fos = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">            DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(fos);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; persons.length; i++) &#123;</div><div class="line">                dos.writeUTF(persons[i].name);</div><div class="line">                dos.writeChar(<span class="string">'\t'</span>);</div><div class="line">                dos.writeInt(persons[i].age);</div><div class="line">            &#125;</div><div class="line">            dos.close();</div><div class="line">            fos.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        FileInputStream fis = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">            DataInputStream dis = <span class="keyword">new</span> DataInputStream(fis);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; persons.length; i++) &#123;</div><div class="line">                String str = dis.readUTF();</div><div class="line">                <span class="keyword">char</span> ch = dis.readChar();</div><div class="line">                <span class="keyword">int</span> age = dis.readInt();</div><div class="line">                System.out.println(str+ch+age);</div><div class="line">            &#125;</div><div class="line">            dis.close();</div><div class="line">            fis.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;java常用文件处理方法。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
      <category term="流处理" scheme="https://luxuantao.github.io/tags/%E6%B5%81%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>java-网络编程</title>
    <link href="https://luxuantao.github.io/2018/02/21/java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://luxuantao.github.io/2018/02/21/java-网络编程/</id>
    <published>2018-02-21T14:25:59.000Z</published>
    <updated>2018-02-21T14:26:00.898Z</updated>
    
    <content type="html"><![CDATA[<hr><p>网络编程本质还是在处理IO流上。</p><a id="more"></a><h2 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h2><p>这个类主要用来表示IP地址，有两个子类：Inet4Address和Inet6Address</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        InetAddress locAdd = InetAddress.getLocalHost();</div><div class="line">        InetAddress remAdd = InetAddress.getByName(<span class="string">"luxuantao.github.io"</span>);</div><div class="line">        System.out.println(<span class="string">"本机IP地址"</span>+locAdd.getHostAddress());</div><div class="line">        System.out.println(<span class="string">"我的博客的IP地址"</span>+remAdd.getHostAddress());</div><div class="line">        System.out.println(<span class="string">"本机是否可达"</span>+locAdd.isReachable(<span class="number">5000</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="URL类"><a href="#URL类" class="headerlink" title="URL类"></a>URL类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="comment">//URL类的基本方法</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseURL</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        URL Aurl = <span class="keyword">new</span> URL(<span class="string">"http://java.sun.com:80/docs/books/"</span>); <span class="comment">//基地址</span></div><div class="line">        URL tuto = <span class="keyword">new</span> URL(Aurl,<span class="string">"tutorial.intro.html#DOWNLOADING"</span>); <span class="comment">//相对地址</span></div><div class="line">        System.out.println(<span class="string">"协议信息"</span>+tuto.getProtocol());</div><div class="line">        System.out.println(<span class="string">"地址"</span>+tuto.getHost());</div><div class="line">        System.out.println(<span class="string">"文件名"</span>+tuto.getFile());</div><div class="line">        System.out.println(<span class="string">"端口"</span>+tuto.getPort());</div><div class="line">        System.out.println(<span class="string">"引用信息"</span>+tuto.getRef());</div><div class="line">        System.out.println(<span class="string">"查询信息"</span>+tuto.getQuery());</div><div class="line">        System.out.println(<span class="string">"路径"</span>+tuto.getPath());</div><div class="line">        System.out.println(<span class="string">"用户信息"</span>+tuto.getUserInfo());</div><div class="line">        System.out.println(<span class="string">"权限信息"</span>+tuto.getAuthority());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="comment">//从URL读取网络资源</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLReader</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        URL tire = <span class="keyword">new</span> URL(<span class="string">"https://luxuantao.github.io/"</span>);</div><div class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(tire.openStream()));</div><div class="line">        String inputLine;</div><div class="line">        <span class="keyword">while</span>((inputLine = in.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(inputLine);</div><div class="line">        &#125;</div><div class="line">        in.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="URLConnection类"><a href="#URLConnection类" class="headerlink" title="URLConnection类"></a>URLConnection类</h2><p>URL是单向的，而URLConnection是双向的，可以通过它对URL资源读或写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.net.URLConnection;</div><div class="line"></div><div class="line"><span class="comment">//与指定URL建立动态链接,可向服务器发送请求</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLConnectionDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://www.mldnjava.cn"</span>);</div><div class="line">        URLConnection urlCon = url.openConnection(); <span class="comment">//建立连接</span></div><div class="line">        System.out.println(<span class="string">"内容大小"</span>+urlCon.getContentLength());</div><div class="line">        System.out.println(<span class="string">"内容类型"</span>+urlCon.getContentType());</div><div class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader((urlCon.getInputStream())));</div><div class="line">        String inputline;</div><div class="line">        <span class="keyword">while</span> ((inputline = in.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(inputline);</div><div class="line">        &#125;</div><div class="line">        in.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="服务端与客户端简单交互"><a href="#服务端与客户端简单交互" class="headerlink" title="服务端与客户端简单交互"></a>服务端与客户端简单交互</h2><h3 id="单向传输（服务端给客户端）"><a href="#单向传输（服务端给客户端）" class="headerlink" title="单向传输（服务端给客户端）"></a>单向传输（服务端给客户端）</h3><p>示例：服务端传输helloworld给客户端。</p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.net.UnknownHostException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8888</span>);</div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(client.getInputStream()));</div><div class="line">        String context = br.readLine();</div><div class="line">        System.out.println(<span class="string">"当前服务端输出的语句是："</span>+context);</div><div class="line">        br.close();</div><div class="line">        client.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">        System.out.println(<span class="string">"服务器运行，等待客户端连接"</span>);</div><div class="line">        Socket client = server.accept();</div><div class="line">        OutputStream out = client.getOutputStream();</div><div class="line">        PrintWriter pw =<span class="keyword">new</span> PrintWriter(out);</div><div class="line">        pw.println(<span class="string">"hello world!"</span>);</div><div class="line">        pw.close();</div><div class="line">        client.close();</div><div class="line">        server.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="一对一TCP传输（单个服务端和单个客户端）"><a href="#一对一TCP传输（单个服务端和单个客户端）" class="headerlink" title="一对一TCP传输（单个服务端和单个客户端）"></a>一对一TCP传输（单个服务端和单个客户端）</h3><p>示例：客户端发送半径给服务端，服务端算出圆的面积后把结果返回给客户端。</p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.rmi.UnknownHostException;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8888</span>);</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        DataInputStream fromServer = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">        DataOutputStream toServer = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"请输入半径："</span>);</div><div class="line">            <span class="keyword">double</span> radius = sc.nextDouble();</div><div class="line">            toServer.writeDouble(radius);</div><div class="line">            toServer.flush();</div><div class="line">            <span class="keyword">double</span> area = fromServer.readDouble();</div><div class="line">            System.out.println(<span class="string">"客户端：输入的半径是："</span>+radius);</div><div class="line">            System.out.println(<span class="string">"客户端：收到的圆的面积是："</span>+area);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">        System.out.println(<span class="string">"服务器启动成功，时间是"</span>+<span class="keyword">new</span> Date());</div><div class="line">        Socket client = server.accept();</div><div class="line">        DataInputStream inputFromClient = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">        DataOutputStream outputToClient = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">double</span> radius = inputFromClient.readDouble();</div><div class="line">            <span class="keyword">double</span> area = radius*radius*Math.PI;</div><div class="line">            System.out.println(<span class="string">"服务端：接受到客户端半径为："</span>+radius);</div><div class="line">            System.out.println(<span class="string">"服务端：计算面积为："</span>+area);</div><div class="line">            outputToClient.writeDouble(area);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="一对多TCP传输（单个服务端和多个客户端）"><a href="#一对多TCP传输（单个服务端和多个客户端）" class="headerlink" title="一对多TCP传输（单个服务端和多个客户端）"></a>一对多TCP传输（单个服务端和多个客户端）</h3><p>当多个客户端同时对服务器发送请求时，上面的方法就不行了（在IDE上的表现就是多次启动了客户端程序，这时只有第一个客户端程序能够成功连接上服务端）。</p><p>不过，可以通过多线程解决这个问题。</p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.rmi.UnknownHostException;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8888</span>);</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        DataInputStream fromServer = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">        DataOutputStream toServer = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"请输入半径："</span>);</div><div class="line">            <span class="keyword">double</span> radius = sc.nextDouble();</div><div class="line">            toServer.writeDouble(radius);</div><div class="line">            toServer.flush();</div><div class="line">            <span class="keyword">double</span> area = fromServer.readDouble();</div><div class="line">            System.out.println(<span class="string">"客户端：输入的半径是："</span>+radius);</div><div class="line">            System.out.println(<span class="string">"客户端：收到的圆的面积是："</span>+area);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">        System.out.println(<span class="string">"服务器启动成功，时间是"</span>+<span class="keyword">new</span> Date());</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">            Socket client = server.accept();</div><div class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AreaRunnable(client)); <span class="comment">//多创建一个线程回应请求</span></div><div class="line">            thread.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AreaRunnable类（处理每个线程）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AreaRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Socket client;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AreaRunnable</span><span class="params">(Socket client)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.client = client;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            DataInputStream inputFromClient = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">            DataOutputStream outputToClient = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">double</span> radius = inputFromClient.readDouble();</div><div class="line">                <span class="keyword">double</span> area = radius * radius * Math.PI;</div><div class="line">                System.out.println(<span class="string">"服务端：接受到客户端半径为："</span> + radius);</div><div class="line">                System.out.println(<span class="string">"服务端：计算面积为："</span> + area);</div><div class="line">                outputToClient.writeDouble(area);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上这些内容基本上都属于TCP（要先进行服务端与客户端的连接），而实际上现在用的更多的是UDP（非连接，直接发送数据包），今后有空再研究了。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;网络编程本质还是在处理IO流上。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
      <category term="网络编程" scheme="https://luxuantao.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python-自定义类的运算</title>
    <link href="https://luxuantao.github.io/2018/02/18/python-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%9A%84%E8%BF%90%E7%AE%97/"/>
    <id>https://luxuantao.github.io/2018/02/18/python-自定义类的运算/</id>
    <published>2018-02-18T07:34:20.000Z</published>
    <updated>2018-02-18T07:41:13.330Z</updated>
    
    <content type="html"><![CDATA[<hr><p>自定义一个复数类，实现四则运算。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, real, imaginary)</span>:</span></div><div class="line">        self.real = real</div><div class="line">        self.imaginary = imaginary</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, no)</span>:</span></div><div class="line">        real = self.real + no.real</div><div class="line">        imaginary = self.imaginary + no.imaginary</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span><span class="params">(self, no)</span>:</span></div><div class="line">        real = self.real - no.real</div><div class="line">        imaginary = self.imaginary - no.imaginary</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, no)</span>:</span></div><div class="line">        real = self.real * no.real - self.imaginary * no.imaginary</div><div class="line">        imaginary = self.real * no.imaginary + self.imaginary * no.real</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__truediv__</span><span class="params">(self, no)</span>:</span></div><div class="line">        x = float(no.real ** <span class="number">2</span> + no.imaginary ** <span class="number">2</span>)</div><div class="line">        y = self * Complex(no.real, -no.imaginary)</div><div class="line">        real = y.real / x</div><div class="line">        imaginary = y.imaginary / x</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">(self)</span>:</span></div><div class="line">        real = math.sqrt(self.real ** <span class="number">2</span> + self.imaginary ** <span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> Complex(real, <span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.imaginary == <span class="number">0</span>:</div><div class="line">            result = <span class="string">"%.2f+0.00i"</span> % (self.real)</div><div class="line">        <span class="keyword">elif</span> self.real == <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> self.imaginary &gt;= <span class="number">0</span>:</div><div class="line">                result = <span class="string">"0.00+%.2fi"</span> % (self.imaginary)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                result = <span class="string">"0.00-%.2fi"</span> % (abs(self.imaginary))</div><div class="line">        <span class="keyword">elif</span> self.imaginary &gt; <span class="number">0</span>:</div><div class="line">            result = <span class="string">"%.2f+%.2fi"</span> % (self.real, self.imaginary)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result = <span class="string">"%.2f-%.2fi"</span> % (self.real, abs(self.imaginary))</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    c = map(float, input().split())</div><div class="line">    d = map(float, input().split())</div><div class="line">    x = Complex(*c)</div><div class="line">    y = Complex(*d)</div><div class="line">    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=<span class="string">'\n'</span>)</div></pre></td></tr></table></figure><p>有个巨坑的地方：python3定义一般的除法要用<code>__truediv__</code> 而不是<code>__div__</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;自定义一个复数类，实现四则运算。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>虚函数</title>
    <link href="https://luxuantao.github.io/2018/02/13/%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <id>https://luxuantao.github.io/2018/02/13/虚函数/</id>
    <published>2018-02-13T06:13:31.000Z</published>
    <updated>2018-02-13T06:38:54.497Z</updated>
    
    <content type="html"><![CDATA[<hr><p>有点乱。。有点乱。。</p><a id="more"></a><p>两个类，B继承自A</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A::f() is called"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"B::f() is called"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>如果这样调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    B* b = <span class="keyword">new</span> B();</div><div class="line">    A* a = b;</div><div class="line">    a-&gt;f();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure><p>或者这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    B b;</div><div class="line">    A&amp; a = b;</div><div class="line">    a.f();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这两个结果都是：<code>A::f() is called</code></p><p>这件事看起来很不可思议，尤其是学过java的人可能会感到困惑。</p><p>但如果你用到了虚函数，结果就会不一样,像这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A::f() is called"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"B::f() is called"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这时你再用上面的两种调用方式，结果就会是：<code>B::f() is called</code></p><p>其实是这样：</p><p>c++为了提高效率，默认采用的是静态绑定，而其他的大部分OOP语言（例如java）默认采用的是动态绑定。在java里根本就没有virtual这回事，运行时会自动判断这个父类的变量里到底放的是父类的对象还是子类的对象。如果你想说java里有abstract啊！那也不对，java里的abstract更像是c++中的纯虚函数，而不是虚函数。在c++里，如果你想在子类中override一个父类的函数，那么这两个函数都要用virtual修饰，并且调用的时候必须用父类的指针<code>A* a = b;</code>或是引用<code>A&amp; a = b;</code>，如果单纯地像这样：<code>B b;</code> <code>A a = b;</code>那么就会发生切片，结果会是<code>A::f() is called</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;有点乱。。有点乱。。&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>博客更新说明</title>
    <link href="https://luxuantao.github.io/2018/01/19/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E8%AF%B4%E6%98%8E/"/>
    <id>https://luxuantao.github.io/2018/01/19/博客更新说明/</id>
    <published>2018-01-19T06:49:47.000Z</published>
    <updated>2018-01-19T07:20:04.795Z</updated>
    
    <content type="html"><![CDATA[<hr><p>忙活了两天，升级版的博客总算完成了。</p><a id="more"></a><p>更新内容说明：</p><p>1.评论区已经开放，支持QQ，微信登陆。说来惭愧，光这个评论区就搞了一天，我记得当初建这个博客都没花这么长的时间。一开始想用国内一位大神写的Gitment（花了我四五个小时，害得我放假第一天游戏都没有玩！！！），不知是哪儿出了问题用不了，后来还是决定用韩国人的来必力，在阅读了无数韩国鸟文后，艰难地搭建好了评论环境（其实就用了十五分钟）。</p><p>2.增强了与github的联系，新增两处github仓库链接。</p><p>3.新增RSS链接。</p><p>4.新增EOJ链接。</p><p>5.今后加载页面时，顶部会出现加载条。</p><p>6.网站底部增加本站访客数，博客全站总字数。</p><p>7.每篇文章都增设了热度（就是阅读次数），字数统计，阅读时长。</p><p>8.文章分享栏尝试了一下，觉得不美观就删了。</p><p>9.hexo对网易云音乐的支持不稳定，在打开网页的会有一定概率弹出js提示框，虽然歌曲能放，但影响用户体验总是不太好，就删了。</p><p>10.网站小图标，文章标签图标，页面底部的主人图标已全部更新。</p><p>PS：最气的是本地全部搞好了，想部署到github的时候hexo报错了，我当时就懵了，tmd关键时刻掉链子。研究了将近一个小时无果后，我把整个.deploy_git文件夹全删了，重新生成了一下，虽然好用了，但是github上之前的版本记录也就全没了，不过现在生成静态文件的速度反倒变快了，真是因祸得福。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;忙活了两天，升级版的博客总算完成了。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>图的应用</title>
    <link href="https://luxuantao.github.io/2018/01/06/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://luxuantao.github.io/2018/01/06/图的应用/</id>
    <published>2018-01-06T01:00:05.000Z</published>
    <updated>2018-01-25T09:03:16.244Z</updated>
    
    <content type="html"><![CDATA[<hr><p>数据结构最后一次补充作业。</p><a id="more"></a><p>图的各种应用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100+5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXINT 1e6+5</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="keyword">int</span> y;</div><div class="line"><span class="keyword">int</span> w;</div><div class="line">&#125; EDGE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">l_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> ver;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">l_node</span> *<span class="title">link</span>;</span></div><div class="line">&#125; L_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">e_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> ver1;</div><div class="line"><span class="keyword">int</span> ver2;</div><div class="line">&#125; E_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">queuetype</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> qa;</div><div class="line"><span class="keyword">int</span> qe;</div><div class="line"><span class="keyword">int</span> item[MAXN];</div><div class="line">&#125; QTYPE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vl_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> ver;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vl_node</span> *<span class="title">link</span>;</span></div><div class="line">&#125; VL_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ch_node</span> //头结点</span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> count;</div><div class="line">VL_NODE *head;</div><div class="line">&#125; CH_NODE;</div><div class="line"></div><div class="line"><span class="keyword">int</span> parent[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> cost[][MAXN], <span class="keyword">int</span> n, <span class="keyword">int</span> v, <span class="keyword">int</span> dist[], <span class="keyword">int</span> pre[])</span> <span class="comment">//Dijkstra算法</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> s[MAXN], i, j, k, min;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">&#123;</div><div class="line">    dist[i] = cost[v][i]; <span class="comment">//dist数组赋初值</span></div><div class="line">   s[i] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(dist[i] &lt; MAXINT) <span class="comment">//如果v和i中有一条边，则pre[i]=v</span></div><div class="line">        pre[i] = v;</div><div class="line">   <span class="keyword">else</span> pre[i] = <span class="number">0</span>; <span class="comment">//如果没有边，则pre[i]=0</span></div><div class="line">   &#125;</div><div class="line">    s[v] = <span class="number">1</span>; <span class="comment">//起始顶点</span></div><div class="line">    pre[v] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">    &#123;</div><div class="line">        min = MAXINT;</div><div class="line">        k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j ++) <span class="comment">//寻找 dist[j]的最小值</span></div><div class="line">        &#123;</div><div class="line">        <span class="keyword">if</span>(s[j] == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">             <span class="keyword">if</span>(dist[j] != <span class="number">0</span> &amp;&amp; dist[j] &lt; min)  <span class="comment">//dist[j]小于当前最小值且不等于0</span></div><div class="line">             &#123;</div><div class="line">                    min = dist[j]; <span class="comment">//最小值</span></div><div class="line">                    k = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//没有与出发点相连的点</span></div><div class="line">        s[k] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j ++) <span class="comment">//修改不在s中的顶点的距离</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[j] == <span class="number">0</span> &amp;&amp; cost[k][j] &lt; MAXINT) <span class="comment">//j不在s中并且k到j有边</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(dist[k] + cost[k][j] &lt; dist[j])  <span class="comment">//若找到更短的路径</span></div><div class="line">                &#123;</div><div class="line">                    dist[j] = dist[k] + cost[k][j]; <span class="comment">//修改最短路径</span></div><div class="line">                    pre[j] = k;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">(<span class="keyword">int</span> cost[][MAXN], <span class="keyword">int</span> n, <span class="keyword">int</span> path[][MAXN])</span> <span class="comment">//Floyd算法</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i,j,k;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//初始化数组</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">&#123;</div><div class="line">path[i][j] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;=n; k++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;=n; j++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(cost[i][k] + cost[k][j] &lt; cost[i][j]) <span class="comment">//若找到更短路径</span></div><div class="line">&#123;</div><div class="line">cost[i][j] = cost[i][k] + cost[k][j]; <span class="comment">//更新最短路径</span></div><div class="line">path[i][j] = k;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_path</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> path[][MAXN])</span> <span class="comment">//打印从i到j最短路径的所有中间顶点</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> k;</div><div class="line">k = path[i][j];</div><div class="line"><span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">//没有中间顶点，返回</span></div><div class="line">print_path(i,k,path); <span class="comment">//递归地打印顶点i到K的中间顶点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>,k); <span class="comment">//打印顶点K</span></div><div class="line">print_path(k,j,path); <span class="comment">//递归地打印顶点k到j的中间顶点</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_all_path</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> path[][MAXN], <span class="keyword">int</span> cost[][MAXN])</span> <span class="comment">//打印所有点之间的最短路径</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i,j;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(i != j)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"从%d到%d:"</span>,i,j);</div><div class="line"><span class="keyword">if</span>(cost[i][j] == MAXINT) <span class="comment">//顶点i、j之间没有路径</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"NO path!\n"</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"最短路径长度为：%d\n"</span>,cost[i][j]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"最短路径为："</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>,i);</div><div class="line">print_path(i,j,path); <span class="comment">//打印从i到j最短路径的所有中间顶点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,j);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(<span class="keyword">int</span> cost[][MAXN], <span class="keyword">int</span> n, <span class="keyword">int</span> u)</span> <span class="comment">//普里姆算法</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> lowcost[MAXN], min, allcost=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> closest[MAXN];</div><div class="line"><span class="keyword">int</span> i, j, k;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++) <span class="comment">//给lowcost[]和closest[]置初值</span></div><div class="line">&#123;</div><div class="line">lowcost[i] = cost[u][i];</div><div class="line">closest[i] = u;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i ++) <span class="comment">//找出n-1个顶点</span></div><div class="line">&#123;</div><div class="line">min = MAXINT;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span> ; j &lt;= n; j ++) <span class="comment">//在v-u中依次找出到u代价最小的顶点k放入U中</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(lowcost[j] != <span class="number">0</span> &amp;&amp; lowcost[j] &lt; min)</div><div class="line">&#123;</div><div class="line">min = lowcost[j]; <span class="comment">//min 为最小代价</span></div><div class="line">k = j; <span class="comment">//k 为最小代价的顶点</span></div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"&#123;连通%d--%d,代价%d&#125;\n"</span>, closest[k], k, min);</div><div class="line">allcost += min;</div><div class="line">lowcost[k] = <span class="number">0</span>; <span class="comment">//标记顶点k已加入U</span></div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j ++) <span class="comment">//修改数组lowcost和closest</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(cost[k][j] != <span class="number">0</span> &amp;&amp; cost[k][j] &lt; lowcost[j])</div><div class="line">&#123;</div><div class="line">lowcost[j] = cost[k][j];</div><div class="line">closest[j] = k;</div><div class="line">&#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"总花费：%d\n"</span>,allcost);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">edge_cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a,<span class="keyword">const</span> <span class="keyword">void</span> *b)</span> <span class="comment">//按边的权值从小到大排列</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">EDGE *p1 = (EDGE*)a;</div><div class="line">EDGE *p2 = (EDGE*)b;</div><div class="line"><span class="keyword">return</span> p1-&gt;w - p2-&gt;w;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(parent[x] == x) <span class="keyword">return</span> x;</div><div class="line">parent[x] = find(parent[x]); <span class="comment">//路径压缩</span></div><div class="line"><span class="keyword">return</span> parent[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(EDGE edge[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> <span class="comment">//Kruskal算法</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,a,b,w,pa,pb,allcost=<span class="number">0</span>,cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">    &#123;</div><div class="line">    parent[i] = i; <span class="comment">//初始化</span></div><div class="line">    &#125;</div><div class="line">    qsort(edge,m,<span class="keyword">sizeof</span>(edge[<span class="number">0</span>]),edge_cmp); <span class="comment">//从小到大排</span></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</div><div class="line">    &#123;</div><div class="line">        a = edge[i].x;</div><div class="line">        b = edge[i].y;</div><div class="line">        w = edge[i].w;</div><div class="line">        pa = find(a);</div><div class="line">        pb = find(b);</div><div class="line">        <span class="keyword">if</span>(pa != pb)</div><div class="line">        &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"&#123;连通%d--%d,代价%d&#125;\n"</span>,a,b,w);</div><div class="line">        allcost += w;</div><div class="line">        parent[a]=b; <span class="comment">//合并</span></div><div class="line">        cnt++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(cnt == n<span class="number">-1</span>) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(cnt &lt; n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"不存在最小生成树\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,allcost);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_adj_list</span><span class="params">(L_NODE *head[], <span class="keyword">int</span> n, E_NODE e[], <span class="keyword">int</span> m)</span> <span class="comment">//建立邻接表</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, u, v;</div><div class="line">L_NODE *p;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">head[i] = <span class="literal">NULL</span>; <span class="comment">//头指针初始化为空</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i ++)</div><div class="line">&#123;</div><div class="line">u = e[i].ver1; <span class="comment">//u、v保存边e[i]的两个顶点</span></div><div class="line">v = e[i].ver2;</div><div class="line">p = (L_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(L_NODE)); <span class="comment">//生成顶点结点</span></div><div class="line">p-&gt;ver = v; <span class="comment">//保存顶点编号</span></div><div class="line">p-&gt;link = head[u]; <span class="comment">//1ink指向顶点head[u]</span></div><div class="line">head[u] = p;</div><div class="line">p = (L_NODE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(L_NODE)); <span class="comment">//生成顶点结点</span></div><div class="line">p-&gt;ver = u; <span class="comment">//保存顶点编号</span></div><div class="line">p-&gt;link = head[v] ; <span class="comment">//1ink指向顶点head[v]</span></div><div class="line">head[v] = p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> visit[], L_NODE *head[])</span> <span class="comment">//深度优先搜索</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">L_NODE *t;</div><div class="line">visit[u] = <span class="number">1</span>; <span class="comment">//标记己访问</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,u);</div><div class="line">t = head[u];</div><div class="line"><span class="keyword">while</span>(t != <span class="literal">NULL</span>) <span class="comment">//顶点不为空</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(visit[t-&gt;ver] == <span class="number">0</span>) <span class="comment">//未被访问过</span></div><div class="line">dfs(t-&gt;ver, visit, head); <span class="comment">//递归访问该顶点</span></div><div class="line">t = t-&gt;link;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> visit[], L_NODE *head[])</span> <span class="comment">//广度优先搜索</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> v, w;</div><div class="line">L_NODE *t;</div><div class="line">QTYPE <span class="built_in">queue</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, u);</div><div class="line">visit[u] = <span class="number">1</span>; <span class="comment">//标记第一个已访问结点</span></div><div class="line"><span class="built_in">queue</span>.qa = <span class="number">0</span>; <span class="comment">//队首指针</span></div><div class="line"><span class="built_in">queue</span>.qe = <span class="number">0</span>; <span class="comment">//队尾指针</span></div><div class="line"><span class="built_in">queue</span>.item[<span class="number">0</span>] = u; <span class="comment">//第一个结点入队</span></div><div class="line"><span class="keyword">while</span>(<span class="built_in">queue</span>.qa &lt;= <span class="built_in">queue</span>.qe) <span class="comment">//队列不为空</span></div><div class="line">&#123;</div><div class="line">v = <span class="built_in">queue</span>.item[<span class="built_in">queue</span>.qa++]; <span class="comment">//取队首元素</span></div><div class="line">t = head[v];</div><div class="line"><span class="keyword">while</span>(t != <span class="literal">NULL</span>) <span class="comment">//结点t不为空</span></div><div class="line">&#123;</div><div class="line">w = t-&gt;ver;</div><div class="line"><span class="keyword">if</span>(visit[w] == <span class="number">0</span>) <span class="comment">//如果结点未被访过</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,w);</div><div class="line">visit[w] = <span class="number">1</span>;</div><div class="line"><span class="built_in">queue</span>.item[++<span class="built_in">queue</span>.qe] = w; <span class="comment">//结点进队</span></div><div class="line">&#125;</div><div class="line">t = t-&gt;link; <span class="comment">//下一个邻接顶点</span></div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_adj_list2</span><span class="params">(L_NODE *head[], <span class="keyword">int</span> n, E_NODE e[], <span class="keyword">int</span> m)</span> <span class="comment">//建立有向图的邻接链表</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, u, v;</div><div class="line">L_NODE *p;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">head[i] = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i ++)</div><div class="line">&#123;</div><div class="line">u = e[i].ver1;</div><div class="line">v = e[i].ver2;</div><div class="line">p = (L_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(L_NODE));  <span class="comment">//生成顶点结点</span></div><div class="line">p -&gt;ver = v;</div><div class="line">p -&gt;link = head[u];</div><div class="line">head[u] = p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*求强连通分量所要用到的全局变量*/</span></div><div class="line"><span class="keyword">int</span> DFN[MAXN]; <span class="comment">//记录在做dfs时节点的搜索次序</span></div><div class="line"><span class="keyword">int</span> low[MAXN]; <span class="comment">//记录节点能够找到的最先访问的祖先的记号</span></div><div class="line"><span class="keyword">int</span> count=<span class="number">1</span>; <span class="comment">//标记访问次序，时间戳</span></div><div class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[MAXN]; <span class="comment">//栈</span></div><div class="line"><span class="keyword">int</span> top=<span class="number">-1</span>; <span class="comment">//栈顶指针</span></div><div class="line"><span class="keyword">int</span> flag[MAXN]; <span class="comment">//标记节点是否已经在栈中</span></div><div class="line"><span class="keyword">int</span> number=<span class="number">0</span>; <span class="comment">//连通图的数量</span></div><div class="line"><span class="keyword">int</span> appear[MAXN]; <span class="comment">//当前点所在的连通分量是否已被找到</span></div><div class="line"><span class="comment">/********************************/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u, L_NODE *head[])</span> <span class="comment">//Tarjan算法求有向图的强连通分量</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> v,i;</div><div class="line">    DFN[u] = low[u] = count++; <span class="comment">//初始化两个值，自己为能找到的最先访问的祖先</span></div><div class="line">    <span class="built_in">stack</span>[++top]=u;</div><div class="line">    flag[u]=<span class="number">1</span>; <span class="comment">//标记为已经在栈中</span></div><div class="line">    L_NODE *p = head[u];</div><div class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">    v = p-&gt;ver;</div><div class="line">        <span class="keyword">if</span>(!DFN[v]) <span class="comment">//如果点i没有被访问过</span></div><div class="line">        &#123;</div><div class="line">            Tarjan(v,head); <span class="comment">//递归访问</span></div><div class="line">            <span class="keyword">if</span>(low[v] &lt; low[u])</div><div class="line">                low[u] = low[v]; <span class="comment">//更新能找到的祖先</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="comment">//如果访问过了，并且该点的DFN更小</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(DFN[v] &lt; low[u] &amp;&amp; flag[v])</div><div class="line">                low[u] = DFN[v];</div><div class="line">        &#125;</div><div class="line">        p = p-&gt;link;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(DFN[u] == low[u]) <span class="comment">//往后回溯的时候，如果发现DFN和low相同的节点，就可以把这个节点之后的节点全部弹栈，构成连通图</span></div><div class="line">    &#123;</div><div class="line">        number++; <span class="comment">//连通图的数量加一</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"&#123; "</span>);</div><div class="line">        <span class="keyword">do</span></div><div class="line">        &#123;</div><div class="line">            i = <span class="built_in">stack</span>[top--]; <span class="comment">//依次取出，直到u</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</div><div class="line">            flag[i] = <span class="number">0</span>; <span class="comment">//设置为不在栈中</span></div><div class="line">            appear[i] = <span class="number">1</span>; <span class="comment">//所在的强连通分量已被找到</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(i != u);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_adj_list3</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, E_NODE e[], CH_NODE ch[])</span> <span class="comment">//创建有向图的邻接链表，头指针蕴含入度信息</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, u, v;</div><div class="line">VL_NODE *p;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt;= n; i ++)  <span class="comment">//初始化n个表头结点</span></div><div class="line">&#123;</div><div class="line">ch[i].count = <span class="number">0</span>; <span class="comment">//顶点入度初始化为0</span></div><div class="line">ch[i].head = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">&#123;</div><div class="line">u = e[i].ver1;</div><div class="line">v = e[i].ver2;</div><div class="line">p = (VL_NODE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(VL_NODE));</div><div class="line">p-&gt;ver = v;</div><div class="line">p-&gt;link = ch[u].head;</div><div class="line">ch[u].head = p;</div><div class="line">(ch[v].count)++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Topol_order_AOV</span><span class="params">(CH_NODE ch[], <span class="keyword">int</span> n, <span class="keyword">int</span> tpv[])</span> <span class="comment">//拓扑排序AOV</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, k;</div><div class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line">VL_NODE *t;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt;= n; i ++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(ch[i].count == <span class="number">0</span>)  <span class="comment">//入度为0的结点入栈</span></div><div class="line">&#123;</div><div class="line">ch[i].count = top; <span class="comment">//用count存储上一入栈结点的编号</span></div><div class="line">top = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(top != <span class="number">0</span>) <span class="comment">//当栈不为空</span></div><div class="line">&#123;</div><div class="line">j = top; <span class="comment">//出栈</span></div><div class="line">top = ch[top].count; <span class="comment">//修改栈顶“指针”</span></div><div class="line">tpv[++i] = j;</div><div class="line">t = ch[j].head;</div><div class="line"><span class="keyword">while</span> (t != <span class="literal">NULL</span>)  <span class="comment">//遍历顶配的链表</span></div><div class="line">&#123;</div><div class="line">k = t-&gt;ver;</div><div class="line"><span class="keyword">if</span>(--(ch[k].count) == <span class="number">0</span>) <span class="comment">//顶点k的入度先-1再判断是否为0</span></div><div class="line">&#123;</div><div class="line">ch[k].count = top; <span class="comment">//顶点k入栈</span></div><div class="line">top= k; <span class="comment">//修改栈顶“指针”</span></div><div class="line">&#125;</div><div class="line">t = t-&gt;link;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Topol_order_AOE</span><span class="params">(CH_NODE ch[], <span class="keyword">int</span> n)</span> <span class="comment">//AOE网络,求最小学期数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, k;</div><div class="line"><span class="keyword">int</span> flag[MAXN];</div><div class="line"><span class="keyword">int</span> this_semester[MAXN];</div><div class="line"><span class="keyword">int</span> semester = <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">VL_NODE *t;</div><div class="line"><span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</div><div class="line"><span class="keyword">while</span>(num != n)</div><div class="line">&#123;</div><div class="line">j = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt;= n; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(ch[i].count == <span class="number">0</span> &amp;&amp; flag[i] == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">this_semester[j++] = i;</div><div class="line">flag[i] = <span class="number">1</span>;</div><div class="line">num++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(j == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"第%d学期学：\n"</span>,semester);</div><div class="line">semester++;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"&#123; "</span>);</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; j; i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,this_semester[i]);</div><div class="line">t = ch[this_semester[i]].head;</div><div class="line"><span class="keyword">while</span> (t != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">k = t-&gt;ver;</div><div class="line">--ch[k].count;</div><div class="line">t = t-&gt;link;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(num &lt; n) <span class="built_in">printf</span>(<span class="string">"无解\n"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"最少需要%d个学期\n"</span>,semester<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> result = <span class="number">0</span>; <span class="comment">//记录共有多少个</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Topol_order_AOV_recursion</span><span class="params">(CH_NODE ch[], <span class="keyword">int</span> n, <span class="keyword">int</span> tpv[], <span class="keyword">int</span> tag[], <span class="keyword">int</span> times)</span> <span class="comment">//回溯法求所有拓扑排序</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, k;</div><div class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> <span class="built_in">array</span>[MAXN];</div><div class="line">VL_NODE *t;</div><div class="line"><span class="keyword">if</span>(times == n)</div><div class="line">&#123;</div><div class="line">result++;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,tpv[i]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(ch[i].count == <span class="number">0</span> &amp;&amp; tag[i] == <span class="number">0</span>)  <span class="comment">//入度为0的结点入栈</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">array</span>[top++] = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; top; i++)</div><div class="line">&#123;</div><div class="line">tpv[times++] = <span class="built_in">array</span>[i];</div><div class="line">tag[<span class="built_in">array</span>[i]] = <span class="number">1</span>;</div><div class="line">t = ch[<span class="built_in">array</span>[i]].head;</div><div class="line"><span class="keyword">while</span> (t != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">k = t-&gt;ver;</div><div class="line">--ch[k].count;</div><div class="line">t = t-&gt;link;</div><div class="line">&#125;</div><div class="line">Topol_order_AOV_recursion(ch, n, tpv, tag, times); <span class="comment">//递归</span></div><div class="line">times--; <span class="comment">//复原</span></div><div class="line">tag[<span class="built_in">array</span>[i]] = <span class="number">0</span>;</div><div class="line">t = ch[<span class="built_in">array</span>[i]].head;</div><div class="line"><span class="keyword">while</span> (t != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">k = t-&gt;ver;</div><div class="line">++ch[k].count;</div><div class="line">t = t-&gt;link;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">/****************************图的遍历dfs****************************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int i,n,m,u;</span></div><div class="line"><span class="comment">E_NODE e[MAXN];</span></div><div class="line"><span class="comment">L_NODE *head[MAXN];</span></div><div class="line"><span class="comment">int visit[MAXN];</span></div><div class="line"><span class="comment">memset(visit,0,sizeof(visit));</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;e[i].ver1,&amp;e[i].ver2);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list(head, n, e, m);</span></div><div class="line"><span class="comment">printf("请输入出发点：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;u);</span></div><div class="line"><span class="comment">printf("深度优先遍历结果为：");</span></div><div class="line"><span class="comment">dfs(u, visit, head);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/****************************图的遍历bfs****************************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int i,n,m,u;</span></div><div class="line"><span class="comment">E_NODE e[MAXN];</span></div><div class="line"><span class="comment">L_NODE *head[MAXN];</span></div><div class="line"><span class="comment">int visit[MAXN];</span></div><div class="line"><span class="comment">memset(visit,0,sizeof(visit));</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;e[i].ver1,&amp;e[i].ver2);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list(head, n, e, m);</span></div><div class="line"><span class="comment">printf("请输入出发点：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;u);</span></div><div class="line"><span class="comment">printf("广度优先遍历结果为：");</span></div><div class="line"><span class="comment">bfs(u, visit, head);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">/********************图的遍历找出有向图的所有强连通分量***********************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int i,n,m;</span></div><div class="line"><span class="comment">E_NODE e[MAXN];</span></div><div class="line"><span class="comment">L_NODE *head[MAXN];</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：(节点编号只能在1到%d之间)\n",m,n);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;e[i].ver1,&amp;e[i].ver2);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list2(head, n, e, m); //建立邻接链表</span></div><div class="line"><span class="comment">memset(DFN,0,sizeof(DFN)); //数据的初始化</span></div><div class="line"><span class="comment">    memset(low,0,sizeof(low));</span></div><div class="line"><span class="comment">    memset(flag,0,sizeof(flag));</span></div><div class="line"><span class="comment">    memset(appear,0,sizeof(appear));</span></div><div class="line"><span class="comment">    for(i = 1; i &lt;= n; i++)</span></div><div class="line"><span class="comment">    &#123;</span></div><div class="line"><span class="comment">        if(!appear[i])</span></div><div class="line"><span class="comment">        Tarjan(i,head);</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">printf("共%d个强连通分量\n",number);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/****************************最小代价生成树Prim*********************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int cost[MAXN][MAXN];</span></div><div class="line"><span class="comment">int i,j,n,m,a,b,w;</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; MAXN; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">for(j = 0; j &lt; MAXN; j++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">cost[i][j] = MAXINT;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">for(i = 0; i &lt; MAXN; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">cost[i][i] = 0;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d%d",&amp;a,&amp;b,&amp;w);</span></div><div class="line"><span class="comment">cost[a][b] = w;</span></div><div class="line"><span class="comment">cost[b][a] = w;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">Prim(cost, n, 1);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*******************************最小代价生成树Kruskal****************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int i,n,m;</span></div><div class="line"><span class="comment">EDGE edge[MAXN];</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].w);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">Kruskal(edge, n, m);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*******************************最短路径Dijkstra*********************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int cost[MAXN][MAXN];</span></div><div class="line"><span class="comment">int dist[MAXN];</span></div><div class="line"><span class="comment">int pre[MAXN];</span></div><div class="line"><span class="comment">int stack[MAXN];</span></div><div class="line"><span class="comment">int n,m,start,end,a,b,w,i,j,top=0,temp;</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; MAXN; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">dist[i] = 0;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">for(i = 0; i &lt; MAXN; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">for(j = 0; j &lt; MAXN; j++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">cost[i][j] = MAXINT;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d%d",&amp;a,&amp;b,&amp;w);</span></div><div class="line"><span class="comment">cost[a][b] = w;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("请输入起点和终点：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;start,&amp;end);</span></div><div class="line"><span class="comment">Dijkstra(cost, n, start, dist, pre);</span></div><div class="line"><span class="comment">printf("最短路径长度为：%d\n",dist[end]);</span></div><div class="line"><span class="comment">printf("路径为:");</span></div><div class="line"><span class="comment">temp = end;</span></div><div class="line"><span class="comment">while(pre[end] != 0)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">stack[top++] = pre[end];</span></div><div class="line"><span class="comment">end = pre[end];</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">while(--top &gt;= 0)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">printf("%d-&gt;",stack[top]);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("%d\n",temp);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">/*******************************最短路径Floyd*********************************/</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int cost[MAXN][MAXN];</span></div><div class="line"><span class="comment">int path[MAXN][MAXN];</span></div><div class="line"><span class="comment">int n,m,a,b,w,i,j;</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; MAXN; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">for(j = 0; j &lt; MAXN; j++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">cost[i][j] = MAXINT;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d%d",&amp;a,&amp;b,&amp;w);</span></div><div class="line"><span class="comment">cost[a][b] = w;</span></div><div class="line"><span class="comment">cost[b][a] = w; //取消注释可作为无向图处理</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">Floyd(cost, n, path);</span></div><div class="line"><span class="comment">print_all_path(n, path, cost);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*********************************拓扑排序***************************************/</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">    int n,m,i;</span></div><div class="line"><span class="comment">E_NODE e[MAXN];</span></div><div class="line"><span class="comment">CH_NODE ch[MAXN];</span></div><div class="line"><span class="comment">int tpv[MAXN];</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 1; i &lt;= m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;e[i].ver1,&amp;e[i].ver2);  //输入边尾、头结点的序号</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list3(n, m, e, ch);  //建立邻接表</span></div><div class="line"><span class="comment">count = Topol_order_AOV(ch, n, tpv);</span></div><div class="line"><span class="comment">if(count &lt; n) //顶点没有全部输出</span></div><div class="line"><span class="comment">printf("图中存在有向环，故不存在拓扑序列！\n");</span></div><div class="line"><span class="comment">else</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">printf("拓扑序列为:\n");</span></div><div class="line"><span class="comment">for(i = 1; i &lt;= n; i++)  //打印结果</span></div><div class="line"><span class="comment">printf("%d ",tpv[i]);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/******************************选做题1,求最小学期数**************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int n,m,i;</span></div><div class="line"><span class="comment">E_NODE edge[MAXN];</span></div><div class="line"><span class="comment">CH_NODE ch[MAXN];</span></div><div class="line"><span class="comment">printf("请输入共有多少节课以及有多少对先导课程和进修课程（课程用数字表示）：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d对先导课程和进修课程：\n",m);</span></div><div class="line"><span class="comment">for(i = 1; i &lt;= m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;edge[i].ver1,&amp;edge[i].ver2);  //输入边尾、头结点的序号</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list3(n, m, edge, ch);  //建立邻接表</span></div><div class="line"><span class="comment">Topol_order_AOE(ch, n);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">/*********************选做题2,求一个有向图的所有拓扑序列************************/</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int n,m,i;</span></div><div class="line"><span class="comment">E_NODE e[MAXN];</span></div><div class="line"><span class="comment">CH_NODE ch[MAXN];</span></div><div class="line"><span class="comment">int tpv[MAXN];</span></div><div class="line"><span class="comment">int tag[MAXN];</span></div><div class="line"><span class="comment">memset(tag,0,sizeof(tag));</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 1; i &lt;= m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;e[i].ver1,&amp;e[i].ver2);  //输入边尾、头结点的序号</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list3(n, m, e, ch);  //建立邻接表</span></div><div class="line"><span class="comment">printf("该有向图的拓扑序列有：\n");</span></div><div class="line"><span class="comment">Topol_order_AOV_recursion(ch, n, tpv, tag, 0);</span></div><div class="line"><span class="comment">printf("共%d个拓扑序列\n",result);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;数据结构最后一次补充作业。&lt;/p&gt;
    
    </summary>
    
      <category term="c" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="数据结构" scheme="https://luxuantao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>树的应用</title>
    <link href="https://luxuantao.github.io/2017/12/23/%E6%A0%91%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://luxuantao.github.io/2017/12/23/树的应用/</id>
    <published>2017-12-23T04:13:29.000Z</published>
    <updated>2018-01-25T09:03:04.310Z</updated>
    
    <content type="html"><![CDATA[<hr><p>又是六百多行。</p><a id="more"></a><p>数据结构课第三次补充作业，树的各种应用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 30</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></div><div class="line">&#125; NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVL_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="keyword">int</span> bel;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVL_node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></div><div class="line">&#125; AVL_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LRtag</span>// 左右标志表示树节点</span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">char</span> data;</div><div class="line"><span class="keyword">int</span> ltag;</div><div class="line"><span class="keyword">int</span> rtag;</div><div class="line">&#125; LRBTree;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">move</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> a;</div><div class="line"><span class="keyword">int</span> b;</div><div class="line">&#125; MOVE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="keyword">int</span> y;</div><div class="line"><span class="keyword">int</span> d;</div><div class="line">&#125; STACK;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">queen_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> r;</div><div class="line"><span class="keyword">int</span> c;</div><div class="line"><span class="keyword">int</span> tag;</div><div class="line">&#125; Q_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">huffman_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="keyword">int</span> num; <span class="comment">//节点个数</span></div><div class="line">    <span class="keyword">int</span> mindata; <span class="comment">//是序列中的第几个</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">huffman_node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></div><div class="line">&#125; HUFFMAN_NODE;</div><div class="line"></div><div class="line"><span class="keyword">char</span> preOrder[MAX];</div><div class="line"><span class="keyword">char</span> inOrder[MAX];</div><div class="line"><span class="keyword">char</span> postOrder[MAX];</div><div class="line"></div><div class="line">STACK s[MAXM * MAXM]; <span class="comment">//栈s</span></div><div class="line"><span class="keyword">int</span> top; <span class="comment">//top是栈 s 的栈顶指针</span></div><div class="line"><span class="keyword">int</span> maze[MAXM][MAXM];</div><div class="line"><span class="keyword">int</span> mark[MAXM][MAXM];</div><div class="line">MOVE mv[<span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(NODE *root, <span class="keyword">char</span> a, NODE **p_p, NODE **p_q)</span> <span class="comment">//在二叉查找树中查找键值为a的结点</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line">    *p_p = <span class="literal">NULL</span>;</div><div class="line">    *p_q = root;</div><div class="line">    <span class="keyword">while</span>(*p_q != <span class="literal">NULL</span>)   <span class="comment">//*p_q为空，算法结束</span></div><div class="line">    &#123;</div><div class="line">    times++;</div><div class="line">        <span class="keyword">if</span>((*p_q)-&gt;data == a) <span class="keyword">return</span> times;  <span class="comment">//查找成功</span></div><div class="line">        *p_p = *p_q;</div><div class="line">        <span class="keyword">if</span>(a &lt; (*p_q) -&gt;data)  <span class="comment">//a小于当前结点值</span></div><div class="line">            *p_q = (*p_q)-&gt;lchild;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        *p_q = (*p_q)-&gt;rchild;  <span class="comment">//a大于当前结点值</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> times;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(NODE **root, <span class="keyword">char</span> a)</span> <span class="comment">//插入键值为a的结点</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">NODE *p, *q, *r;</div><div class="line">search(*root, a, &amp;p, &amp;q);  <span class="comment">//查找键值为a的结点</span></div><div class="line"><span class="keyword">if</span>(q != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//已存在键值为a的结点，返回l</span></div><div class="line">r = (NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line">r-&gt;data = a;</div><div class="line">r-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">r-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="comment">//查找树为空</span></div><div class="line">    *root = r;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;data &gt; a) <span class="comment">//查找路径中最后一个结点的值大于a</span></div><div class="line">        p-&gt;lchild = r; <span class="comment">//将新节点插到左子树</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">    p-&gt;rchild = r; <span class="comment">//将新节点插到右子树</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//插入成功返回0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder_print</span><span class="params">(NODE *t)</span> <span class="comment">//递归中序遍历查找二叉树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        inorder_print(t-&gt;lchild);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);</div><div class="line">    inorder_print(t-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">avl_inorder_print</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//递归中序遍历平衡二叉树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        avl_inorder_print(t-&gt;lchild);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);</div><div class="line">    avl_inorder_print(t-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">avl_inorder_print_tostring</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//递归中序遍历平衡二叉树,输出到数组</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        avl_inorder_print_tostring(t-&gt;lchild);</div><div class="line">        inOrder[num++] = t-&gt;data; <span class="comment">//存下来，借此判断是否是查找树</span></div><div class="line">    avl_inorder_print_tostring(t-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">siftdown</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> <span class="comment">//堆调整</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> j,t,times=<span class="number">0</span>;</div><div class="line">t = a[i];</div><div class="line"><span class="keyword">while</span>((j = <span class="number">2</span>*i+<span class="number">1</span>) &lt; n) <span class="comment">//a[i]左子结点为a[2*i+1]</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(j &lt; n<span class="number">-1</span> &amp;&amp; a[j] &lt; a[j+<span class="number">1</span>]) <span class="comment">//j为左、右子结点较大值的下标</span></div><div class="line">j++;</div><div class="line"><span class="keyword">if</span>(t &lt; a[j]) <span class="comment">//若a[i]小于子结点的值，则交换</span></div><div class="line">&#123;</div><div class="line">times ++;</div><div class="line">a[i] = a[j];</div><div class="line">i = j;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">a[i] = t; <span class="comment">//将t放到正确位置</span></div><div class="line"><span class="keyword">return</span> times;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> <span class="comment">//堆排序</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i,t;</div><div class="line"><span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=(n<span class="number">-2</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--) <span class="comment">//初始建堆</span></div><div class="line">times += siftdown(a,i,n); <span class="comment">//堆调整</span></div><div class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</div><div class="line">&#123;</div><div class="line">times++;</div><div class="line">t = a[<span class="number">0</span>]; <span class="comment">//对调a[0]与a[i]</span></div><div class="line">a[<span class="number">0</span>] = a[i];</div><div class="line">a[i] = t;</div><div class="line">times += siftdown(a,<span class="number">0</span>,i); <span class="comment">//堆调整</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> times;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">least_num_of_h_height_AVL</span><span class="params">(<span class="keyword">int</span> h)</span> <span class="comment">//计算高度为h的AVL树的最小节点个数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(h == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(h == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> least_num_of_h_height_AVL(h<span class="number">-1</span>)+least_num_of_h_height_AVL(h<span class="number">-2</span>)+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">AVL_NODE* <span class="title">initial</span><span class="params">()</span><span class="comment">// 树节点初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">AVL_NODE* avl_node;</div><div class="line">avl_node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AVL_NODE));</div><div class="line">avl_node-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">avl_node-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">avl_node-&gt;bel = <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> avl_node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">AVL_NODE* <span class="title">BinaryTreeFromOrderings_Pre</span><span class="params">(<span class="keyword">char</span>* preorder, <span class="keyword">char</span>* inorder, <span class="keyword">int</span> length)</span><span class="comment">// 根据前序中序生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    AVL_NODE *p = initial();</div><div class="line">    p-&gt;data = *preorder;</div><div class="line">    <span class="keyword">for</span>(index=<span class="number">0</span>; index &lt; length; index++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(inorder[index] == *preorder) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    p-&gt;lchild = BinaryTreeFromOrderings_Pre(preorder+<span class="number">1</span>,inorder,index);<span class="comment">//递归调用</span></div><div class="line">    p-&gt;rchild = BinaryTreeFromOrderings_Pre(preorder+index+<span class="number">1</span>,inorder+index+<span class="number">1</span>,length-index<span class="number">-1</span>);<span class="comment">//递归调用</span></div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">AVL_NODE* <span class="title">BinaryTreeFromOrderings_Post</span><span class="params">(<span class="keyword">char</span>* inorder, <span class="keyword">char</span>* postorder, <span class="keyword">int</span> length)</span><span class="comment">// 根据中序后序生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    AVL_NODE *p = initial();</div><div class="line">    p-&gt;data = *(postorder+length<span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(index=<span class="number">0</span>; index &lt; length; index++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(inorder[index] == *(postorder+length<span class="number">-1</span>)) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    p-&gt;lchild = BinaryTreeFromOrderings_Post(inorder,postorder,index);<span class="comment">//递归调用</span></div><div class="line">    p-&gt;rchild = BinaryTreeFromOrderings_Post(inorder+index+<span class="number">1</span>,postorder+index,length-index<span class="number">-1</span>);<span class="comment">//递归调用</span></div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">AVL_NODE* <span class="title">BinaryTreeFromLRtag</span><span class="params">(LRBTree tree[],<span class="keyword">int</span> n)</span><span class="comment">//根据前序加附加两个标志位生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">AVL_NODE *<span class="built_in">stack</span>[MAX],*root,*p,*q;</div><div class="line"><span class="keyword">int</span> top,i;</div><div class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">root = initial();</div><div class="line">p = root;</div><div class="line">top = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)</div><div class="line">&#123;</div><div class="line">p-&gt;data = tree[i].data;</div><div class="line"><span class="keyword">if</span>(tree[i].rtag == <span class="number">0</span>)<span class="comment">//有右节点</span></div><div class="line"><span class="built_in">stack</span>[top++] = p;</div><div class="line"><span class="keyword">else</span></div><div class="line">p-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">q = initial();</div><div class="line"><span class="keyword">if</span>(tree[i].ltag == <span class="number">0</span>)<span class="comment">//有左节点</span></div><div class="line">p-&gt;lchild = q;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">p-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">p = <span class="built_in">stack</span>[--top];</div><div class="line">p-&gt;rchild = q;</div><div class="line">&#125;</div><div class="line">p = q;</div><div class="line">&#125;</div><div class="line">p-&gt;data = tree[n<span class="number">-1</span>].data;</div><div class="line">p-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">p-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//获取高度</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> max=<span class="number">-1</span>,temp; <span class="comment">//tag用来标记该节点有没有子节点</span></div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//为空，高度为-1</span></div><div class="line">    <span class="keyword">if</span>(t-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; t-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    temp = height(t-&gt;lchild);</div><div class="line">    max = temp &gt; max ? temp : max; <span class="comment">//max是子树中的最大高度</span></div><div class="line">    temp = height(t-&gt;rchild);</div><div class="line">    max = temp &gt; max ? temp : max; <span class="comment">//max是子树中的最大高度</span></div><div class="line">    <span class="keyword">return</span> max+<span class="number">1</span>; <span class="comment">//子树的最大高度再加一就是目前的最大高度</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">height_by_leaf</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//仅“跟踪”到叶子结点的一条路径，而不查看树中所有的结点，返回AVL树的高度</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> h = <span class="number">-1</span>;</div><div class="line"><span class="keyword">while</span>(t != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">h++;</div><div class="line"><span class="keyword">if</span>(t-&gt;bel &gt;= <span class="number">0</span>) t = t-&gt;lchild;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;bel &lt; <span class="number">0</span>) t = t-&gt;rchild;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> h;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal_bel</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//计算每个点的平衡度</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">t-&gt;bel = height(t-&gt;rchild) - height(t-&gt;lchild);</div><div class="line"><span class="keyword">if</span>(t-&gt;lchild != <span class="literal">NULL</span>) cal_bel(t-&gt;lchild);</div><div class="line"><span class="keyword">if</span>(t-&gt;rchild != <span class="literal">NULL</span>) cal_bel(t-&gt;rchild);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_bel</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//判断这棵树是不是平衡树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(t-&gt;bel&gt;<span class="number">1</span> || t-&gt;bel&lt;<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(t-&gt;lchild != <span class="literal">NULL</span> &amp;&amp; t-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> judge_bel(t-&gt;lchild) &amp;&amp; judge_bel(t-&gt;rchild);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;lchild != <span class="literal">NULL</span> &amp;&amp; t-&gt;rchild == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> judge_bel(t-&gt;lchild);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; t-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> judge_bel(t-&gt;rchild);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_search</span><span class="params">(AVL_NODE *root)</span> <span class="comment">//判断这棵树是不是查找树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">avl_inorder_print_tostring(root);</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num<span class="number">-1</span>;i++) <span class="comment">//看中序遍历是不是升序</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(inOrder[i]-inOrder[i+<span class="number">1</span>] &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setmove</span><span class="params">()</span> <span class="comment">//移动的八个方向的mv数组初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">mv[<span class="number">0</span>].a = <span class="number">-1</span>;  mv[<span class="number">0</span>].b =  <span class="number">0</span>;</div><div class="line">mv[<span class="number">1</span>].a = <span class="number">-1</span>;  mv[<span class="number">1</span>].b =  <span class="number">1</span>;</div><div class="line">mv[<span class="number">2</span>].a =  <span class="number">0</span>;  mv[<span class="number">2</span>].b =  <span class="number">1</span>;</div><div class="line">mv[<span class="number">3</span>].a =  <span class="number">1</span>;  mv[<span class="number">3</span>].b =  <span class="number">1</span>;</div><div class="line">mv[<span class="number">4</span>].a =  <span class="number">1</span>;  mv[<span class="number">4</span>].b =  <span class="number">0</span>;</div><div class="line">mv[<span class="number">5</span>].a =  <span class="number">1</span>;  mv[<span class="number">5</span>].b = <span class="number">-1</span>;</div><div class="line">mv[<span class="number">6</span>].a =  <span class="number">0</span>;  mv[<span class="number">6</span>].b = <span class="number">-1</span>;</div><div class="line">mv[<span class="number">7</span>].a = <span class="number">-1</span>;  mv[<span class="number">7</span>].b = <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputmaze</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> <span class="comment">// 输入迷宫</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"请输入迷宫:\n"</span>);</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=m+<span class="number">1</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;=n+<span class="number">1</span>; j++)</div><div class="line">&#123;</div><div class="line">maze[i][j] = <span class="number">1</span>; <span class="comment">//初始化迷宫</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n; j++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;maze[i][j]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setmark</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> <span class="comment">//防止重复移动的mark数组初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=m+<span class="number">1</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;=n+<span class="number">1</span>; j++)</div><div class="line">&#123;</div><div class="line">mark[i][j]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmazepath</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> <span class="comment">//迷宫求解</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">setmove();</div><div class="line">setmark(m,n);</div><div class="line"><span class="keyword">int</span> i, j, k, g, h, t;</div><div class="line"><span class="keyword">if</span>(maze[<span class="number">1</span>][<span class="number">1</span>] != <span class="number">0</span> || maze[m][n] != <span class="number">0</span>) <span class="comment">//如果入口或出口不能通过</span></div><div class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//无解，返回1</span></div><div class="line">s[<span class="number">0</span>].x = <span class="number">1</span>; <span class="comment">//入口结点（1，1）入栈</span></div><div class="line">s[<span class="number">0</span>].y = <span class="number">1</span>;</div><div class="line">s[<span class="number">0</span>].d = <span class="number">1</span>;</div><div class="line">top = <span class="number">1</span>; <span class="comment">//修改栈顶指针</span></div><div class="line">mark[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">//（1，1）点标记为已到达过</span></div><div class="line"><span class="keyword">while</span>(top &gt; <span class="number">0</span>) <span class="comment">//当栈不为空</span></div><div class="line">&#123;</div><div class="line">i = s[--top].x; <span class="comment">//取栈顶元素</span></div><div class="line">j = s[top].y;</div><div class="line">k = s[top].d;</div><div class="line"><span class="keyword">while</span>(k &lt; <span class="number">7</span>)</div><div class="line">&#123;</div><div class="line">            g = i+mv[++k].a; <span class="comment">//下一个位置的横坐标</span></div><div class="line">            h = j+mv[k].b; <span class="comment">//下一个位置的纵坐标</span></div><div class="line"><span class="keyword">if</span>(g == m &amp;&amp; h == n) <span class="comment">//到达出口</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"走出迷宫的方法为：\n"</span>);</div><div class="line"><span class="keyword">for</span>(t=<span class="number">0</span>; t&lt;top; t++) <span class="comment">//依次打印所通过的路径各顶点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%3d%3d-&gt;"</span>,s[t].x, s[t].y);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%3d%3d-&gt;"</span>,i, j);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%3d%3d\n"</span>,m,n);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//寻找成功，返回0</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (maze[g][h] ==<span class="number">0</span> &amp;&amp; mark[g][h] == <span class="number">0</span>) <span class="comment">//下一位置可通过且未到达过</span></div><div class="line">&#123;</div><div class="line">mark[g][h] = <span class="number">1</span>; <span class="comment">//下一位置标记已到达过</span></div><div class="line">s[top].x = i; <span class="comment">//当前结点入栈</span></div><div class="line">s[top].y = j;</div><div class="line">s[top++].d = k;</div><div class="line">i = g; <span class="comment">//前进到下一位置</span></div><div class="line">j = h;</div><div class="line">k = <span class="number">-1</span>; <span class="comment">//k重新初始化</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//找不到路径，返回1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">queens</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">//皇后问题</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">Q_NODE <span class="built_in">stack</span>[MAXM*MAXM];</div><div class="line"><span class="keyword">int</span> top;</div><div class="line"><span class="keyword">int</span> col[MAXM],md[<span class="number">2</span>*MAXM<span class="number">-1</span>],sd[<span class="number">2</span>*MAXM<span class="number">-1</span>]; <span class="comment">//列，主对角线，副对角线数组</span></div><div class="line"><span class="keyword">int</span> str, stc, i;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++)</div><div class="line">col[i] = <span class="number">0</span>; <span class="comment">//初始化列标记数组</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>*n<span class="number">-1</span>; i ++)</div><div class="line">&#123;</div><div class="line">md[i] = <span class="number">0</span>; <span class="comment">//初始化主对角线标记数组</span></div><div class="line">sd[i] = <span class="number">0</span>; <span class="comment">//初始化副对角线标记数组</span></div><div class="line">&#125;</div><div class="line">top = <span class="number">-1</span>; <span class="comment">//栈顶指针初始化为-1</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++) <span class="comment">//第一行结点入栈</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">stack</span>[++top].r = <span class="number">0</span>;</div><div class="line"><span class="built_in">stack</span>[top].c = n<span class="number">-1</span>-i;</div><div class="line"><span class="built_in">stack</span>[top].tag = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(top &gt;= <span class="number">0</span>) <span class="comment">//当栈不为空</span></div><div class="line">&#123;</div><div class="line">str = <span class="built_in">stack</span>[top].r; <span class="comment">//行号</span></div><div class="line">stc = <span class="built_in">stack</span>[top].c; <span class="comment">//列号</span></div><div class="line"><span class="keyword">if</span>(<span class="built_in">stack</span>[top].tag == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(col[stc] || md[str-stc+n<span class="number">-1</span>] || sd[str+stc]) <span class="comment">//如果当前位置所在列或主对角线或副对角线上已经有皇后</span></div><div class="line">top--; <span class="comment">//结点出栈</span></div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    col[stc] = <span class="number">1</span>; <span class="comment">//标记到列数组中</span></div><div class="line">md[str-stc+n<span class="number">-1</span>] = <span class="number">1</span>; <span class="comment">//标记到主对角线数组中</span></div><div class="line">sd[str+stc] = <span class="number">1</span>; <span class="comment">//标记到副对角线数组中</span></div><div class="line"><span class="built_in">stack</span>[top].tag = <span class="number">1</span>; <span class="comment">//该位置可能成为布局中的一个位置，tag域置1</span></div><div class="line"><span class="keyword">if</span>(str == n<span class="number">-1</span>) <span class="comment">//该位置已是最后一行</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"可以这样放:\n"</span>);</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=top ;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">stack</span>[i].tag) <span class="comment">//如果结点i的tag域为1</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%4d%3d\n"</span>,<span class="built_in">stack</span>[i].r,<span class="built_in">stack</span>[i].c); <span class="comment">//打印位置</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//成功返回0</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) <span class="comment">//将下一行结点入栈</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">stack</span>[++top].r = str+<span class="number">1</span>;</div><div class="line"><span class="built_in">stack</span>[top].c = n<span class="number">-1</span>-i;</div><div class="line"><span class="built_in">stack</span>[top].tag = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">col[stc] = <span class="number">0</span>; <span class="comment">//如果当前位置tag域为1，列标记数组置0</span></div><div class="line">md[str-stc+n<span class="number">-1</span>] = <span class="number">0</span>; <span class="comment">//主对角线标记数组置0</span></div><div class="line">sd[str+stc] = <span class="number">0</span>; <span class="comment">//副对角线标记数组置0</span></div><div class="line">top--; <span class="comment">//结点出栈</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//不成功返回1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">HUFFMAN_NODE *<span class="title">create_huffman_tree</span><span class="params">(<span class="keyword">char</span> a[], <span class="keyword">double</span> w[], <span class="keyword">int</span> n)</span> <span class="comment">//建立哈夫曼树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HUFFMAN_NODE *addr[<span class="number">2</span>*MAXM<span class="number">-1</span>];</div><div class="line"><span class="keyword">int</span> n1, n2, i, j;</div><div class="line"><span class="keyword">double</span> u, v, min1, min2;</div><div class="line"><span class="keyword">int</span> minnum1, minnum2, minmindata1, minmindata2;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; n; i++) <span class="comment">//初始化所有结点</span></div><div class="line">&#123;</div><div class="line">addr[i] = (HUFFMAN_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HUFFMAN_NODE));</div><div class="line">addr[i]-&gt;data = a[i];</div><div class="line">addr[i]-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">addr[i]-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">addr[i]-&gt;num = <span class="number">1</span>;</div><div class="line">addr[i]-&gt;mindata = i;</div><div class="line">w[i] = -w[i]; <span class="comment">//可供选择的结点权值设为负</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = n; i &lt; <span class="number">2</span>*n<span class="number">-1</span>; i++)</div><div class="line">&#123;</div><div class="line">n1 = <span class="number">-1</span>; min1 = <span class="number">9999</span>; minnum1 = <span class="number">9999</span>; minmindata1 = <span class="number">9999</span>;</div><div class="line">n2 = <span class="number">-1</span>; min2 = <span class="number">9999</span>; minnum2 = <span class="number">9999</span>; minmindata2 = <span class="number">9999</span>;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i; j ++)</div><div class="line">&#123;</div><div class="line">v = w[j];</div><div class="line">u = -v;</div><div class="line"><span class="keyword">if</span>(u &gt; <span class="number">0</span>) <span class="comment">//结点j为可供选择结点</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>( u&lt;min1 || (<span class="built_in">fabs</span>(u-min1)&lt;<span class="number">1e-6</span> &amp;&amp; addr[j]-&gt;num&lt;minnum1) || (<span class="built_in">fabs</span>(u-min1)&lt;<span class="number">1e-6</span> &amp;&amp; addr[j]-&gt;num==minnum1 &amp;&amp; addr[j]-&gt;mindata&lt;minmindata1) )</div><div class="line">&#123;</div><div class="line"><span class="comment">//标记当前权值最小结点</span></div><div class="line">min2 = min1; n2 = n1; minnum2 = minnum1; minmindata2 = minmindata1;</div><div class="line">min1 = u; n1 = j; minnum1 = addr[j]-&gt;num; minmindata1 = addr[j]-&gt;mindata;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>( u&lt;min2 || (<span class="built_in">fabs</span>(u-min2)&lt;<span class="number">1e-6</span> &amp;&amp; addr[j]-&gt;num&lt;minnum2) || (<span class="built_in">fabs</span>(u-min2)&lt;<span class="number">1e-6</span> &amp;&amp; addr[j]-&gt;num==minnum2 &amp;&amp; addr[j]-&gt;mindata&lt;minmindata2) )</div><div class="line">&#123;</div><div class="line"><span class="comment">//标记当前权值第二小结点</span></div><div class="line">min2 = u; n2 = j; minnum2 = addr[j]-&gt;num; minmindata2 = addr[j]-&gt;mindata;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">addr[i] = (HUFFMAN_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HUFFMAN_NODE));</div><div class="line">addr[i]-&gt;data = <span class="string">'*'</span>; <span class="comment">//合并两棵权值最小的子树</span></div><div class="line">addr[i]-&gt;lchild = addr[n1];</div><div class="line">addr[i]-&gt;rchild = addr[n2];</div><div class="line">addr[i]-&gt;num = addr[n1]-&gt;num+addr[n2]-&gt;num+<span class="number">1</span>;</div><div class="line">addr[i]-&gt;mindata = addr[n1]-&gt;mindata&lt;addr[n2]-&gt;mindata ? addr[n1]-&gt;mindata : addr[n2]-&gt;mindata;</div><div class="line">w[i] = w[n1]+w[n2]; <span class="comment">//计算根结点权值（为负）</span></div><div class="line">w[n1] = -w[n1]; <span class="comment">//子结点权值恢复正值</span></div><div class="line">w[n2] = -w[n2];</div><div class="line">&#125;</div><div class="line">w[<span class="number">2</span>*n<span class="number">-2</span>] = -w[<span class="number">2</span>*n<span class="number">-2</span>]; <span class="comment">//修改根结点权值</span></div><div class="line"><span class="keyword">return</span> (addr[<span class="number">2</span>*n<span class="number">-2</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(HUFFMAN_NODE *root, <span class="keyword">char</span> s[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HUFFMAN_NODE *p;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(s[i] != <span class="string">'\0'</span>)</div><div class="line">&#123;</div><div class="line">p = root;</div><div class="line"><span class="keyword">while</span>(p-&gt;lchild != <span class="literal">NULL</span> || p-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(s[i] == <span class="string">'0'</span>)</div><div class="line">p = p-&gt;lchild;</div><div class="line"><span class="keyword">else</span></div><div class="line">p = p-&gt;rchild;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">//二叉查找树的操作</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int n,i,sum=0;</span></div><div class="line"><span class="comment">char ch[MAX];</span></div><div class="line"><span class="comment">NODE *root = NULL, *p = NULL, *q = NULL;</span></div><div class="line"><span class="comment">printf("请输入这棵二叉树共有多少个节点：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">getchar();</span></div><div class="line"><span class="comment">printf("请依次输入%d个键值:\n",n);</span></div><div class="line"><span class="comment">for(i=0;i&lt;n;i++) //依次插入</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%c",&amp;ch[i]);</span></div><div class="line"><span class="comment">getchar();</span></div><div class="line"><span class="comment">insert(&amp;root,ch[i]);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("中序输出为：\n");</span></div><div class="line"><span class="comment">inorder_print(root);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">for(i=0;i&lt;n;i++) //计算查找结点的平均比较次数</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">p = NULL;</span></div><div class="line"><span class="comment">q = NULL;</span></div><div class="line"><span class="comment">sum += search(root,ch[i],&amp;p,&amp;q);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("查找结点的平均比较次数为：\n");</span></div><div class="line"><span class="comment">printf("%.3lf\n",sum*1.0/n);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">//堆排序的操作</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int n,i,times;</span></div><div class="line"><span class="comment">int a[MAX];</span></div><div class="line"><span class="comment">printf("请输入共有多少个数需要排序：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">printf("请依次输入%d个键值:\n",n);</span></div><div class="line"><span class="comment">for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">scanf("%d",&amp;a[i]);</span></div><div class="line"><span class="comment">times = heap_sort(a,n); //堆排序</span></div><div class="line"><span class="comment">printf("排序后的结果为：\n");</span></div><div class="line"><span class="comment">for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">printf("%d ",a[i]);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">printf("共交换了%d次\n",times);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">//平衡查找树的操作</span></div><div class="line"><span class="comment">//AVL_NODE *root;</span></div><div class="line"><span class="comment">//三种顺序输入法</span></div><div class="line"><span class="comment">//1.前序加附加两个标志位</span></div><div class="line"><span class="comment">// int n,i; //节点个数</span></div><div class="line"><span class="comment">// LRBTree lrbarray[MAX];</span></div><div class="line"><span class="comment">// printf("请输入这棵树共有多少个节点：\n");</span></div><div class="line"><span class="comment">// scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">// printf("请依次输入%d个左标签的值，键值，右标签的值：\n",n);</span></div><div class="line"><span class="comment">// for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// scanf("%d %c %d",&amp;lrbarray[i].ltag,&amp;lrbarray[i].data,&amp;lrbarray[i].rtag);</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// root = BinaryTreeFromLRtag(lrbarray,n);</span></div><div class="line"><span class="comment">//2.前序加中序</span></div><div class="line"><span class="comment">// printf("请输入前序和中序：\n");</span></div><div class="line"><span class="comment">// scanf("%s%s",preOrder,inOrder);</span></div><div class="line"><span class="comment">// root = BinaryTreeFromOrderings_Pre(preOrder,inOrder,strlen(preOrder));</span></div><div class="line"><span class="comment">//3.中序加后序</span></div><div class="line"><span class="comment">// printf("请输入中序和后序：\n");</span></div><div class="line"><span class="comment">// scanf("%s%s",inOrder,postOrder);</span></div><div class="line"><span class="comment">// root = BinaryTreeFromOrderings_Post(inOrder,postOrder,strlen(inOrder));</span></div><div class="line"></div><div class="line"><span class="comment">// printf("是否为平衡查找树:");</span></div><div class="line"><span class="comment">// cal_bel(root);//计算每个节点的平衡度</span></div><div class="line"><span class="comment">// if(judge_bel(root) &amp;&amp; judge_search(root)) printf("是\n"); //既是平衡树又是查找树</span></div><div class="line"><span class="comment">// else printf("否\n");</span></div><div class="line"><span class="comment">// printf("这棵平衡查找树的高度为：%d\n",height_by_leaf(root));</span></div><div class="line"><span class="comment">// printf("请输入想要查询的AVL树的最小节点个数的高度：\n");</span></div><div class="line"><span class="comment">// int h;</span></div><div class="line"><span class="comment">// scanf("%d",&amp;h);</span></div><div class="line"><span class="comment">// printf("高度为%d的AVL树的最小节点个数为:%d\n",h,least_num_of_h_height_AVL(h));</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Huffman树的操作</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int n,i;</span></div><div class="line"><span class="comment">char a[MAXM];</span></div><div class="line"><span class="comment">double w[2*MAXM-1];</span></div><div class="line"><span class="comment">HUFFMAN_NODE *root;</span></div><div class="line"><span class="comment">printf("请输入要用多少字符构造huffman树：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">getchar();</span></div><div class="line"><span class="comment">printf("请输入%d个字符和对应的权值：\n",n);</span></div><div class="line"><span class="comment">for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%c%lf",&amp;a[i],&amp;w[i]);</span></div><div class="line"><span class="comment">getchar();</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">root = create_huffman_tree(a,w,n);</span></div><div class="line"><span class="comment">printf("Huffman树创建完成\n");</span></div><div class="line"><span class="comment">//解码</span></div><div class="line"><span class="comment">printf("请输入想要解码的01字符串：");//001101001110010101011110110</span></div><div class="line"><span class="comment">char s[MAXM];</span></div><div class="line"><span class="comment">scanf("%s",s);</span></div><div class="line"><span class="comment">printf("解码结果为：\n");</span></div><div class="line"><span class="comment">decode(root,s);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">//皇后问题</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int n;</span></div><div class="line"><span class="comment">printf("请输入皇后的数量：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">if(queens(n)) printf("无解\n");</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">//迷宫求解问题</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int m,n;</span></div><div class="line"><span class="comment">printf("请输入迷宫的终点位置：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;m,&amp;n);</span></div><div class="line"><span class="comment">inputmaze(m,n);</span></div><div class="line"><span class="comment">if(getmazepath(m,n)) printf("无解\n");</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;又是六百多行。&lt;/p&gt;
    
    </summary>
    
      <category term="c" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="数据结构" scheme="https://luxuantao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>二叉树多功能实现</title>
    <link href="https://luxuantao.github.io/2017/12/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://luxuantao.github.io/2017/12/08/二叉树多功能实现/</id>
    <published>2017-12-08T12:38:27.000Z</published>
    <updated>2018-02-28T13:40:14.025Z</updated>
    
    <content type="html"><![CDATA[<hr><p>二叉树的常用知识点。</p><a id="more"></a><p>数据结构课第二次补充作业，二叉树的各种功能实现，这次比上次更恶心。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 10</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">binaryTreeNode</span>// 二叉树数据结构</span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">char</span> data;<span class="comment">// 节点值</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binaryTreeNode</span> *<span class="title">lchild</span>;</span><span class="comment">// 左子节点</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binaryTreeNode</span> *<span class="title">rchild</span>;</span><span class="comment">// 右子节点</span></div><div class="line">&#125; BiTreeNode; <span class="comment">// 树的结构</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LRtagBiTree</span>// 左右标志表示树节点</span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">char</span> data;</div><div class="line"><span class="keyword">int</span> ltag;</div><div class="line"><span class="keyword">int</span> rtag;</div><div class="line">&#125; LRBTree;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_parent</span>//双亲数组</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="keyword">int</span> parent;</div><div class="line">&#125; NODE_PARENT;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>//<span class="title">m</span>次树的数据结构</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">child</span>[<span class="title">MAXM</span>];</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">parent</span>;</span></div><div class="line">&#125; LINK_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">mixture</span>//二叉树转化为森林时要用到，作用是把二叉树的一个节点和它对应的<span class="title">m</span>次树上的节点捆绑起来</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">BiTreeNode *bnode;</div><div class="line">LINK_NODE *mnode;</div><div class="line">&#125; MIXTURE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cue_node</span> //穿线树的数据结构</span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> data;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cue_node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></div><div class="line"><span class="keyword">int</span> ltag, rtag;</div><div class="line">&#125; CUE_NODE;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">13</span></div><div class="line"><span class="comment">0 A 0</span></div><div class="line"><span class="comment">0 B 0</span></div><div class="line"><span class="comment">1 C 1</span></div><div class="line"><span class="comment">0 D 0</span></div><div class="line"><span class="comment">1 E 1</span></div><div class="line"><span class="comment">1 F 0</span></div><div class="line"><span class="comment">1 G 1</span></div><div class="line"><span class="comment">0 H 1</span></div><div class="line"><span class="comment">0 I 0</span></div><div class="line"><span class="comment">0 J 0</span></div><div class="line"><span class="comment">1 K 1</span></div><div class="line"><span class="comment">1 L 1</span></div><div class="line"><span class="comment">1 M 1</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">char</span> preOrder[MAX];<span class="comment">//"ABDECGHI" 示例 1 的前序： “ABCDEFSGHIJKLMNO”</span></div><div class="line"><span class="keyword">char</span> inOrder[MAX];<span class="comment">//"DBEACHGI" 示例 1 的中序： “BCDASFHIJGEMNOLK”</span></div><div class="line"><span class="keyword">char</span> postOrder[MAX];<span class="comment">//"DEBHIGCA"</span></div><div class="line"></div><div class="line">LINK_NODE *addr_NODE[MAX];<span class="comment">//存放每个节点的地址,建m次树要用到</span></div><div class="line">LINK_NODE *m_root_addr[MAXM];<span class="comment">//存放每棵m次树的根节点</span></div><div class="line">BiTreeNode *b_root_addr[MAXM];<span class="comment">//存放每棵m次树转化为二叉树后的根节点</span></div><div class="line"></div><div class="line"><span class="comment">/*********************以下是m次树的操作*********************************/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add_Child</span><span class="params">(LINK_NODE *parent,LINK_NODE *child,<span class="keyword">int</span> m)</span> <span class="comment">//m次树中，parent下插入一个新的子结child</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> j=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (parent==<span class="literal">NULL</span> || child== <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (parent-&gt;child[++j]!=<span class="literal">NULL</span> &amp;&amp; j&lt;m); <span class="comment">//确定是第几个孩子</span></div><div class="line">    <span class="keyword">if</span> (j==m) <span class="comment">//满了返回-1</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        parent-&gt;child[j] = child;</div><div class="line">        child-&gt;parent = parent;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE *<span class="title">Node_initail</span><span class="params">(<span class="keyword">int</span> m)</span> <span class="comment">//m次树结点初始化，根据结点类型，完成结点的初始化操作</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    LINK_NODE *t = (LINK_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LINK_NODE));</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++) <span class="comment">//初始化</span></div><div class="line">    &#123;</div><div class="line">        t-&gt;child[i] = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    t-&gt;parent = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE *<span class="title">creat_tree_fromParent</span><span class="params">(NODE_PARENT inputTree[],<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> <span class="comment">//用双亲数组建m次树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    LINK_NODE *root,*p,*q;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    root = Node_initail(m); <span class="comment">//生成根节点</span></div><div class="line">    root-&gt;data = inputTree[<span class="number">0</span>].data; <span class="comment">//根节点赋值</span></div><div class="line">    addr_NODE[<span class="number">0</span>] = root;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;n; i++)</div><div class="line">    &#123;</div><div class="line">        q = Node_initail(m); <span class="comment">//生成新节点</span></div><div class="line">        addr_NODE[i] = q;</div><div class="line">        q-&gt;data = inputTree[i].data;</div><div class="line">        p = addr_NODE[inputTree[i].parent]; <span class="comment">//p为当前结点的父节点</span></div><div class="line">        <span class="keyword">if</span>(Add_Child(p,q,m) == <span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"子节点已满，无法插入!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">r_preorder</span><span class="params">(LINK_NODE *t, <span class="keyword">int</span> m)</span> <span class="comment">//递归前序遍历，t:根，m次数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++)</div><div class="line">        &#123;</div><div class="line">            r_preorder(t-&gt;child[i],m);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/********************以上是m次树的操作************************/</span></div><div class="line"></div><div class="line"><span class="comment">/*******************以下是二叉树的操作****************************/</span></div><div class="line"><span class="function">BiTreeNode * <span class="title">initial</span><span class="params">()</span><span class="comment">// 树节点初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BiTreeNode* node;</div><div class="line">node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTreeNode));</div><div class="line">node-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">node-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line"><span class="comment">//node-&gt;level = 0;</span></div><div class="line"><span class="comment">//node-&gt;parent = '\0';</span></div><div class="line">node-&gt;data = <span class="string">'\0'</span>;</div><div class="line"><span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BiTreeNode* <span class="title">BinaryTreeFromOrderings_Pre</span><span class="params">(<span class="keyword">char</span>* preorder, <span class="keyword">char</span>* inorder, <span class="keyword">int</span> length)</span><span class="comment">// 根据前序中序生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    BiTreeNode *p = initial();</div><div class="line">    p-&gt;data = *preorder;</div><div class="line">    <span class="keyword">for</span>(index=<span class="number">0</span>; index &lt; length; index++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(inorder[index] == *preorder) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    p-&gt;lchild = BinaryTreeFromOrderings_Pre(preorder+<span class="number">1</span>,inorder,index);<span class="comment">//递归调用</span></div><div class="line">    p-&gt;rchild = BinaryTreeFromOrderings_Pre(preorder+index+<span class="number">1</span>,inorder+index+<span class="number">1</span>,length-index<span class="number">-1</span>);<span class="comment">//递归调用</span></div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BiTreeNode* <span class="title">BinaryTreeFromOrderings_Post</span><span class="params">(<span class="keyword">char</span>* inorder, <span class="keyword">char</span>* postorder, <span class="keyword">int</span> length)</span><span class="comment">// 根据中序后序生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    BiTreeNode *p = initial();</div><div class="line">    p-&gt;data = *(postorder+length<span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(index=<span class="number">0</span>; index &lt; length; index++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(inorder[index] == *(postorder+length<span class="number">-1</span>)) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    p-&gt;lchild = BinaryTreeFromOrderings_Post(inorder,postorder,index);<span class="comment">//递归调用</span></div><div class="line">    p-&gt;rchild = BinaryTreeFromOrderings_Post(inorder+index+<span class="number">1</span>,postorder+index,length-index<span class="number">-1</span>);<span class="comment">//递归调用</span></div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BiTreeNode* <span class="title">BinaryTreeFromLRtag</span><span class="params">(LRBTree tree[],<span class="keyword">int</span> n)</span><span class="comment">//根据前序加附加两个标志位生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BiTreeNode *<span class="built_in">stack</span>[MAX],*root,*p,*q;</div><div class="line"><span class="keyword">int</span> top,i;</div><div class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">root = initial();</div><div class="line">p = root;</div><div class="line">top = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)</div><div class="line">&#123;</div><div class="line">p-&gt;data = tree[i].data;</div><div class="line"><span class="keyword">if</span>(tree[i].rtag == <span class="number">0</span>)<span class="comment">//有右节点</span></div><div class="line"><span class="built_in">stack</span>[top++] = p;</div><div class="line"><span class="keyword">else</span></div><div class="line">p-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">q = initial();</div><div class="line"><span class="keyword">if</span>(tree[i].ltag == <span class="number">0</span>)<span class="comment">//有左节点</span></div><div class="line">p-&gt;lchild = q;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">p-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">p = <span class="built_in">stack</span>[--top];</div><div class="line">p-&gt;rchild = q;</div><div class="line">&#125;</div><div class="line">p = q;</div><div class="line">&#125;</div><div class="line">p-&gt;data = tree[n<span class="number">-1</span>].data;</div><div class="line">p-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">p-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preprint</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//递归前序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">        preprint(t-&gt;lchild);</div><div class="line">    preprint(t-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inprint</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//递归中序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        inprint(t-&gt;lchild);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">    inprint(t-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postprint</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//递归后序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        postprint(t-&gt;lchild);</div><div class="line">    postprint(t-&gt;rchild);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preprint_without_recursion</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//非递归前序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    BiTreeNode *<span class="built_in">stack</span>[<span class="number">100</span>]; <span class="comment">//定义栈</span></div><div class="line">    <span class="keyword">int</span> top;</div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">stack</span>[<span class="number">0</span>] = t; <span class="comment">//根节点入栈</span></div><div class="line">    top =<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(top &gt; <span class="number">0</span>) <span class="comment">//当栈不为空</span></div><div class="line">    &#123;</div><div class="line">        t = <span class="built_in">stack</span>[--top]; <span class="comment">//栈顶结点出栈</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">        <span class="keyword">if</span>(t-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">            <span class="built_in">stack</span>[top++] = t-&gt;rchild;</div><div class="line">        <span class="keyword">if</span>(t-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">            <span class="built_in">stack</span>[top++] = t-&gt;lchild;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inprint_without_recursion</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//非递归中序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    BiTreeNode *<span class="built_in">stack</span>[<span class="number">100</span>]; <span class="comment">//定义栈</span></div><div class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">while</span>(top &gt; <span class="number">0</span> || t) <span class="comment">//当栈不为空</span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">while</span>(t)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">stack</span>[top++] = t;</div><div class="line">    t = t-&gt;lchild;</div><div class="line">    &#125;</div><div class="line">        t = <span class="built_in">stack</span>[--top]; <span class="comment">//栈顶结点出栈</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">        t = t-&gt;rchild;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inprint_without_recursion_tostring</span><span class="params">(BiTreeNode *t,<span class="keyword">char</span> *s)</span> <span class="comment">//非递归中序遍历,输出到一个数组中，返回数组大小</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    BiTreeNode *<span class="built_in">stack</span>[<span class="number">100</span>]; <span class="comment">//定义栈</span></div><div class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(top &gt; <span class="number">0</span> || t) <span class="comment">//当栈不为空</span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">while</span>(t)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">stack</span>[top++] = t;</div><div class="line">    t = t-&gt;lchild;</div><div class="line">    &#125;</div><div class="line">        t = <span class="built_in">stack</span>[--top]; <span class="comment">//栈顶结点出栈</span></div><div class="line">        s[i++] = t-&gt;data;</div><div class="line">        t = t-&gt;rchild;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postprint_without_recursion</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//非递归后序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;<span class="comment">//top可以同步操作两个栈</span></div><div class="line">    <span class="keyword">int</span> stack_tag[MAX];</div><div class="line">    BiTreeNode *stack_node[MAX];</div><div class="line">    <span class="comment">//先把根结点放进栈</span></div><div class="line">    BiTreeNode *p = t;</div><div class="line">    stack_node[top] = t;</div><div class="line">    stack_tag[top] = <span class="number">0</span>;</div><div class="line">    top++;</div><div class="line">    <span class="keyword">while</span>(top&gt;<span class="number">0</span>)<span class="comment">//只要栈里还有东西就继续</span></div><div class="line">    &#123;</div><div class="line">        top--;<span class="comment">//top指向的是最上面一个元素的上一个位置，所以先减一</span></div><div class="line">        <span class="keyword">if</span>(stack_tag[top] == <span class="number">0</span>)<span class="comment">//当前结点的子节点还没放进来</span></div><div class="line">        &#123;</div><div class="line">            p = stack_node[top];</div><div class="line">            stack_tag[top] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(p-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                stack_node[++top] = p-&gt;rchild;</div><div class="line">                stack_tag[top] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(p-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                stack_node[++top] = p-&gt;lchild;</div><div class="line">                stack_tag[top] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            top++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span><span class="comment">//当前结点的子节点都放进来了</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,stack_node[top]-&gt;data);<span class="comment">//输出当前结点</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hierachicalorder_without_recursion</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//非递归层序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    BiTreeNode *q[MAX],*p; <span class="comment">//用队列实现</span></div><div class="line">    <span class="keyword">int</span> head,tail;</div><div class="line">    q[<span class="number">0</span>] = t;</div><div class="line">    head = <span class="number">0</span>;</div><div class="line">    tail = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(head &lt; tail)</div><div class="line">    &#123;</div><div class="line">        p = q[head++];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data);</div><div class="line">        <span class="keyword">if</span>(p-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            q[tail++] = p-&gt;lchild;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(p-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            q[tail++] = p-&gt;rchild;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(BiTreeNode *t)</span><span class="comment">//获取高度</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> max=<span class="number">-1</span>,temp; <span class="comment">//tag用来标记该节点有没有子节点</span></div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//为空，高度为-1</span></div><div class="line">    <span class="keyword">if</span>(t-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; t-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    temp = height(t-&gt;lchild);</div><div class="line">    max = temp &gt; max ? temp : max; <span class="comment">//max是子树中的最大高度</span></div><div class="line">    temp = height(t-&gt;rchild);</div><div class="line">    max = temp &gt; max ? temp : max; <span class="comment">//max是子树中的最大高度</span></div><div class="line">    <span class="keyword">return</span> max+<span class="number">1</span>; <span class="comment">//子树的最大高度再加一就是目前的最大高度</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_nodes</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//获取结点个数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        sum++;</div><div class="line">        sum += count_nodes(t-&gt;lchild); <span class="comment">//递归调用</span></div><div class="line">        sum += count_nodes(t-&gt;rchild); <span class="comment">//递归调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_full</span><span class="params">(BiTreeNode *t)</span> <span class="comment">// 判断是否为满树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i,temp=<span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> sum = count_nodes(t);</div><div class="line"><span class="keyword">int</span> depth = height(t) + <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=depth;i++)</div><div class="line">&#123;</div><div class="line">temp *= <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(sum == temp<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_complete</span><span class="params">(BiTreeNode *t)</span> <span class="comment">// 判断是否为完全二叉树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BiTreeNode *<span class="built_in">queue</span>[MAX];</div><div class="line">BiTreeNode *temp = t;</div><div class="line"><span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>;</div><div class="line"><span class="built_in">queue</span>[tail++] = t;</div><div class="line"><span class="keyword">while</span>(head != tail)</div><div class="line">&#123;</div><div class="line">temp = <span class="built_in">queue</span>[head++];</div><div class="line"><span class="keyword">if</span>(temp == <span class="literal">NULL</span>) <span class="keyword">break</span>;</div><div class="line"><span class="built_in">queue</span>[tail++] = temp-&gt;lchild;</div><div class="line"><span class="built_in">queue</span>[tail++] = temp-&gt;rchild;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(head != tail)</div><div class="line">&#123;</div><div class="line">temp = <span class="built_in">queue</span>[head++];</div><div class="line"><span class="keyword">if</span>(temp != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//没把所有节点读完就读到了空指针，说明不是完全二叉树</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BiTreeNode *<span class="title">convert2bitree</span><span class="params">(LINK_NODE *root,<span class="keyword">int</span> m)</span><span class="comment">//把一棵m次树转化为二叉树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">BiTreeNode *binaryRoot = initial();</div><div class="line">binaryRoot-&gt;data = root-&gt;data;</div><div class="line">binaryRoot-&gt;lchild = convert2bitree(root-&gt;child[<span class="number">0</span>],m);<span class="comment">//递归调用</span></div><div class="line">BiTreeNode *brother = binaryRoot-&gt;lchild;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;m &amp;&amp; root-&gt;child[i]!=<span class="literal">NULL</span>; i++)</div><div class="line">&#123;</div><div class="line">brother-&gt;rchild = convert2bitree(root-&gt;child[i],m);<span class="comment">//递归调用</span></div><div class="line">brother = brother-&gt;rchild;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> binaryRoot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE* <span class="title">convert2forest</span><span class="params">(BiTreeNode *r,<span class="keyword">int</span> m)</span><span class="comment">//二叉树转化为森林</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>;</div><div class="line">MIXTURE <span class="built_in">queue</span>[MAX],father;</div><div class="line"><span class="built_in">queue</span>[tail].mnode = Node_initail(m);</div><div class="line"><span class="built_in">queue</span>[tail].mnode-&gt;data = r-&gt;data;</div><div class="line"><span class="built_in">queue</span>[tail++].bnode = r;</div><div class="line">LINK_NODE *child, *root = <span class="built_in">queue</span>[<span class="number">0</span>].mnode;</div><div class="line">BiTreeNode *temp;</div><div class="line"><span class="keyword">while</span>(head != tail)</div><div class="line">&#123;</div><div class="line">father = <span class="built_in">queue</span>[head++];</div><div class="line">temp = father.bnode;</div><div class="line"><span class="keyword">if</span>(temp-&gt;lchild != <span class="literal">NULL</span>)<span class="comment">//先看有没有左节点</span></div><div class="line">&#123;</div><div class="line">child = Node_initail(m);</div><div class="line">child-&gt;data = temp-&gt;lchild-&gt;data;</div><div class="line">Add_Child(father.mnode,child,m);</div><div class="line"><span class="built_in">queue</span>[tail].mnode = child;</div><div class="line"><span class="built_in">queue</span>[tail++].bnode = temp-&gt;lchild;</div><div class="line">temp = temp-&gt;lchild;</div><div class="line"><span class="keyword">while</span>(temp-&gt;rchild != <span class="literal">NULL</span>)<span class="comment">//把当前结点所有的孩子全部接进来</span></div><div class="line">&#123;</div><div class="line">child = Node_initail(m);</div><div class="line">child-&gt;data = temp-&gt;rchild-&gt;data;</div><div class="line">Add_Child(father.mnode,child,m);</div><div class="line"><span class="built_in">queue</span>[tail].mnode = child;</div><div class="line"><span class="built_in">queue</span>[tail++].bnode = temp-&gt;rchild;</div><div class="line">temp = temp-&gt;rchild;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/***********************以上是二叉树的操作****************************/</span></div><div class="line"></div><div class="line"><span class="comment">/***********************以下是穿线树的操作****************************/</span></div><div class="line"></div><div class="line"><span class="function">CUE_NODE* <span class="title">pred</span><span class="params">(CUE_NODE *t)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(t-&gt;ltag == <span class="number">1</span> || t-&gt;lchild == <span class="literal">NULL</span>) <span class="keyword">return</span> t-&gt;lchild;<span class="comment">//若t所指节点没有左孩子,返回其直接前驱</span></div><div class="line">t = t-&gt;lchild;<span class="comment">//t指向其左子节点</span></div><div class="line"><span class="keyword">while</span>(t-&gt;rtag == <span class="number">0</span>) t = t-&gt;rchild;<span class="comment">//在左子树中找最右的节点</span></div><div class="line"><span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">CUE_NODE* <span class="title">succ</span><span class="params">(CUE_NODE *t)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(t-&gt;rtag == <span class="number">1</span> || t-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> t-&gt;rchild;<span class="comment">//若t所指节点没有右孩子,返回其直接后继</span></div><div class="line">t = t-&gt;rchild;<span class="comment">//t指向其右子节点</span></div><div class="line"><span class="keyword">while</span>(t-&gt;ltag == <span class="number">0</span>) t = t-&gt;lchild;<span class="comment">//在右子树中找最左的节点</span></div><div class="line"><span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">midorder</span><span class="params">(CUE_NODE *head)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">while</span>(head != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,head-&gt;data);</div><div class="line">head = succ(head);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">left_insert</span><span class="params">(CUE_NODE *p,CUE_NODE *q,CUE_NODE **p_head)</span><span class="comment">//把q所指的节点插在p所指的节点的按中序的前面</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CUE_NODE *r;</div><div class="line"><span class="keyword">if</span>(p-&gt;ltag == <span class="number">1</span> || p-&gt;lchild == <span class="literal">NULL</span>)<span class="comment">//若p没有左孩子</span></div><div class="line">&#123;</div><div class="line">q-&gt;lchild = p-&gt;lchild;<span class="comment">//将p所指节点插入</span></div><div class="line">q-&gt;ltag = p-&gt;ltag;</div><div class="line">q-&gt;rchild = p;<span class="comment">//令q所指节点的右指针指向p所指节点</span></div><div class="line">q-&gt;rtag = <span class="number">1</span>;</div><div class="line">p-&gt;lchild = q;<span class="comment">//p所指节点的左指针指向q</span></div><div class="line">p-&gt;ltag = <span class="number">0</span>;<span class="comment">//修改ltag，p所指节点的左指针已指向其左孩子</span></div><div class="line"><span class="keyword">if</span>(q-&gt;lchild == <span class="literal">NULL</span>) *p_head = q;<span class="comment">//若p所指节点的左指针为空，修改中序首节点地址</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">r = pred(p);<span class="comment">//找到p所指节点按中序的前驱结点</span></div><div class="line">q-&gt;rchild = r-&gt;rchild;<span class="comment">//将q所指节点插入</span></div><div class="line">q-&gt;rtag = r-&gt;rtag;</div><div class="line">q-&gt;lchild = r;<span class="comment">//令q所指节点的左指针指向r所指节点</span></div><div class="line">q-&gt;ltag = <span class="number">1</span>;</div><div class="line">r-&gt;rchild = q;<span class="comment">//r所指节点的右指针指向q</span></div><div class="line">r-&gt;rtag = <span class="number">0</span>;<span class="comment">//修改rtag</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">right_insert</span><span class="params">(CUE_NODE *p,CUE_NODE *q)</span><span class="comment">//把q所指的节点插在p所指的节点的按中序的后面</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CUE_NODE *r;</div><div class="line"><span class="keyword">if</span>(p-&gt;rtag == <span class="number">1</span> || p-&gt;rchild == <span class="literal">NULL</span>)<span class="comment">//若p没有右孩子</span></div><div class="line">&#123;</div><div class="line">q-&gt;rchild = p-&gt;rchild;<span class="comment">//将p所指节点插入</span></div><div class="line">q-&gt;rtag = p-&gt;rtag;</div><div class="line">q-&gt;lchild = p;<span class="comment">//令q所指节点的左指针指向p所指节点</span></div><div class="line">q-&gt;ltag = <span class="number">1</span>;</div><div class="line">p-&gt;rchild = q;<span class="comment">//p所指节点的右指针指向q</span></div><div class="line">p-&gt;rtag = <span class="number">0</span>;<span class="comment">//修改rtag</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">r = succ(p);<span class="comment">//找到p所指节点按中序的后继结点</span></div><div class="line">q-&gt;lchild = r-&gt;lchild;<span class="comment">//将q所指节点插入</span></div><div class="line">q-&gt;ltag = r-&gt;ltag;</div><div class="line">q-&gt;rchild = r;<span class="comment">//令p所指节点的左指针指向r所指节点</span></div><div class="line">q-&gt;rtag = <span class="number">1</span>;</div><div class="line">r-&gt;lchild = q;<span class="comment">//r所指节点的右指针指向q</span></div><div class="line">r-&gt;ltag = <span class="number">0</span>;<span class="comment">//修改rtag</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">CUE_NODE* <span class="title">thread_sort_tree</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CUE_NODE *root, *head, *p, *r;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">root = (CUE_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CUE_NODE));</div><div class="line">root-&gt;data = a[<span class="number">0</span>];</div><div class="line">root-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">root-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">root-&gt;ltag = <span class="number">0</span>;</div><div class="line">root-&gt;rtag = <span class="number">0</span>;</div><div class="line">head = root;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">&#123;</div><div class="line">r = (CUE_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CUE_NODE));</div><div class="line">r-&gt;data = a[i];</div><div class="line">p = root;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(r-&gt;data &lt;= p-&gt;data)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(p-&gt;ltag == <span class="number">0</span> &amp;&amp; p-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">p = p-&gt;lchild;</div><div class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(p-&gt;rtag == <span class="number">0</span> &amp;&amp; p-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">p = p-&gt;rchild;</div><div class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(r-&gt;data &lt; p-&gt;data)</div><div class="line">&#123;</div><div class="line">r-&gt;lchild = p-&gt;lchild;</div><div class="line">r-&gt;ltag = p-&gt;ltag;</div><div class="line">r-&gt;rchild = p;</div><div class="line">r-&gt;rtag = <span class="number">1</span>;</div><div class="line">p-&gt;lchild = r;</div><div class="line">p-&gt;ltag = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(r-&gt;lchild == <span class="literal">NULL</span>) head = r;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(r-&gt;data &gt; p-&gt;data)</div><div class="line">&#123;</div><div class="line">r-&gt;rchild = p-&gt;rchild;</div><div class="line">r-&gt;rtag = p-&gt;rtag;</div><div class="line">r-&gt;lchild = p;</div><div class="line">r-&gt;ltag = <span class="number">1</span>;</div><div class="line">p-&gt;rchild = r;</div><div class="line">p-&gt;rtag = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> head;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CUE_NODE *head;</div><div class="line">head = thread_sort_tree(a,n);<span class="comment">//建立穿线排序树</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"穿线树的中序输出为：\n"</span>);</div><div class="line">midorder(head);<span class="comment">//按中序输出全部节点</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*****************************以上是穿线树的操作***************************/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isascending</span><span class="params">(<span class="keyword">char</span> a[],<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BiTreeNode *root;</div><div class="line"></div><div class="line"><span class="comment">//前序加附加两个标志位</span></div><div class="line"><span class="comment">// int n,i; //节点个数</span></div><div class="line"><span class="comment">// LRBTree lrbarray[MAX];</span></div><div class="line"><span class="comment">// scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">// for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// scanf("%d %c %d",&amp;lrbarray[i].ltag,&amp;lrbarray[i].data,&amp;lrbarray[i].rtag);</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// root = BinaryTreeFromLRtag(lrbarray,n);</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//前序加中序</span></div><div class="line"><span class="comment">// scanf("%s%s",preOrder,inOrder);</span></div><div class="line"><span class="comment">// root = BinaryTreeFromOrderings_Pre(preOrder,inOrder,strlen(preOrder));</span></div><div class="line"></div><div class="line"><span class="comment">//中序加后序</span></div><div class="line"><span class="comment">// scanf("%s%s",inOrder,postOrder);</span></div><div class="line"><span class="comment">// root = BinaryTreeFromOrderings_Post(inOrder,postOrder,strlen(inOrder));</span></div><div class="line"></div><div class="line"><span class="comment">//建立m次树以及m次树转化为二叉树</span></div><div class="line"><span class="keyword">int</span> mtree_num,node_num,m,i,j;</div><div class="line">NODE_PARENT inputTree[MAX]; <span class="comment">//双亲输入需要用到的数组</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"请输入你想建多少棵m次树以及m的大小\n"</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;mtree_num,&amp;m);<span class="comment">//mtree_num表示有几棵m次树</span></div><div class="line">getchar();</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mtree_num;i++)<span class="comment">//建mtree_num棵m次树</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请问这棵m次树有多少个节点？\n"</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;node_num);<span class="comment">//当前的m次树有node_num个节点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"请输入这棵m次树每个节点的数据以及它的父亲是谁\n"</span>);</div><div class="line">getchar();</div><div class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;node_num; j++)</div><div class="line">   &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%c %d"</span>,&amp;inputTree[j].data,&amp;inputTree[j].parent);</div><div class="line">        getchar();</div><div class="line">    &#125;</div><div class="line">    m_root_addr[i] = creat_tree_fromParent(inputTree,m,node_num);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mtree_num;i++)<span class="comment">//依次将mtree_num棵m次树分别转化为二叉树</span></div><div class="line">&#123;</div><div class="line">b_root_addr[i] = convert2bitree(m_root_addr[i],m);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mtree_num<span class="number">-1</span>;i++)<span class="comment">//将mtree_num棵m次树连成一棵二叉树</span></div><div class="line">&#123;</div><div class="line">b_root_addr[i]-&gt;rchild = b_root_addr[i+<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">root = b_root_addr[<span class="number">0</span>];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//二叉树转化为森林</span></div><div class="line"><span class="comment">// int num = 0, j;</span></div><div class="line"><span class="comment">// b_root_addr[num++] = root;</span></div><div class="line"><span class="comment">// BiTreeNode *p = root, *q = NULL;</span></div><div class="line"><span class="comment">// while(p-&gt;rchild != NULL)//可以分解成num棵m次树</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// b_root_addr[num++] = p-&gt;rchild;</span></div><div class="line"><span class="comment">// q = p;</span></div><div class="line"><span class="comment">// p = p-&gt;rchild;</span></div><div class="line"><span class="comment">// q-&gt;rchild = NULL;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// printf("每棵树的前序遍历依次为:\n");</span></div><div class="line"><span class="comment">// for(j=0;j&lt;num;j++)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// m_root_addr[j] = convert2forest(b_root_addr[j],10);//这里我把m设为10</span></div><div class="line"><span class="comment">// r_preorder(m_root_addr[j],10);</span></div><div class="line"><span class="comment">// printf("\n");</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"><span class="comment">//递归前序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"递归前序遍历为:"</span>);</div><div class="line">    preprint(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//递归中序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"递归中序遍历为:"</span>);</div><div class="line">    inprint(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//递归后序遍历</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"递归后序遍历为:"</span>);</div><div class="line">    postprint(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line"><span class="comment">//非递归前序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"非递归前序遍历为:"</span>);</div><div class="line">preprint_without_recursion(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line"><span class="comment">//非递归中序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"非递归中序遍历为:"</span>);</div><div class="line">inprint_without_recursion(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line"><span class="comment">//非递归后序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"非递归后序遍历为:"</span>);</div><div class="line">postprint_without_recursion(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line"><span class="comment">//非递归层序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"非递归层序遍历为:"</span>);</div><div class="line">hierachicalorder_without_recursion(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//获取高度</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"高度为:%d\n"</span>,height(root));</div><div class="line"></div><div class="line">    <span class="comment">//获取节点个数</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"节点个数为:%d\n"</span>,count_nodes(root));</div><div class="line"></div><div class="line">    <span class="comment">//判断是否是满树</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"是否是满树:"</span>);</div><div class="line">    <span class="keyword">if</span>(judge_full(root)) <span class="built_in">printf</span>(<span class="string">"是\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"否\n"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//判断是否是完全二叉树</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"是否是完全二叉树:"</span>);</div><div class="line">    <span class="keyword">if</span>(judge_complete(root)) <span class="built_in">printf</span>(<span class="string">"是\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"否\n"</span>);</div><div class="line"></div><div class="line"><span class="comment">//穿线排序</span></div><div class="line"><span class="comment">// int n,a[MAX],i;</span></div><div class="line"><span class="comment">// printf("请输入你要排序的数字个数:\n");</span></div><div class="line"><span class="comment">// scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">// printf("请输入%d个数字\n",n);</span></div><div class="line"><span class="comment">// for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// scanf("%d",&amp;a[i]);</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// thread_sort(a,n);</span></div><div class="line"></div><div class="line">    <span class="comment">//判断是否左子树上的结点的值都小于根，右子树上的结点的值都大于根</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"是否左子树上的结点的值都小于根，右子树上的结点的值都大于根:"</span>);</div><div class="line">    <span class="keyword">char</span> s[MAX];</div><div class="line">    <span class="keyword">int</span> n = inprint_without_recursion_tostring(root,s);</div><div class="line">    <span class="keyword">if</span>(isascending(s,n)) <span class="built_in">printf</span>(<span class="string">"是\n"</span>);<span class="comment">//只要看中序遍历是不是升序就行</span></div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"不是\n"</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再这样下去身体都要被掏空了。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;二叉树的常用知识点。&lt;/p&gt;
    
    </summary>
    
      <category term="c" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="数据结构" scheme="https://luxuantao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
