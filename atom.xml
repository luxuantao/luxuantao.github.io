<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Luson&#39;s home</title>
  
  <subtitle>就怕你宁愿流泪望天却不昂首向前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luxuantao.github.io/"/>
  <updated>2020-07-16T07:03:25.474Z</updated>
  <id>https://luxuantao.github.io/</id>
  
  <author>
    <name>陆轩韬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>强化学习-PPO2算法</title>
    <link href="https://luxuantao.github.io/2020/07/16/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0-PPO2%E7%AE%97%E6%B3%95/"/>
    <id>https://luxuantao.github.io/2020/07/16/强化学习-PPO2算法/</id>
    <published>2020-07-16T06:43:29.000Z</published>
    <updated>2020-07-16T07:03:25.474Z</updated>
    
    <content type="html"><![CDATA[<p>仍旧是玩平衡杆游戏，不过这次用了更为强大的PPO2，看完之后不经感叹里面的思想真的是太奇妙了！相较于朴素的策略网络，多了好多新的trick，不敢想象发明这个算法的人是有多聪明。</p><a id="more"></a><p>代码参考自龙良曲的tensorflow2开源书籍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span>  matplotlib</div><div class="line"><span class="keyword">from</span>    matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line">matplotlib.rcParams[<span class="string">'font.size'</span>] = <span class="number">18</span></div><div class="line">matplotlib.rcParams[<span class="string">'figure.titlesize'</span>] = <span class="number">18</span></div><div class="line">matplotlib.rcParams[<span class="string">'figure.figsize'</span>] = [<span class="number">9</span>, <span class="number">7</span>]</div><div class="line">matplotlib.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'KaiTi'</span>]</div><div class="line">matplotlib.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="keyword">False</span></div><div class="line"></div><div class="line">plt.figure()</div><div class="line"></div><div class="line"><span class="keyword">import</span>  gym,os</div><div class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span>  tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span>    tensorflow <span class="keyword">import</span> keras</div><div class="line"><span class="keyword">from</span>    tensorflow.keras <span class="keyword">import</span> layers,optimizers,losses</div><div class="line"><span class="keyword">from</span>    collections <span class="keyword">import</span> namedtuple</div><div class="line"><span class="keyword">from</span>    torch.utils.data <span class="keyword">import</span> SubsetRandomSampler,BatchSampler</div><div class="line"></div><div class="line">env = gym.make(<span class="string">'CartPole-v1'</span>)  <span class="comment"># 创建游戏环境</span></div><div class="line">env.seed(<span class="number">2222</span>)</div><div class="line">tf.random.set_seed(<span class="number">2222</span>)</div><div class="line">np.random.seed(<span class="number">2222</span>)</div><div class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></div><div class="line"><span class="keyword">assert</span> tf.__version__.startswith(<span class="string">'2.'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">gamma = <span class="number">0.98</span> <span class="comment"># 激励衰减因子</span></div><div class="line">epsilon = <span class="number">0.2</span> <span class="comment"># PPO误差超参数0.8~1.2</span></div><div class="line">batch_size = <span class="number">32</span> <span class="comment"># batch size</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 创建游戏环境</span></div><div class="line">env = gym.make(<span class="string">'CartPole-v0'</span>).unwrapped</div><div class="line">Transition = namedtuple(<span class="string">'Transition'</span>, [<span class="string">'state'</span>, <span class="string">'action'</span>, <span class="string">'a_log_prob'</span>, <span class="string">'reward'</span>, <span class="string">'next_state'</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span><span class="params">(keras.Model)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(Actor, self).__init__()</div><div class="line">        <span class="comment"># 策略网络，也叫Actor网络，输出为概率分布pi(a|s)</span></div><div class="line">        self.fc1 = layers.Dense(<span class="number">100</span>, kernel_initializer=<span class="string">'he_normal'</span>)</div><div class="line">        self.fc2 = layers.Dense(<span class="number">2</span>, kernel_initializer=<span class="string">'he_normal'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></div><div class="line">        x = tf.nn.relu(self.fc1(inputs))</div><div class="line">        x = self.fc2(x)</div><div class="line">        x = tf.nn.softmax(x, axis=<span class="number">1</span>) <span class="comment"># 转换成概率</span></div><div class="line">        <span class="keyword">return</span> x</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Critic</span><span class="params">(keras.Model)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(Critic, self).__init__()</div><div class="line">        <span class="comment"># 偏置b的估值网络，也叫Critic网络，输出为v(s)</span></div><div class="line">        self.fc1 = layers.Dense(<span class="number">100</span>, kernel_initializer=<span class="string">'he_normal'</span>)</div><div class="line">        self.fc2 = layers.Dense(<span class="number">1</span>, kernel_initializer=<span class="string">'he_normal'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></div><div class="line">        x = tf.nn.relu(self.fc1(inputs))</div><div class="line">        x = self.fc2(x)</div><div class="line">        <span class="keyword">return</span> x</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PPO</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># PPO算法主体</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(PPO, self).__init__()</div><div class="line">        self.actor = Actor() <span class="comment"># 创建Actor网络</span></div><div class="line">        self.critic = Critic() <span class="comment"># 创建Critic网络</span></div><div class="line">        self.buffer = [] <span class="comment"># 数据缓冲池</span></div><div class="line">        self.actor_optimizer = optimizers.Adam(<span class="number">1e-3</span>) <span class="comment"># Actor优化器</span></div><div class="line">        self.critic_optimizer = optimizers.Adam(<span class="number">3e-3</span>) <span class="comment"># Critic优化器</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_action</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="comment"># 送入状态向量，获取策略: [4]</span></div><div class="line">        s = tf.constant(s, dtype=tf.float32)</div><div class="line">        <span class="comment"># s: [4] =&gt; [1,4]</span></div><div class="line">        s = tf.expand_dims(s, axis=<span class="number">0</span>)</div><div class="line">        <span class="comment"># 获取策略分布: [1, 2]</span></div><div class="line">        prob = self.actor(s)</div><div class="line">        <span class="comment"># 从类别分布中采样1个动作, shape: [1]</span></div><div class="line">        a = tf.random.categorical(tf.math.log(prob), <span class="number">1</span>)[<span class="number">0</span>]</div><div class="line">        a = int(a)  <span class="comment"># Tensor转数字</span></div><div class="line">        <span class="keyword">return</span> a, float(prob[<span class="number">0</span>][a]) <span class="comment"># 返回动作及其概率</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="comment"># 送入状态向量，获取策略: [4]</span></div><div class="line">        s = tf.constant(s, dtype=tf.float32)</div><div class="line">        <span class="comment"># s: [4] =&gt; [1,4]</span></div><div class="line">        s = tf.expand_dims(s, axis=<span class="number">0</span>)</div><div class="line">        v = self.critic(s)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">return</span> float(v) <span class="comment"># 返回v(s)</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_transition</span><span class="params">(self, transition)</span>:</span></div><div class="line">        <span class="comment"># 存储采样数据</span></div><div class="line">        self.buffer.append(transition)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimize</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 优化网络主函数</span></div><div class="line">        <span class="comment"># 从缓存中取出样本数据，转换成Tensor</span></div><div class="line">        state = tf.constant([t.state <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=tf.float32)</div><div class="line">        action = tf.constant([t.action <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=tf.int32)</div><div class="line">        action = tf.reshape(action,[<span class="number">-1</span>,<span class="number">1</span>])</div><div class="line">        reward = [t.reward <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer]</div><div class="line">        old_action_log_prob = tf.constant([t.a_log_prob <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=tf.float32)</div><div class="line">        old_action_log_prob = tf.reshape(old_action_log_prob, [<span class="number">-1</span>,<span class="number">1</span>])</div><div class="line">        <span class="comment"># 通过MC方法循环计算R(st)</span></div><div class="line">        R = <span class="number">0</span></div><div class="line">        Rs = []</div><div class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> reward[::<span class="number">-1</span>]:</div><div class="line">            R = r + gamma * R</div><div class="line">            Rs.insert(<span class="number">0</span>, R)</div><div class="line">        Rs = tf.constant(Rs, dtype=tf.float32)</div><div class="line">        <span class="comment"># 对缓冲池数据大致迭代10遍</span></div><div class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(round(<span class="number">10</span>*len(self.buffer)/batch_size)):</div><div class="line">            <span class="comment"># 随机从缓冲池采样batch size大小样本</span></div><div class="line">            index = np.random.choice(np.arange(len(self.buffer)), batch_size, replace=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 构建梯度跟踪环境</span></div><div class="line">            <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape1, tf.GradientTape() <span class="keyword">as</span> tape2:</div><div class="line">                <span class="comment"># 取出R(st)，[b,1]</span></div><div class="line">                v_target = tf.expand_dims(tf.gather(Rs, index, axis=<span class="number">0</span>), axis=<span class="number">1</span>)</div><div class="line">                <span class="comment"># 计算v(s)预测值，也就是偏置b</span></div><div class="line">                v = self.critic(tf.gather(state, index, axis=<span class="number">0</span>))</div><div class="line">                delta = v_target - v <span class="comment"># 计算Advantage function (收益reward减去基准baseline) </span></div><div class="line">                advantage = tf.stop_gradient(delta) <span class="comment"># 断开梯度连接 </span></div><div class="line">                <span class="comment"># 由于TF的gather_nd与pytorch的gather功能不一样，需要构造</span></div><div class="line">                <span class="comment"># gather_nd需要的坐标参数，indices:[b, 2]</span></div><div class="line">                <span class="comment"># pi_a = pi.gather(1, a) # pytorch只需要一行即可实现</span></div><div class="line">                a = tf.gather(action, index, axis=<span class="number">0</span>) <span class="comment"># 取出batch的动作at</span></div><div class="line">                <span class="comment"># batch的动作分布pi(a|st)</span></div><div class="line">                pi = self.actor(tf.gather(state, index, axis=<span class="number">0</span>)) </div><div class="line">                indices = tf.expand_dims(tf.range(a.shape[<span class="number">0</span>]), axis=<span class="number">1</span>)</div><div class="line">                indices = tf.concat([indices, a], axis=<span class="number">1</span>)</div><div class="line">                pi_a = tf.gather_nd(pi, indices)  <span class="comment"># 动作的概率值pi(at|st), [b]</span></div><div class="line">                pi_a = tf.expand_dims(pi_a, axis=<span class="number">1</span>)  <span class="comment"># [b]=&gt; [b,1] </span></div><div class="line">                <span class="comment"># 重要性采样</span></div><div class="line">                ratio = (pi_a / tf.gather(old_action_log_prob, index, axis=<span class="number">0</span>))</div><div class="line">                surr1 = ratio * advantage</div><div class="line">                surr2 = tf.clip_by_value(ratio, <span class="number">1</span> - epsilon, <span class="number">1</span> + epsilon) * advantage</div><div class="line">                <span class="comment"># PPO误差函数</span></div><div class="line">                policy_loss = -tf.reduce_mean(tf.minimum(surr1, surr2))</div><div class="line">                <span class="comment"># 对于偏置v来说，希望与MC估计的R(st)越接近越好</span></div><div class="line">                value_loss = losses.MSE(v_target, v)</div><div class="line">            <span class="comment"># 优化策略网络</span></div><div class="line">            grads = tape1.gradient(policy_loss, self.actor.trainable_variables)</div><div class="line">            self.actor_optimizer.apply_gradients(zip(grads, self.actor.trainable_variables))</div><div class="line">            <span class="comment"># 优化偏置值网络</span></div><div class="line">            grads = tape2.gradient(value_loss, self.critic.trainable_variables)</div><div class="line">            self.critic_optimizer.apply_gradients(zip(grads, self.critic.trainable_variables))</div><div class="line"></div><div class="line">        self.buffer = []  <span class="comment"># 清空已训练数据</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    agent = PPO()</div><div class="line">    returns = [] <span class="comment"># 统计总回报</span></div><div class="line">    total = <span class="number">0</span> <span class="comment"># 一段时间内平均回报</span></div><div class="line">    <span class="keyword">for</span> i_epoch <span class="keyword">in</span> range(<span class="number">200</span>): <span class="comment"># 训练回合数</span></div><div class="line">        state = env.reset() <span class="comment"># 复位环境</span></div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">500</span>): <span class="comment"># 最多考虑500步</span></div><div class="line">            <span class="comment"># 通过最新策略与环境交互</span></div><div class="line">            action, action_prob = agent.select_action(state)</div><div class="line">            next_state, reward, done, _ = env.step(action)</div><div class="line">            <span class="comment"># 构建样本并存储</span></div><div class="line">            trans = Transition(state, action, action_prob, reward, next_state)</div><div class="line">            agent.store_transition(trans)</div><div class="line">            state = next_state <span class="comment"># 刷新状态</span></div><div class="line">            total += reward <span class="comment"># 累积激励</span></div><div class="line">            env.render()</div><div class="line">            <span class="keyword">if</span> done: <span class="comment"># 合适的时间点训练网络</span></div><div class="line">                <span class="keyword">if</span> len(agent.buffer) &gt;= batch_size:</div><div class="line">                    agent.optimize() <span class="comment"># 训练网络</span></div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> i_epoch % <span class="number">20</span> == <span class="number">0</span>: <span class="comment"># 每20个回合统计一次平均回报</span></div><div class="line">            returns.append(total/<span class="number">20</span>)</div><div class="line">            total = <span class="number">0</span></div><div class="line">            print(i_epoch, returns[<span class="number">-1</span>])</div><div class="line"></div><div class="line">    print(np.array(returns))</div><div class="line">    plt.figure()</div><div class="line">    plt.plot(np.arange(len(returns))*<span class="number">20</span>, np.array(returns))</div><div class="line">    plt.plot(np.arange(len(returns))*<span class="number">20</span>, np.array(returns), <span class="string">'s'</span>)</div><div class="line">    plt.xlabel(<span class="string">'回合数'</span>)</div><div class="line">    plt.ylabel(<span class="string">'总回报'</span>)</div><div class="line">    plt.savefig(<span class="string">'ppo-tf-cartpole.svg'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p>网络train起来不太稳定，可能需要试个几次效果才会好。（RL和GAN都是出了名的难train）</p><p>不过相较于上一篇的朴素的策略网络，这次的训练速度要快许多，因为上次是得到一个轨迹后train一次，得到一个轨迹后train一次。。。这是因为train过一次后，模型就变了。现在是得到一把轨迹放到缓存池里，然后从缓存池里每次捞batch_size个出来train。这也正是PPO算法的优势之一，其中的关键思想就是重要性采样：如何从另一个分布来估计原分布的期望（从这也可以看出统计学的威力），使得旧数据得到复用。</p><p>和之前另一个不同点是这次代码中加入了Critic，用来估计值网络，作为基准，计算Advantage function (收益reward减去基准baseline) ，上一篇中曾提到 <code>当回报是正的，就提高做过的动作的概率，反之就降低</code> ，其实上一篇的代码没有做到这句话，因为没有减去基准，所以不管回报好坏，做过的动作的概率都是提高的（这对没做过的动作其实是不公平的），现在就没有这个问题了。</p><p>最后一点trick是PPO2算法中对于损失函数的定义。由于用了另一个分布去近似近似原分布，自然不希望二者差的太多，所以在PPO 算法中就用KL Divergence去度量两个分布之间的差距。PPO2则没有计算KL散度，而用了clip裁剪的方法做到了同样的事。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;仍旧是玩平衡杆游戏，不过这次用了更为强大的PPO2，看完之后不经感叹里面的思想真的是太奇妙了！相较于朴素的策略网络，多了好多新的trick，不敢想象发明这个算法的人是有多聪明。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="强化学习" scheme="https://luxuantao.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow2" scheme="https://luxuantao.github.io/tags/tensorflow2/"/>
    
  </entry>
  
  <entry>
    <title>强化学习-策略网络</title>
    <link href="https://luxuantao.github.io/2020/07/15/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0-%E7%AD%96%E7%95%A5%E7%BD%91%E7%BB%9C/"/>
    <id>https://luxuantao.github.io/2020/07/15/强化学习-策略网络/</id>
    <published>2020-07-15T13:30:46.000Z</published>
    <updated>2020-07-15T13:40:06.450Z</updated>
    
    <content type="html"><![CDATA[<p>我一直觉得强化学习是走向强人工智能的一个必经过程，现有的许多问答系统中也时常会出现强化学习的身影。本文使用策略网络玩强化学习入门的平衡杆游戏。</p><a id="more"></a><p>代码参考自龙良曲的tensorflow2开源书籍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gym,os</div><div class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span>  matplotlib</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="comment"># Default parameters for plots</span></div><div class="line">matplotlib.rcParams[<span class="string">'font.size'</span>] = <span class="number">18</span></div><div class="line">matplotlib.rcParams[<span class="string">'figure.titlesize'</span>] = <span class="number">18</span></div><div class="line">matplotlib.rcParams[<span class="string">'figure.figsize'</span>] = [<span class="number">9</span>, <span class="number">7</span>]</div><div class="line">matplotlib.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'KaiTi'</span>]</div><div class="line">matplotlib.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="keyword">False</span> </div><div class="line"></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span>    tensorflow <span class="keyword">import</span> keras</div><div class="line"><span class="keyword">from</span>    tensorflow.keras <span class="keyword">import</span> layers,optimizers,losses</div><div class="line"><span class="keyword">from</span>    PIL <span class="keyword">import</span> Image</div><div class="line">env = gym.make(<span class="string">'CartPole-v1'</span>)  <span class="comment"># 创建游戏环境</span></div><div class="line">env.seed(<span class="number">2333</span>)</div><div class="line">tf.random.set_seed(<span class="number">2333</span>)</div><div class="line">np.random.seed(<span class="number">2333</span>)</div><div class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></div><div class="line"><span class="keyword">assert</span> tf.__version__.startswith(<span class="string">'2.'</span>)</div><div class="line"></div><div class="line">learning_rate = <span class="number">0.0002</span></div><div class="line">gamma         = <span class="number">0.98</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Policy</span><span class="params">(keras.Model)</span>:</span></div><div class="line">    <span class="comment"># 策略网络，生成动作的概率分布</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(Policy, self).__init__()</div><div class="line">        self.data = [] <span class="comment"># 存储轨迹</span></div><div class="line">        <span class="comment"># 输入为长度为4的向量，输出为左、右2个动作</span></div><div class="line">        self.fc1 = layers.Dense(<span class="number">128</span>, kernel_initializer=<span class="string">'he_normal'</span>)</div><div class="line">        self.fc2 = layers.Dense(<span class="number">2</span>, kernel_initializer=<span class="string">'he_normal'</span>)</div><div class="line">        <span class="comment"># 网络优化器</span></div><div class="line">        self.optimizer = optimizers.Adam(lr=learning_rate)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, training=None)</span>:</span></div><div class="line">        <span class="comment"># 状态输入s的shape为向量：[4]</span></div><div class="line">        x = tf.nn.relu(self.fc1(inputs))</div><div class="line">        x = tf.nn.softmax(self.fc2(x), axis=<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> x</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put_data</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="comment"># 记录r,log_P(a|s)</span></div><div class="line">        self.data.append(item)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_net</span><span class="params">(self, tape)</span>:</span></div><div class="line">        <span class="comment"># 计算梯度并更新策略网络参数。tape为梯度记录器</span></div><div class="line">        R = <span class="number">0</span> <span class="comment"># 终结状态的初始回报为0</span></div><div class="line">        <span class="keyword">for</span> r, log_prob <span class="keyword">in</span> self.data[::<span class="number">-1</span>]:<span class="comment">#逆序取</span></div><div class="line">            R = r + gamma * R <span class="comment"># 计算每个时间戳上的回报</span></div><div class="line">            <span class="comment"># 每个时间戳都计算一次梯度</span></div><div class="line">            <span class="comment"># grad_R=-log_P*R*grad_theta</span></div><div class="line">            loss = -log_prob * R</div><div class="line">            <span class="keyword">with</span> tape.stop_recording():</div><div class="line">                <span class="comment"># 优化策略网络</span></div><div class="line">                grads = tape.gradient(loss, self.trainable_variables)</div><div class="line">                self.optimizer.apply_gradients(zip(grads, self.trainable_variables))</div><div class="line">        self.data = [] <span class="comment"># 清空轨迹</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    pi = Policy() <span class="comment"># 创建策略网络</span></div><div class="line">    pi(tf.random.normal((<span class="number">4</span>,<span class="number">4</span>)))</div><div class="line">    pi.summary()</div><div class="line">    score = <span class="number">0.0</span> <span class="comment"># 计分</span></div><div class="line">    print_interval = <span class="number">20</span> <span class="comment"># 打印间隔</span></div><div class="line">    returns = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> n_epi <span class="keyword">in</span> range(<span class="number">400</span>):</div><div class="line">        print(n_epi)</div><div class="line">        s = env.reset() <span class="comment"># 回到游戏初始状态，返回s0</span></div><div class="line">        <span class="keyword">with</span> tf.GradientTape(persistent=<span class="keyword">True</span>) <span class="keyword">as</span> tape:</div><div class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">501</span>): <span class="comment"># CartPole-v1 forced to terminates at 500 step.</span></div><div class="line">                <span class="comment"># 送入状态向量，获取策略</span></div><div class="line">                s = tf.constant(s,dtype=tf.float32)</div><div class="line">                <span class="comment"># s: [4] =&gt; [1,4]</span></div><div class="line">                s = tf.expand_dims(s, axis=<span class="number">0</span>)</div><div class="line">                prob = pi(s) <span class="comment"># 动作分布:[1,2]</span></div><div class="line">                <span class="comment"># 从类别分布中采样1个动作, shape: [1]</span></div><div class="line">                a = tf.random.categorical(tf.math.log(prob), <span class="number">1</span>)[<span class="number">0</span>]</div><div class="line">                a = int(a) <span class="comment"># Tensor转数字</span></div><div class="line">                s_prime, r, done, info = env.step(a)</div><div class="line">                <span class="comment"># 记录动作a和动作产生的奖励r</span></div><div class="line">                <span class="comment"># prob shape:[1,2]</span></div><div class="line">                pi.put_data((r, tf.math.log(prob[<span class="number">0</span>][a])))</div><div class="line">                s = s_prime <span class="comment"># 刷新状态</span></div><div class="line">                score += r <span class="comment"># 累积奖励</span></div><div class="line"></div><div class="line">                env.render()</div><div class="line">                <span class="keyword">if</span> done:  <span class="comment"># 当前episode终止</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">            <span class="comment"># episode终止后，训练一次网络</span></div><div class="line">            pi.train_net(tape)</div><div class="line">        <span class="keyword">del</span> tape</div><div class="line"></div><div class="line">        <span class="keyword">if</span> n_epi%print_interval==<span class="number">0</span> <span class="keyword">and</span> n_epi!=<span class="number">0</span>:</div><div class="line">            returns.append(score/print_interval)</div><div class="line">            print(<span class="string">f"# of episode :<span class="subst">&#123;n_epi&#125;</span>, avg score : <span class="subst">&#123;score/print_interval&#125;</span>"</span>)</div><div class="line">            score = <span class="number">0.0</span></div><div class="line">    env.close() <span class="comment"># 关闭环境</span></div><div class="line"></div><div class="line">    plt.plot(np.arange(len(returns))*print_interval, returns)</div><div class="line">    plt.plot(np.arange(len(returns))*print_interval, returns, <span class="string">'s'</span>)</div><div class="line">    plt.xlabel(<span class="string">'回合数'</span>)</div><div class="line">    plt.ylabel(<span class="string">'总回报'</span>)</div><div class="line">    plt.savefig(<span class="string">'reinforce-tf-cartpole.svg'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p>代码中唯一的trick是 <strong>因果性</strong> ，只考虑从某时间戳开始的累积回报，而不是总回报，所以代码中是逆序计算梯度的。代码中的策略网络使用两层全连接层实现的，其实可以换成任何其他形式。</p><p>我一直认为朴素的策略网络梯度更新的思想其实十分简单直观：当回报是正的，就提高做过的动作的概率，反之就降低。当然这过于朴素了，所以才有了后面众多的改进措施。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我一直觉得强化学习是走向强人工智能的一个必经过程，现有的许多问答系统中也时常会出现强化学习的身影。本文使用策略网络玩强化学习入门的平衡杆游戏。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="强化学习" scheme="https://luxuantao.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow2" scheme="https://luxuantao.github.io/tags/tensorflow2/"/>
    
  </entry>
  
  <entry>
    <title>爬取天气信息</title>
    <link href="https://luxuantao.github.io/2020/07/15/%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94%E4%BF%A1%E6%81%AF/"/>
    <id>https://luxuantao.github.io/2020/07/15/爬取天气信息/</id>
    <published>2020-07-15T08:39:07.000Z</published>
    <updated>2020-07-15T08:42:39.615Z</updated>
    
    <content type="html"><![CDATA[<p>使用requests和BeautifulSoup爬取天气信息。</p><a id="more"></a><p>这是从不倒翁问答系统的祖传代码里翻出来的，利用搜狗搜索获取天气信息，开箱即用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line">headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36'</span>&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">AskSogouWeather</span><span class="params">(q)</span>:</span></div><div class="line">url = <span class="string">'https://www.sogou.com/web?query=%s'</span> % q</div><div class="line">resp = requests.get(url, timeout=<span class="number">5</span>, headers=headers)</div><div class="line">soup = BeautifulSoup(resp.text, <span class="string">'html.parser'</span>)</div><div class="line">rlst = soup.find(<span class="string">'div'</span>, <span class="string">'vr-weather161227'</span>)</div><div class="line"><span class="keyword">if</span> rlst <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">md = rlst.find(<span class="string">'div'</span>, <span class="string">'more-day'</span>)</div><div class="line"><span class="keyword">if</span> md <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">items = md.find_all(<span class="string">'a'</span>)</div><div class="line">item = <span class="keyword">None</span></div><div class="line">today = items[<span class="number">0</span>]</div><div class="line"><span class="keyword">for</span> it <span class="keyword">in</span> items:</div><div class="line">xxs = it.get(<span class="string">'queryinfo'</span>, <span class="string">''</span>).split(<span class="string">';'</span>)</div><div class="line">xxs = [x <span class="keyword">for</span> x <span class="keyword">in</span> xxs <span class="keyword">if</span> x != <span class="string">''</span>]</div><div class="line"><span class="keyword">if</span> <span class="string">'今天'</span> <span class="keyword">in</span> xxs: today = it</div><div class="line"><span class="keyword">for</span> xx <span class="keyword">in</span> xxs:</div><div class="line"><span class="keyword">if</span> xx <span class="keyword">in</span> q:</div><div class="line">item = it</div><div class="line"><span class="keyword">if</span> item <span class="keyword">is</span> <span class="keyword">None</span>: item = today</div><div class="line">res = item.text.replace(<span class="string">'\xa0'</span>, <span class="string">' '</span>).replace(<span class="string">"\n"</span>,<span class="string">" "</span>).strip().replace(<span class="string">'  '</span>, <span class="string">' '</span>)</div><div class="line"><span class="keyword">return</span> res</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">WeatherRule</span><span class="params">(q)</span>:</span></div><div class="line"><span class="keyword">if</span> <span class="string">'天气'</span> <span class="keyword">in</span> q <span class="keyword">and</span> (<span class="string">'怎'</span> <span class="keyword">in</span> q <span class="keyword">or</span> <span class="string">'如何'</span> <span class="keyword">in</span> q): </div><div class="line">res = AskSogouWeather(q)</div><div class="line"><span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">print(WeatherRule(<span class="string">'明天天气怎么样'</span>))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用requests和BeautifulSoup爬取天气信息。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="爬虫" scheme="https://luxuantao.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>文本相似度计算</title>
    <link href="https://luxuantao.github.io/2020/07/14/%E6%96%87%E6%9C%AC%E7%9B%B8%E4%BC%BC%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
    <id>https://luxuantao.github.io/2020/07/14/文本相似度计算/</id>
    <published>2020-07-14T02:19:22.000Z</published>
    <updated>2020-07-15T08:40:28.719Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍文本相似度计算的各种方法，可以广泛应用在基于问答对匹配的问答系统中。</p><a id="more"></a><h1 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h1><p>$$<br>tfidf_i = tf<em>idf = \frac{词i的数量}{词语总数}</em>log\frac{总文档数}{包含词i的文档数}<br>$$</p><p>其中tf称为词频，idf为逆文档频率。</p><h1 id="BM25"><a href="#BM25" class="headerlink" title="BM25"></a>BM25</h1><p>$$<br>BM25(i) = \frac{词i的数量}{总词数}<em>\frac{(k+1)C}{C+k(1-b+b\frac{|d|}{avdl}）}</em>log(\frac{总文档数}{包含i的文档数}) \<br>C = tf=\frac{词i的数量}{总词数},k&gt;0,b\in [0,1]，d为文档i的长度，avdl是文档平均长度<br>$$</p><p>把 $1-b+b\frac{d}{avdl}$ 中的b看成0，那么此时中间项的结果为 $\frac{(k+1)tf}{k+tf}$ ，通过设置一个k，就能够保证其最大值为1，达到限制tf过大的目的。</p><p>即：<br>$$<br>\begin{align}<br>&amp;\frac{(k+1)tf}{k+tf}= \frac{k+1}{1+\frac{k}{tf}} \qquad \qquad \qquad,上下同除tf<br>\end{align}<br>$$<br>k不变的情况下，上式随着tf的增大而增大，上限为k+1,但是增加的程度会变小。</p><p>在一个句子中，某个词重要程度应该是随着词语的数量逐渐衰减的，所以中间项对词频进行了惩罚，随着次数的增加，影响程度的增加会越来越小。通过设置k值，能够保证其最大值为k+1，<code>k往往取值1.2</code>。</p><p>此外， $1-b+b\frac{d}{avdl}$ 的作用是用来对文本的长度进行归一化。例如在考虑整个句子的tdidf的时候，如果句子的长度太短，那么计算总的tdidf的值是要比长句子的tdidf的值要低的。所以可以考虑对句子的长度进行归一化处理。</p><p>可以看到，当句子的长度越短，$1-b+b\frac{|d|}{avdl}$的值是越小，作为分母的位置，会让整个第二项越大，从而达到提高短文本句子的BM25的值的效果。当b的值为0，可以禁用归一化， <code>b往往取值0.75</code> 。</p><h1 id="fasttext"><a href="#fasttext" class="headerlink" title="fasttext"></a>fasttext</h1><p>可以使用fasttext获取词向量，然后对一个句子中的所有词语的词向量进行平均，获取整个句子的向量表示，而且通过参数的控制，能实现N-garm的效果。</p><p>假设我们有文本<code>a.txt</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">我 很 喜欢 她 </div><div class="line">今天 天气 不错</div><div class="line">我 爱 深度学习</div></pre></td></tr></table></figure><p>那么我们可以实现获取句子向量的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> fasttext.FastText <span class="keyword">as</span> fasttext</div><div class="line"></div><div class="line"><span class="comment">#训练模型，设置n-garm=2</span></div><div class="line">model = fasttext.train_unsupervised(input=<span class="string">"a.txt"</span>, epoch=<span class="number">20</span>, minCount=<span class="number">1</span>, wordNgrams=<span class="number">2</span>)</div><div class="line"><span class="comment">#获取句子向量，是对词向量的平均</span></div><div class="line">print(model.get_sentence_vector(<span class="string">"我 是 谁"</span>))</div></pre></td></tr></table></figure><p>默认生成的句向量是100维的。</p><h1 id="pysparnn"><a href="#pysparnn" class="headerlink" title="pysparnn"></a>pysparnn</h1><p><code>pysparnn</code> 使用的是一种 <code>cluster pruning(簇修剪)</code> 的技术，开始的时候对数据进行聚类，后续再有限个类别中进行数据的搜索，根据计算的余弦相似度返回结果。</p><p>数据预处理过程如下：</p><ol><li>随机选择 $\sqrt{N}$ 个样本作为leader</li><li>选择非leader的数据(follower),使用余弦相似度计算找到最近的leader</li></ol><p>当获取到一个问题q的时候，查询过程：</p><ol><li>计算每个leader和q的相似度，找到最相似的leader</li><li>然后计算问题q和leader所在簇的相似度，找到最相似的k个，作为最终的返回结果</li></ol><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pysparnn.cluster_index <span class="keyword">as</span> ci</div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</div><div class="line"></div><div class="line"><span class="comment">#1. 原始数据</span></div><div class="line">data = [</div><div class="line">    <span class="string">'hello world'</span>,</div><div class="line">    <span class="string">'oh hello there'</span>,</div><div class="line">    <span class="string">'Play it'</span>,</div><div class="line">    <span class="string">'Play it again Sam'</span>,</div><div class="line">]  </div><div class="line"></div><div class="line"><span class="comment">#2. 原始数据向量化</span></div><div class="line">tv = TfidfVectorizer()</div><div class="line">tv.fit(data)</div><div class="line"></div><div class="line">features_vec = tv.transform(data)</div><div class="line"></div><div class="line"><span class="comment"># 原始数据构造索引</span></div><div class="line">cp = ci.MultiClusterIndex(features_vec, data)</div><div class="line"></div><div class="line"><span class="comment"># 待搜索的数据向量化</span></div><div class="line">search_data = [</div><div class="line">    <span class="string">'oh there'</span>,</div><div class="line">    <span class="string">'Play it again Frank'</span></div><div class="line">]</div><div class="line"></div><div class="line">search_features_vec = tv.transform(search_data)</div><div class="line"></div><div class="line"><span class="comment">#3. 索引中传入带搜索数据，返回结果</span></div><div class="line">print(cp.search(search_features_vec, k=<span class="number">2</span>, k_clusters=<span class="number">2</span>, return_distance=<span class="keyword">True</span>))</div></pre></td></tr></table></figure><p>此外，还可以设置两个大于0的数字b1和b2</p><ul><li>b1表示在数据预处理阶段，每个follower选择b1个最相似的leader，而不是选择单独一个leader，这样不同的簇是有数据交叉的</li><li>b2表示在查询阶段，找到最相似的b2个leader，然后再计算不同的leader中下的topk的结果</li></ul><p>通过增加b1和b2的值，我们能够有更大的机会找到更好的结果，但是这样会需要更加大量的计算。</p><p>在 <code>ci.MultiClusterIndex(features, records_data, num_indexes)</code> 中， <code>num_indexes</code> 能够设置b1的值，默认为2。</p><p>在搜索的过程中， <code>cp.search(search_vec, k=8, k_clusters=10, return_distance=True,num_indexes)</code> ， <code>num_Indexes</code> 可以设置b2的值，默认等于b1的值。</p><h1 id="孪生网络"><a href="#孪生网络" class="headerlink" title="孪生网络"></a>孪生网络</h1><p>孪生神经网络由两个共享权值的网络的组成，通过两个输入，被DNN进行编码，得到向量的表示之后，根据实际的用途来制定损失函数。比如我们需要计算相似度的时候，可以使用余弦相似度，或者使用 $exp^{-||h^{left}-h^{right}||}$ 来确定向量的距离。孪生神经网络被用于有多个输入和一个输出的场景，比如手写字体识别、文本相似度检验、人脸识别等。</p><p>模型架构大致如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</div><div class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</div><div class="line"><span class="keyword">import</span> config</div><div class="line"><span class="keyword">import</span> torch</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiameseNetwork</span><span class="params">(nn.Module)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(SiameseNetwork, self).__init__()</div><div class="line">        self.embedding = nn.Embedding(num_embeddings=len(config.sort_ws),</div><div class="line">                                      embedding_dim=<span class="number">300</span>,</div><div class="line">                                      padding_idx=config.sort_ws.PAD)</div><div class="line">        self.gru1 = nn.GRU(input_size=<span class="number">300</span>,</div><div class="line">                          hidden_size=config.sort_hidden_size,</div><div class="line">                          num_layers=config.sort_num_layers,</div><div class="line">                          bidirectional=config.bidirectional,</div><div class="line">                          batch_first=<span class="keyword">True</span>)</div><div class="line">        self.gru2 = nn.GRU(input_size=config.sort_hidden_size * <span class="number">8</span>,</div><div class="line">                           hidden_size=config.sort_hidden_size,</div><div class="line">                           num_layers=<span class="number">1</span>,</div><div class="line">                           batch_first=<span class="keyword">True</span>,</div><div class="line">                           bidirectional=<span class="keyword">False</span>)</div><div class="line">        self.fc = nn.Sequential(</div><div class="line">            nn.BatchNorm1d(config.sort_hidden_size * <span class="number">2</span>),</div><div class="line"></div><div class="line">            nn.Linear(config.sort_hidden_size * <span class="number">2</span>, config.sort_hidden_size),</div><div class="line">            nn.ELU(inplace=<span class="keyword">True</span>),</div><div class="line">            nn.BatchNorm1d(config.sort_hidden_size),</div><div class="line">            nn.Dropout(config.sort_dropout),</div><div class="line"></div><div class="line">            nn.Linear(config.sort_hidden_size, config.sort_hidden_size),</div><div class="line">            nn.ELU(inplace=<span class="keyword">True</span>),</div><div class="line">            nn.BatchNorm1d(config.sort_hidden_size),</div><div class="line">            nn.Dropout(config.sort_dropout),</div><div class="line"></div><div class="line">            nn.Linear(config.sort_hidden_size, <span class="number">2</span>),</div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, input1, input2)</span>:</span></div><div class="line">        mask1, mask2 = input1.eq(config.sort_ws.PAD), input2.eq(config.sort_ws.PAD)</div><div class="line">        input1 = self.embedding(input1) <span class="comment"># [batch_size, max_len, 300]</span></div><div class="line">        input2 = self.embedding(input2)</div><div class="line">        <span class="comment"># output [batch_size, max_len, hidden_size*num_layer]</span></div><div class="line">        <span class="comment"># hidden [numlayer*2, batch_size, hidden_size]</span></div><div class="line">        output1, _ = self.gru1(input1)</div><div class="line">        output2, _ = self.gru1(input2)</div><div class="line">        output1_align, output2_align = self.sort_attention_align(output1, output2, mask1, mask2)</div><div class="line">        q1_combined = torch.cat([output1, output1_align, self.submul(output1, output1_align)], dim=<span class="number">-1</span>) <span class="comment"># [batch_size, max_len, hidden_size*8]</span></div><div class="line">        q2_combined = torch.cat([output2, output2_align, self.submul(output2, output2_align)], dim=<span class="number">-1</span>)</div><div class="line"></div><div class="line">        <span class="comment"># batch_size * seq_len * (1 * hidden_size)</span></div><div class="line">        q1_compose, _ = self.gru2(q1_combined)</div><div class="line">        q2_compose, _ = self.gru2(q2_combined)</div><div class="line"></div><div class="line">        <span class="comment"># 进行Aggregate操作，也就是进行pooling</span></div><div class="line">        <span class="comment"># input: batch_size * seq_len * (1 * hidden_size)</span></div><div class="line">        <span class="comment"># output: batch_size * (1 * hidden_size)</span></div><div class="line">        q1_rep = self.apply_pooling(q1_compose)</div><div class="line">        q2_rep = self.apply_pooling(q2_compose)</div><div class="line"></div><div class="line">        <span class="comment"># Concate合并到一起，用来进行计算相似度</span></div><div class="line">        out = torch.cat([q1_rep, q2_rep], dim=<span class="number">-1</span>) <span class="comment"># batch_size * (2 * hidden_size)</span></div><div class="line">        out = self.fc(out) <span class="comment"># batch_size * 2</span></div><div class="line">        <span class="keyword">return</span> out</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submul</span><span class="params">(self, x1, x2)</span>:</span></div><div class="line">        mul = x1 * x2</div><div class="line">        sub = x1 - x2</div><div class="line">        <span class="keyword">return</span> torch.cat([sub, mul], dim=<span class="number">-1</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply_pooling</span><span class="params">(self, output)</span>:</span></div><div class="line">        avg_pooled = F.avg_pool1d(output.transpose(<span class="number">1</span>, <span class="number">2</span>), kernel_size=output.size(<span class="number">1</span>)).squeeze(<span class="number">-1</span>)</div><div class="line">        max_pooled = F.max_pool1d(output.transpose(<span class="number">1</span>, <span class="number">2</span>), kernel_size=output.size(<span class="number">1</span>)).squeeze(<span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> avg_pooled + max_pooled</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort_attention_align</span><span class="params">(self, x1, x2, mask1, mask2)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        x1: batch_size * seq_len_1 * hidden_size</span></div><div class="line"><span class="string">        x2: batch_size * seq_len_2 * hidden_size</span></div><div class="line"><span class="string">        mask1:x1中pad的位置为1，其他为0</span></div><div class="line"><span class="string">        mask2:x2中pad的位置为1，其他为0</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="comment"># attention: batch_size * seq_len_1 * seq_len_2</span></div><div class="line">        attention_weight = torch.matmul(x1, x2.transpose(<span class="number">1</span>, <span class="number">2</span>))</div><div class="line">        <span class="comment"># mask1 : batch_size,seq_len1</span></div><div class="line">        mask1 = mask1.float().masked_fill_(mask1, float(<span class="string">'-inf'</span>))</div><div class="line">        <span class="comment"># mask2 : batch_size,seq_len2</span></div><div class="line">        mask2 = mask2.float().masked_fill_(mask2, float(<span class="string">'-inf'</span>))</div><div class="line"></div><div class="line">        <span class="comment"># weight: batch_size * seq_len_1 * seq_len_2</span></div><div class="line">        weight1 = F.softmax(attention_weight + mask2.unsqueeze(<span class="number">1</span>), dim=<span class="number">-1</span>)</div><div class="line">        <span class="comment"># batch_size*seq_len_1*hidden_size</span></div><div class="line">        x1_align = torch.matmul(weight1, x2)</div><div class="line"></div><div class="line">        <span class="comment"># 同理，需要对attention_weight进行permute操作</span></div><div class="line">        weight2 = F.softmax(attention_weight.transpose(<span class="number">1</span>, <span class="number">2</span>) + mask1.unsqueeze(<span class="number">1</span>), dim=<span class="number">-1</span>)</div><div class="line">        x2_align = torch.matmul(weight2, x1)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> x1_align, x2_align</div></pre></td></tr></table></figure><h1 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h1><p>也可以使用BERT进行文本相似度计算，这里使用 <a href="https://github.com/IAdmireu/ChineseSTS/blob/master/simtrain_to05sts.txt" target="_blank" rel="external">https://github.com/IAdmireu/ChineseSTS/blob/master/simtrain_to05sts.txt</a> 数据集，两个句子的相似度范围从0到5。然后就和上篇文章中的方法一样，转化为文本分类问题就ok了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> torch</div><div class="line"><span class="keyword">import</span> time </div><div class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</div><div class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F </div><div class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> BertModel, BertTokenizer</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </div><div class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm </div><div class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"></div><div class="line">os.environ[<span class="string">"CUDA_VISIBLE_DEVICES"</span>] = <span class="string">"1"</span></div><div class="line">path = <span class="string">"./"</span></div><div class="line">bert_path = <span class="string">"hfl/chinese-roberta-wwm-ext"</span></div><div class="line">tokenizer = BertTokenizer(vocab_file=<span class="string">"vocab.txt"</span>)  <span class="comment"># 初始化分词器</span></div><div class="line">input_ids = []     <span class="comment"># input char ids</span></div><div class="line">input_types = []   <span class="comment"># segment ids</span></div><div class="line">input_masks = []   <span class="comment"># attention mask</span></div><div class="line">label = []         <span class="comment"># 标签</span></div><div class="line">pad_size = <span class="number">64</span>      <span class="comment"># 也称为 max_len </span></div><div class="line"> </div><div class="line"><span class="keyword">with</span> open(path + <span class="string">"train.txt"</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> i, l <span class="keyword">in</span> tqdm(enumerate(f)): </div><div class="line">        x1, x2, y = l.strip().split(<span class="string">'\t'</span>)</div><div class="line">        x1 = tokenizer.tokenize(x1)</div><div class="line">        x2 = tokenizer.tokenize(x2)</div><div class="line">        tokens = [<span class="string">"[CLS]"</span>] + x1 + [<span class="string">"[SEP]"</span>] + x2 + [<span class="string">"[SEP]"</span>]</div><div class="line">        </div><div class="line">        <span class="comment"># 得到input_id, seg_id, att_mask</span></div><div class="line">        ids = tokenizer.convert_tokens_to_ids(tokens)</div><div class="line">        types = [<span class="number">0</span>] * len(ids)</div><div class="line">        masks = [<span class="number">1</span>] * len(ids)</div><div class="line">        <span class="comment"># 短则补齐，长则切断</span></div><div class="line">        <span class="keyword">if</span> len(ids) &lt; pad_size:</div><div class="line">            types = types + [<span class="number">1</span>] * (pad_size - len(ids))  <span class="comment"># mask部分 segment置为1</span></div><div class="line">            masks = masks + [<span class="number">0</span>] * (pad_size - len(ids))</div><div class="line">            ids = ids + [<span class="number">0</span>] * (pad_size - len(ids))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            types = types[:pad_size]</div><div class="line">            masks = masks[:pad_size]</div><div class="line">            ids = ids[:pad_size]</div><div class="line">        input_ids.append(ids)</div><div class="line">        input_types.append(types)</div><div class="line">        input_masks.append(masks)</div><div class="line">        <span class="keyword">assert</span> len(ids) == len(masks) == len(types) == pad_size</div><div class="line">        label.append([int(float(y))])</div><div class="line"></div><div class="line"><span class="comment"># 随机打乱索引</span></div><div class="line">random_order = list(range(len(input_ids)))</div><div class="line">np.random.seed(<span class="number">2020</span>)   <span class="comment"># 固定种子</span></div><div class="line">np.random.shuffle(random_order)</div><div class="line"></div><div class="line"><span class="comment"># 4:1 划分训练集和测试集</span></div><div class="line">input_ids_train = np.array([input_ids[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[:int(len(input_ids)*<span class="number">0.8</span>)]])</div><div class="line">input_types_train = np.array([input_types[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[:int(len(input_ids)*<span class="number">0.8</span>)]])</div><div class="line">input_masks_train = np.array([input_masks[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[:int(len(input_ids)*<span class="number">0.8</span>)]])</div><div class="line">y_train = np.array([label[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[:int(len(input_ids) * <span class="number">0.8</span>)]])</div><div class="line">print(input_ids_train.shape, input_types_train.shape, input_masks_train.shape, y_train.shape)</div><div class="line"></div><div class="line">input_ids_test = np.array([input_ids[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[int(len(input_ids)*<span class="number">0.8</span>):]])</div><div class="line">input_types_test = np.array([input_types[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[int(len(input_ids)*<span class="number">0.8</span>):]])</div><div class="line">input_masks_test = np.array([input_masks[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[int(len(input_ids)*<span class="number">0.8</span>):]])</div><div class="line">y_test = np.array([label[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[int(len(input_ids) * <span class="number">0.8</span>):]])</div><div class="line">print(input_ids_test.shape, input_types_test.shape, input_masks_test.shape, y_test.shape)</div><div class="line"></div><div class="line">BATCH_SIZE = <span class="number">64</span></div><div class="line">train_data = TensorDataset(torch.LongTensor(input_ids_train), </div><div class="line">                           torch.LongTensor(input_types_train), </div><div class="line">                           torch.LongTensor(input_masks_train), </div><div class="line">                           torch.LongTensor(y_train))</div><div class="line">train_sampler = RandomSampler(train_data)  </div><div class="line">train_loader = DataLoader(train_data, sampler=train_sampler, batch_size=BATCH_SIZE)</div><div class="line">test_data = TensorDataset(torch.LongTensor(input_ids_test), </div><div class="line">                          torch.LongTensor(input_types_test), </div><div class="line">                          torch.LongTensor(input_masks_test),</div><div class="line">                          torch.LongTensor(y_test))</div><div class="line">test_sampler = SequentialSampler(test_data)</div><div class="line">test_loader = DataLoader(test_data, sampler=test_sampler, batch_size=BATCH_SIZE)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(nn.Module)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(Model, self).__init__()</div><div class="line">        self.bert = BertModel.from_pretrained(bert_path)  <span class="comment"># /bert_pretrain/</span></div><div class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> self.bert.parameters():</div><div class="line">            param.requires_grad = <span class="keyword">True</span>  <span class="comment"># 每个参数都要 求梯度</span></div><div class="line">        self.fc = nn.Linear(<span class="number">768</span>, <span class="number">6</span>)   <span class="comment"># 768 -&gt; 6</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span> <span class="comment"># (ids, seq_len, mask)</span></div><div class="line">        context = x[<span class="number">0</span>]  <span class="comment"># 输入的句子   </span></div><div class="line">        types = x[<span class="number">1</span>]</div><div class="line">        mask = x[<span class="number">2</span>]  <span class="comment"># 对padding部分进行mask，和句子相同size，padding部分用0表示，如：[1, 1, 1, 1, 0, 0]</span></div><div class="line">        _, pooled = self.bert(context, token_type_ids=types, attention_mask=mask)</div><div class="line">        <span class="comment"># print(_.shape, pooled.shape) # torch.Size([128, 32, 768]) torch.Size([128, 768])</span></div><div class="line">        <span class="comment"># print(_[0,0] == pooled[0]) # False 注意是不一样的 pooled再加了一层dense和activation</span></div><div class="line">        out = self.fc(pooled)   <span class="comment"># 得到6分类</span></div><div class="line">        <span class="keyword">return</span> out</div><div class="line"></div><div class="line">DEVICE = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</div><div class="line">model = Model().to(DEVICE)</div><div class="line">print(model) </div><div class="line"></div><div class="line"><span class="comment"># param_optimizer = list(model.named_parameters())  # 模型参数名字列表</span></div><div class="line"><span class="comment"># no_decay = ['bias', 'LayerNorm.bias', 'LayerNorm.weight']</span></div><div class="line"><span class="comment"># optimizer_grouped_parameters = [</span></div><div class="line"><span class="comment">#     &#123;'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01&#125;,</span></div><div class="line"><span class="comment">#     &#123;'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)], 'weight_decay': 0.0&#125;]</span></div><div class="line">optimizer = torch.optim.Adam(model.parameters(), lr=<span class="number">2e-5</span>)</div><div class="line">NUM_EPOCHS = <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(model, device, train_loader, optimizer, epoch)</span>:</span>   <span class="comment"># 训练模型</span></div><div class="line">    model.train()</div><div class="line">    best_acc = <span class="number">0.0</span> </div><div class="line">    <span class="keyword">for</span> batch_idx, (x1, x2, x3, y) <span class="keyword">in</span> enumerate(train_loader):</div><div class="line">        start_time = time.time()</div><div class="line">        x1, x2, x3, y = x1.to(device), x2.to(device), x3.to(device), y.to(device)</div><div class="line">        y_pred = model([x1, x2, x3])  <span class="comment"># 得到预测结果</span></div><div class="line">        optimizer.zero_grad()             <span class="comment"># 梯度清零</span></div><div class="line">        loss = F.cross_entropy(y_pred, y.squeeze())  <span class="comment"># 得到loss</span></div><div class="line">        loss.backward()</div><div class="line">        optimizer.step()</div><div class="line">        <span class="keyword">if</span>(batch_idx + <span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:    <span class="comment"># 打印loss</span></div><div class="line">            print(<span class="string">'Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.2f&#125;%)]\tLoss: &#123;:.6f&#125;'</span>.format(epoch, (batch_idx+<span class="number">1</span>) * len(x1), </div><div class="line">                                                                           len(train_loader.dataset),</div><div class="line">                                                                           <span class="number">100.</span> * batch_idx / len(train_loader), </div><div class="line">                                                                           loss.item()))  <span class="comment"># 记得为loss.item()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(model, device, test_loader)</span>:</span>    <span class="comment"># 测试模型, 得到测试集评估结果</span></div><div class="line">    model.eval()</div><div class="line">    test_loss = <span class="number">0.0</span> </div><div class="line">    acc = <span class="number">0</span> </div><div class="line">    <span class="keyword">for</span> batch_idx, (x1, x2, x3, y) <span class="keyword">in</span> enumerate(test_loader):</div><div class="line">        x1, x2, x3, y = x1.to(device), x2.to(device), x3.to(device), y.to(device)</div><div class="line">        <span class="keyword">with</span> torch.no_grad():</div><div class="line">            y_ = model([x1,x2,x3])</div><div class="line">        test_loss += F.cross_entropy(y_, y.squeeze())</div><div class="line">        pred = y_.max(<span class="number">-1</span>, keepdim=<span class="keyword">True</span>)[<span class="number">1</span>]   <span class="comment"># .max(): 2输出，分别为最大值和最大值的index</span></div><div class="line">        acc += pred.eq(y.view_as(pred)).sum().item()    <span class="comment"># 记得加item()</span></div><div class="line">    test_loss /= len(test_loader)</div><div class="line">    print(<span class="string">'\nTest set: Average loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;/&#123;&#125; (&#123;:.2f&#125;%)'</span>.format(</div><div class="line">          test_loss, acc, len(test_loader.dataset),</div><div class="line">          <span class="number">100.</span> * acc / len(test_loader.dataset)))</div><div class="line">    <span class="keyword">return</span> acc / len(test_loader.dataset)</div><div class="line"></div><div class="line">best_acc = <span class="number">0.0</span> </div><div class="line">PATH = <span class="string">'roberta_model.pth'</span>  <span class="comment"># 定义模型保存路径</span></div><div class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">1</span>, NUM_EPOCHS+<span class="number">1</span>):  <span class="comment"># 1个epoch</span></div><div class="line">    train(model, DEVICE, train_loader, optimizer, epoch)</div><div class="line">    acc = test(model, DEVICE, test_loader)</div><div class="line">    <span class="keyword">if</span> best_acc &lt; acc: </div><div class="line">        best_acc = acc </div><div class="line">        torch.save(model.state_dict(), PATH)  <span class="comment"># 保存最优模型</span></div><div class="line">    print(<span class="string">"acc is: &#123;:.4f&#125;, best acc is &#123;:.4f&#125;\n"</span>.format(acc, best_acc))</div><div class="line"></div><div class="line">model.load_state_dict(torch.load(PATH))</div><div class="line">acc = test(model, DEVICE, test_loader)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍文本相似度计算的各种方法，可以广泛应用在基于问答对匹配的问答系统中。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="BERT" scheme="https://luxuantao.github.io/tags/BERT/"/>
    
      <category term="pytorch" scheme="https://luxuantao.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>BERT文本分类</title>
    <link href="https://luxuantao.github.io/2020/07/13/BERT%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/"/>
    <id>https://luxuantao.github.io/2020/07/13/BERT文本分类/</id>
    <published>2020-07-13T09:36:14.000Z</published>
    <updated>2020-07-15T08:39:55.912Z</updated>
    
    <content type="html"><![CDATA[<p>使用Huggingface中预训练的BERT模型进行文本分类。</p><a id="more"></a><p>本文使用的是<strong>RoBERTa-wwm-ext</strong>，模型导入方式参见<a href="https://github.com/ymcui/Chinese-BERT-wwm。由于做了全词遮罩（Whole" target="_blank" rel="external">https://github.com/ymcui/Chinese-BERT-wwm。由于做了全词遮罩（Whole</a> Word Masking），效果相较于裸的BERT会有所提升。</p><p>数据集使用THUCNews中的train.txt：<a href="https://github.com/649453932/Bert-Chinese-Text-Classification-Pytorch/tree/master/THUCNews/data，十分类问题，示例如下：" target="_blank" rel="external">https://github.com/649453932/Bert-Chinese-Text-Classification-Pytorch/tree/master/THUCNews/data，十分类问题，示例如下：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">中华女子学院：本科层次仅1专业招男生3</div><div class="line">两天价网站背后重重迷雾：做个网站究竟要多少钱4</div><div class="line">东5环海棠公社230-290平2居准现房98折优惠1</div><div class="line">卡佩罗：告诉你德国脚生猛的原因 不希望英德战踢点球7</div><div class="line">82岁老太为学生做饭扫地44年获授港大荣誉院士5</div><div class="line">记者回访地震中可乐男孩：将受邀赴美国参观5</div><div class="line">冯德伦徐若�隔空传情 默认其是女友9</div><div class="line">传郭晶晶欲落户香港战伦敦奥运 装修别墅当婚房1</div><div class="line">《赤壁OL》攻城战诸侯战硝烟又起8</div><div class="line">“手机钱包”亮相科博会4</div></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> torch</div><div class="line"><span class="keyword">import</span> time </div><div class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</div><div class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F </div><div class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> BertModel, BertTokenizer</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </div><div class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm </div><div class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"></div><div class="line">os.environ[<span class="string">"CUDA_VISIBLE_DEVICES"</span>] = <span class="string">"1"</span></div><div class="line"></div><div class="line">path = <span class="string">"./"</span></div><div class="line">bert_path = <span class="string">"hfl/chinese-roberta-wwm-ext"</span></div><div class="line">tokenizer = BertTokenizer(vocab_file=<span class="string">"vocab.txt"</span>)  <span class="comment"># 初始化分词器</span></div><div class="line"></div><div class="line">input_ids = []     <span class="comment"># input char ids</span></div><div class="line">input_types = []   <span class="comment"># segment ids</span></div><div class="line">input_masks = []   <span class="comment"># attention mask</span></div><div class="line">label = []         <span class="comment"># 标签</span></div><div class="line">pad_size = <span class="number">32</span>      <span class="comment"># 也称为 max_len (前期统计分析，文本长度最大值为38，取32即可覆盖99%)</span></div><div class="line"> </div><div class="line"><span class="keyword">with</span> open(path + <span class="string">"train.txt"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> i, l <span class="keyword">in</span> tqdm(enumerate(f)): </div><div class="line">        x1, y = l.strip().split(<span class="string">'\t'</span>)</div><div class="line">        x1 = tokenizer.tokenize(x1)</div><div class="line">        tokens = [<span class="string">"[CLS]"</span>] + x1 + [<span class="string">"[SEP]"</span>]</div><div class="line">        </div><div class="line">        <span class="comment"># 得到input_id, seg_id, att_mask</span></div><div class="line">        ids = tokenizer.convert_tokens_to_ids(tokens)</div><div class="line">        types = [<span class="number">0</span>] * len(ids)</div><div class="line">        masks = [<span class="number">1</span>] * len(ids)</div><div class="line">        <span class="comment"># 短则补齐，长则切断</span></div><div class="line">        <span class="keyword">if</span> len(ids) &lt; pad_size:</div><div class="line">            types = types + [<span class="number">1</span>] * (pad_size - len(ids))  <span class="comment"># mask部分 segment置为1</span></div><div class="line">            masks = masks + [<span class="number">0</span>] * (pad_size - len(ids))</div><div class="line">            ids = ids + [<span class="number">0</span>] * (pad_size - len(ids))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            types = types[:pad_size]</div><div class="line">            masks = masks[:pad_size]</div><div class="line">            ids = ids[:pad_size]</div><div class="line">        input_ids.append(ids)</div><div class="line">        input_types.append(types)</div><div class="line">        input_masks.append(masks)</div><div class="line">        <span class="keyword">assert</span> len(ids) == len(masks) == len(types) == pad_size</div><div class="line">        label.append([int(y)])</div><div class="line"></div><div class="line"><span class="comment"># 随机打乱索引</span></div><div class="line">random_order = list(range(len(input_ids)))</div><div class="line">np.random.seed(<span class="number">2020</span>)   <span class="comment"># 固定种子</span></div><div class="line">np.random.shuffle(random_order)</div><div class="line"></div><div class="line"><span class="comment"># 4:1 划分训练集和测试集</span></div><div class="line">input_ids_train = np.array([input_ids[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[:int(len(input_ids)*<span class="number">0.8</span>)]])</div><div class="line">input_types_train = np.array([input_types[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[:int(len(input_ids)*<span class="number">0.8</span>)]])</div><div class="line">input_masks_train = np.array([input_masks[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[:int(len(input_ids)*<span class="number">0.8</span>)]])</div><div class="line">y_train = np.array([label[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[:int(len(input_ids) * <span class="number">0.8</span>)]])</div><div class="line">print(input_ids_train.shape, input_types_train.shape, input_masks_train.shape, y_train.shape)</div><div class="line"></div><div class="line">input_ids_test = np.array([input_ids[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[int(len(input_ids)*<span class="number">0.8</span>):]])</div><div class="line">input_types_test = np.array([input_types[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[int(len(input_ids)*<span class="number">0.8</span>):]])</div><div class="line">input_masks_test = np.array([input_masks[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[int(len(input_ids)*<span class="number">0.8</span>):]])</div><div class="line">y_test = np.array([label[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_order[int(len(input_ids) * <span class="number">0.8</span>):]])</div><div class="line">print(input_ids_test.shape, input_types_test.shape, input_masks_test.shape, y_test.shape)</div><div class="line"></div><div class="line">BATCH_SIZE = <span class="number">128</span></div><div class="line">train_data = TensorDataset(torch.LongTensor(input_ids_train), </div><div class="line">                           torch.LongTensor(input_types_train), </div><div class="line">                           torch.LongTensor(input_masks_train), </div><div class="line">                           torch.LongTensor(y_train))</div><div class="line">train_sampler = RandomSampler(train_data)  </div><div class="line">train_loader = DataLoader(train_data, sampler=train_sampler, batch_size=BATCH_SIZE)</div><div class="line"></div><div class="line">test_data = TensorDataset(torch.LongTensor(input_ids_test), </div><div class="line">                          torch.LongTensor(input_types_test), </div><div class="line">                          torch.LongTensor(input_masks_test),</div><div class="line">                          torch.LongTensor(y_test))</div><div class="line">test_sampler = SequentialSampler(test_data)</div><div class="line">test_loader = DataLoader(test_data, sampler=test_sampler, batch_size=BATCH_SIZE)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(nn.Module)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(Model, self).__init__()</div><div class="line">        self.bert = BertModel.from_pretrained(bert_path)  <span class="comment"># /bert_pretrain/</span></div><div class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> self.bert.parameters():</div><div class="line">            param.requires_grad = <span class="keyword">True</span>  <span class="comment"># 每个参数都要 求梯度</span></div><div class="line">        self.fc = nn.Linear(<span class="number">768</span>, <span class="number">10</span>)   <span class="comment"># 768 -&gt; 10</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span> <span class="comment"># (ids, seq_len, mask)</span></div><div class="line">        context = x[<span class="number">0</span>]  <span class="comment"># 输入的句子   </span></div><div class="line">        types = x[<span class="number">1</span>]</div><div class="line">        mask = x[<span class="number">2</span>]  <span class="comment"># 对padding部分进行mask，和句子相同size，padding部分用0表示，如：[1, 1, 1, 1, 0, 0]</span></div><div class="line">        _, pooled = self.bert(context, token_type_ids=types, attention_mask=mask)</div><div class="line">        <span class="comment"># print(_.shape, pooled.shape) # torch.Size([128, 32, 768]) torch.Size([128, 768])</span></div><div class="line">        <span class="comment"># print(_[0,0] == pooled[0]) # False 注意是不一样的 pooled再加了一层dense和activation</span></div><div class="line">        out = self.fc(pooled)   <span class="comment"># 得到10分类</span></div><div class="line">        <span class="keyword">return</span> out</div><div class="line"></div><div class="line">DEVICE = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</div><div class="line">model = Model().to(DEVICE)</div><div class="line">print(model) </div><div class="line"></div><div class="line"><span class="comment"># param_optimizer = list(model.named_parameters())  # 模型参数名字列表</span></div><div class="line"><span class="comment"># no_decay = ['bias', 'LayerNorm.bias', 'LayerNorm.weight']</span></div><div class="line"><span class="comment"># optimizer_grouped_parameters = [</span></div><div class="line"><span class="comment">#     &#123;'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01&#125;,</span></div><div class="line"><span class="comment">#     &#123;'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)], 'weight_decay': 0.0&#125;]</span></div><div class="line"></div><div class="line">optimizer = torch.optim.Adam(model.parameters(), lr=<span class="number">2e-5</span>)</div><div class="line"></div><div class="line">NUM_EPOCHS = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(model, device, train_loader, optimizer, epoch)</span>:</span>   <span class="comment"># 训练模型</span></div><div class="line">    model.train()</div><div class="line">    best_acc = <span class="number">0.0</span> </div><div class="line">    <span class="keyword">for</span> batch_idx, (x1, x2, x3, y) <span class="keyword">in</span> enumerate(train_loader):</div><div class="line">        start_time = time.time()</div><div class="line">        x1, x2, x3, y = x1.to(device), x2.to(device), x3.to(device), y.to(device)</div><div class="line">        y_pred = model([x1, x2, x3])  <span class="comment"># 得到预测结果</span></div><div class="line">        optimizer.zero_grad()             <span class="comment"># 梯度清零</span></div><div class="line">        loss = F.cross_entropy(y_pred, y.squeeze())  <span class="comment"># 得到loss</span></div><div class="line">        loss.backward()</div><div class="line">        optimizer.step()</div><div class="line">        <span class="keyword">if</span>(batch_idx + <span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:    <span class="comment"># 打印loss</span></div><div class="line">            print(<span class="string">'Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.2f&#125;%)]\tLoss: &#123;:.6f&#125;'</span>.format(epoch, (batch_idx+<span class="number">1</span>) * len(x1), </div><div class="line">                                                                           len(train_loader.dataset),</div><div class="line">                                                                           <span class="number">100.</span> * batch_idx / len(train_loader), </div><div class="line">                                                                           loss.item()))  <span class="comment"># 记得为loss.item()</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(model, device, test_loader)</span>:</span>    <span class="comment"># 测试模型, 得到测试集评估结果</span></div><div class="line">    model.eval()</div><div class="line">    test_loss = <span class="number">0.0</span> </div><div class="line">    acc = <span class="number">0</span> </div><div class="line">    <span class="keyword">for</span> batch_idx, (x1, x2, x3, y) <span class="keyword">in</span> enumerate(test_loader):</div><div class="line">        x1, x2, x3, y = x1.to(device), x2.to(device), x3.to(device), y.to(device)</div><div class="line">        <span class="keyword">with</span> torch.no_grad():</div><div class="line">            y_ = model([x1,x2,x3])</div><div class="line">        test_loss += F.cross_entropy(y_, y.squeeze())</div><div class="line">        pred = y_.max(<span class="number">-1</span>, keepdim=<span class="keyword">True</span>)[<span class="number">1</span>]   <span class="comment"># .max(): 2输出，分别为最大值和最大值的index</span></div><div class="line">        acc += pred.eq(y.view_as(pred)).sum().item()    <span class="comment"># 记得加item()</span></div><div class="line">    test_loss /= len(test_loader)</div><div class="line">    print(<span class="string">'\nTest set: Average loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;/&#123;&#125; (&#123;:.2f&#125;%)'</span>.format(</div><div class="line">          test_loss, acc, len(test_loader.dataset),</div><div class="line">          <span class="number">100.</span> * acc / len(test_loader.dataset)))</div><div class="line">    <span class="keyword">return</span> acc / len(test_loader.dataset)</div><div class="line"></div><div class="line">best_acc = <span class="number">0.0</span> </div><div class="line">PATH = <span class="string">'roberta_model.pth'</span>  <span class="comment"># 定义模型保存路径</span></div><div class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">1</span>, NUM_EPOCHS+<span class="number">1</span>):  <span class="comment"># 3个epoch</span></div><div class="line">    train(model, DEVICE, train_loader, optimizer, epoch)</div><div class="line">    acc = test(model, DEVICE, test_loader)</div><div class="line">    <span class="keyword">if</span> best_acc &lt; acc: </div><div class="line">        best_acc = acc </div><div class="line">        torch.save(model.state_dict(), PATH)  <span class="comment"># 保存最优模型</span></div><div class="line">    print(<span class="string">"acc is: &#123;:.4f&#125;, best acc is &#123;:.4f&#125;\n"</span>.format(acc, best_acc))</div><div class="line"></div><div class="line">model.load_state_dict(torch.load(PATH))</div><div class="line">acc = test(model, DEVICE, test_loader)</div></pre></td></tr></table></figure><p>在2080Ti上，train一个epoch差不多三分钟，train一个epoch后，准确率已经有94%以上了。</p><p><code>_, pooled = self.bert(context, token_type_ids=types, attention_mask=mask)</code> 这行代码中有几个需要注意的点：</p><ul><li><code>context</code> 形如：[101, …, 102, 0, 0, 0, …, 0]</li><li><code>token_type_ids</code> 形如：[0, 0, 0, …, 1, 1, 1, …, 1]</li><li><code>attention_mask</code> 形如：[1, 1, 1, …, 0, 0, 0, …, 0]</li><li>函数返回的两个结果size分别为[batch_size, max_seq_len, hidden_size=768]和[batch_size, hidden<em>size=768]，前者是最后一层所有的hidden向量，后者是CLS的hidden向量经过一层dense和activation后得到的，所以特别注意：</em>[:, 0, :]和pooled[:, :]是不一样的。这部分源码如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BertPooler</span><span class="params">(nn.Module)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, config)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.dense = nn.Linear(config.hidden_size, config.hidden_size)</div><div class="line">        self.activation = nn.Tanh()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, hidden_states)</span>:</span></div><div class="line">        <span class="comment"># We "pool" the model by simply taking the hidden state corresponding</span></div><div class="line">        <span class="comment"># to the first token.</span></div><div class="line">        first_token_tensor = hidden_states[:, <span class="number">0</span>]</div><div class="line">        pooled_output = self.dense(first_token_tensor)</div><div class="line">        pooled_output = self.activation(pooled_output)</div><div class="line">        <span class="keyword">return</span> pooled_output</div></pre></td></tr></table></figure><p>References:</p><ul><li><a href="https://zhuanlan.zhihu.com/p/120315111" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/120315111</a></li><li><a href="https://zhuanlan.zhihu.com/p/100335816" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/100335816</a></li><li><a href="https://zhuanlan.zhihu.com/p/112655246" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/112655246</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Huggingface中预训练的BERT模型进行文本分类。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="BERT" scheme="https://luxuantao.github.io/tags/BERT/"/>
    
      <category term="pytorch" scheme="https://luxuantao.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>问句类型分类器</title>
    <link href="https://luxuantao.github.io/2020/06/19/%E9%97%AE%E5%8F%A5%E7%B1%BB%E5%9E%8B%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>https://luxuantao.github.io/2020/06/19/问句类型分类器/</id>
    <published>2020-06-19T10:12:55.000Z</published>
    <updated>2020-06-19T10:28:36.284Z</updated>
    
    <content type="html"><![CDATA[<p>到目前为止，复旦的不倒翁问答系统只能回答事实类问题，不具备闲聊功能，为了真正做到“不倒问答”，我使用 <code>fasttext</code> 做了一个问句类型分类器，用来判断是事实类问题还是闲聊问题，效果好的出奇。</p><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>闲聊部分的数据集使用的是青云数据集，这个数据集很脏（里面有很多不文明的话），大概长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">南京在哪里  在这里了</div><div class="line">咋死???红烧还是爆炒  哦了哦了哦了,咱聊点别的吧</div><div class="line">你个小骚货，哥哥的巴操你爽不爽？  不要这样说嘛！很不文明哦</div><div class="line">额麻麻怎么会有那玩意儿  无法理解您的话，获取帮助请发送 help</div><div class="line">拿尿冲一冲  今天这天气很适合聊天的说</div><div class="line">那重点是什么  好话不分轻重！</div><div class="line">章子怡新宠  夜曲小三</div></pre></td></tr></table></figure><p>前面是问题，后面是答案，这里我们只需要问题。</p><p>事实类问题是从学长们的遗留代码中找到的，也不知道是哪来的（咱也不敢问），大概长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">许嵩哪里人！</div><div class="line">预期结果导向法的摘要主要写了什么？</div><div class="line">功夫的产品类型有哪些?</div><div class="line">有谁知道鞭打快牛这个词语怎样用</div><div class="line">id设计的专业代码是多少?</div><div class="line">西奈半岛属于哪个国家</div><div class="line">西门社区的交通位置在哪？</div></pre></td></tr></table></figure><p>好了，接下来要把数据处理成 <code>fasttext</code> 想要的样子，这里我用0表示闲聊，1表示事实类问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">__label__0 , 不要 每次 都 是 这句 撒</div><div class="line">__label__0 , 不要 你 抱</div><div class="line">__label__1 , 女人 左手 无名指 戴 戒指 代表 什么</div><div class="line">__label__1 , 请问 师范生 技能 适应 于 哪些 人群</div><div class="line">__label__1 , 请问 连连看 5 是 什么 语言 的 游戏</div><div class="line">__label__0 , 充满 了 我 的 想像</div><div class="line">__label__0 , 算 算数</div><div class="line">__label__1 , 昀 朵 是 谁 的 粉丝</div><div class="line">__label__1 , 根据 声波 测距 原理 开发 出 的 水下 探测器 是</div><div class="line">__label__1 , 张 老庄 村 对 战役 有 啥 影响</div></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> jieba </div><div class="line"></div><div class="line"></div><div class="line">data = []</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'question_corpus.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</div><div class="line">line = line.strip(<span class="string">' ?!,.？！，。\n\t\r'</span>)</div><div class="line">data.append((<span class="string">' '</span>.join(jieba.lcut(line)), <span class="number">1</span>))</div><div class="line"><span class="comment"># re = '' #是否只保留中文</span></div><div class="line"><span class="comment"># for ch in line:</span></div><div class="line"><span class="comment"># if '\u4e00' &lt;= ch &lt;= '\u9fff':</span></div><div class="line"><span class="comment"># re += ch</span></div><div class="line"><span class="comment"># if re:</span></div><div class="line"><span class="comment"># data.append((re, 1))</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'qingyun.tsv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</div><div class="line">line = line.split(<span class="string">'\t'</span>)[<span class="number">0</span>].strip(<span class="string">' ?!,.？！，。\n\t\r'</span>)</div><div class="line">data.append((<span class="string">' '</span>.join(jieba.lcut(line)), <span class="number">0</span>))</div><div class="line"><span class="comment"># re = ''</span></div><div class="line"><span class="comment"># for ch in line:</span></div><div class="line"><span class="comment"># if '\u4e00' &lt;= ch &lt;= '\u9fff':</span></div><div class="line"><span class="comment"># re += ch</span></div><div class="line"><span class="comment"># if re:</span></div><div class="line"><span class="comment"># data.append((re, 0))</span></div><div class="line"></div><div class="line">random.shuffle(data)</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'text_classification_data.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="keyword">for</span> each <span class="keyword">in</span> data:</div><div class="line">text, label = each</div><div class="line">f.write(text)</div><div class="line">f.write(<span class="string">'\t'</span>)</div><div class="line">f.write(str(label))</div><div class="line">f.write(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'text_classification_data.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="keyword">with</span> open(<span class="string">'text_classification_data_train.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f1:</div><div class="line"><span class="keyword">with</span> open(<span class="string">'text_classification_data_test.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f2:</div><div class="line">data = f.readlines()</div><div class="line">length = len(data)</div><div class="line">train_length = int(length * <span class="number">0.8</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(train_length):</div><div class="line">text, label = data[i].split(<span class="string">'\t'</span>)</div><div class="line">f1.write(<span class="string">f'__label__<span class="subst">&#123;label[:<span class="number">-1</span>]&#125;</span> , <span class="subst">&#123;text&#125;</span>\n'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(train_length, length):</div><div class="line">text, label = data[i].split(<span class="string">'\t'</span>)</div><div class="line">f2.write(<span class="string">f'__label__<span class="subst">&#123;label[:<span class="number">-1</span>]&#125;</span> , <span class="subst">&#123;text&#125;</span>\n'</span>)</div></pre></td></tr></table></figure><h1 id="分类器"><a href="#分类器" class="headerlink" title="分类器"></a>分类器</h1><p>这里使用的是 <code>fasttext</code> 进行文本分类，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> fasttext.FastText <span class="keyword">as</span> fasttext</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> jieba </div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">(ipt=None, opt=None, model=<span class="string">''</span>, dim=<span class="number">100</span>, epoch=<span class="number">5</span>, lr=<span class="number">0.1</span>, loss=<span class="string">'softmax'</span>)</span>:</span></div><div class="line">    np.set_printoptions(suppress=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">if</span> os.path.isfile(model):</div><div class="line">        classifier = fasttext.load_model(model)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        classifier = fasttext.train_supervised(ipt, label=<span class="string">'__label__'</span>, </div><div class="line">          minCount=<span class="number">1</span>, dim=dim, epoch=epoch, lr=lr, wordNgrams=<span class="number">2</span>, loss=loss)</div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">          训练一个监督模型, 返回一个模型对象</span></div><div class="line"><span class="string">          @param input:           训练数据文件路径</span></div><div class="line"><span class="string">          @param lr:              学习率</span></div><div class="line"><span class="string">          @param dim:             向量维度</span></div><div class="line"><span class="string">          @param ws:              cbow模型时使用</span></div><div class="line"><span class="string">          @param epoch:           次数</span></div><div class="line"><span class="string">          @param minCount:        词频阈值, 小于该值在初始化时会过滤掉</span></div><div class="line"><span class="string">          @param minCountLabel:   类别阈值，类别小于该值初始化时会过滤掉</span></div><div class="line"><span class="string">          @param minn:            构造subword时最小char个数</span></div><div class="line"><span class="string">          @param maxn:            构造subword时最大char个数</span></div><div class="line"><span class="string">          @param neg:             负采样</span></div><div class="line"><span class="string">          @param wordNgrams:      n-gram个数</span></div><div class="line"><span class="string">          @param loss:            损失函数类型, softmax, ns: 负采样, hs: 分层softmax</span></div><div class="line"><span class="string">          @param bucket:          词扩充大小, [A, B]: A语料中包含的词向量, B不在语料中的词向量</span></div><div class="line"><span class="string">          @param thread:          线程个数, 每个线程处理输入数据的一段, 0号线程负责loss输出</span></div><div class="line"><span class="string">          @param lrUpdateRate:    学习率更新</span></div><div class="line"><span class="string">          @param t:               负采样阈值</span></div><div class="line"><span class="string">          @param label:           类别前缀</span></div><div class="line"><span class="string">          @param verbose:         ??</span></div><div class="line"><span class="string">          @param pretrainedVectors: 预训练的词向量文件路径, 如果word出现在文件夹中初始化不再随机</span></div><div class="line"><span class="string">          @return model object</span></div><div class="line"><span class="string">        """</span></div><div class="line">        classifier.save_model(opt)</div><div class="line">    <span class="keyword">return</span> classifier</div><div class="line"></div><div class="line">dim = <span class="number">50</span></div><div class="line">lr = <span class="number">0.5</span></div><div class="line">epoch = <span class="number">5</span></div><div class="line">model = <span class="string">f'data_dim<span class="subst">&#123;str(dim)&#125;</span>_lr0<span class="subst">&#123;str(lr)&#125;</span>_iter<span class="subst">&#123;str(epoch)&#125;</span>.model'</span></div><div class="line"></div><div class="line">classifier = train_model(ipt=<span class="string">'text_classification_data_train.txt'</span>,</div><div class="line">                         opt=model,</div><div class="line">                         model=model,</div><div class="line">                         dim=dim, epoch=epoch, lr=lr</div><div class="line">                         )</div><div class="line"></div><div class="line"><span class="comment"># 整体的结果为(测试数据量，precision，recall)：</span></div><div class="line">result = classifier.test(<span class="string">'text_classification_data_test.txt'</span>)</div><div class="line">print(result)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        s = input(<span class="string">'请输入问句:'</span>)</div><div class="line">        s = s.strip(<span class="string">' ?!,.？！，。\n\t\r'</span>)</div><div class="line">        print(classifier.predict(<span class="string">' '</span>.join(jieba.lcut(s))))</div></pre></td></tr></table></figure><p>训练的速度出奇的快，基本上都在半分钟以内，而且准确度和召回率都在98%以上。</p><p>唯一的缺点是保存下来的模型很大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到目前为止，复旦的不倒翁问答系统只能回答事实类问题，不具备闲聊功能，为了真正做到“不倒问答”，我使用 &lt;code&gt;fasttext&lt;/code&gt; 做了一个问句类型分类器，用来判断是事实类问题还是闲聊问题，效果好的出奇。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="问答系统" scheme="https://luxuantao.github.io/tags/%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>问答系统调研</title>
    <link href="https://luxuantao.github.io/2020/06/09/%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%A0%94/"/>
    <id>https://luxuantao.github.io/2020/06/09/问答系统调研/</id>
    <published>2020-06-09T08:58:13.000Z</published>
    <updated>2020-06-09T09:07:01.845Z</updated>
    
    <content type="html"><![CDATA[<p>在完成毕业论文（设计）期间的调研工作，主要研究了几个经典的问答系统和机器阅读理解模型。</p><a id="more"></a><h1 id="Stanford-Attentive-Reader"><a href="#Stanford-Attentive-Reader" class="headerlink" title="Stanford Attentive Reader"></a>Stanford Attentive Reader</h1><p>出自论文：<a href="https://www.researchgate.net/publication/306094228_A_Thorough_Examination_of_the_CNNDaily_Mail_Reading_Comprehension_Task" target="_blank" rel="external">A Thorough Examination of the CNN/Daily Mail Reading Comprehension Task</a></p><p>解决的问题：给出一个问题和一段文章，找出答案的位置</p><p>思路：</p><ol><li>利用Bidirectional LSTM提取问题的特征向量 $q$ ，取前向的最后一个隐层向量（维度$ h<em>1 $）和后向的最后一个隐层向量（维度$ h</em>1 $），然后做concat，所以q的维度是$ 2h*1 $</li><li>对Passage中的每个单词进行Bidirectional LSTM，得到每个单词的特征向量 $\widetilde{p}_i$，维度是$ 2h*1 $</li><li>对每个单词对应的特征向量与问题的特征向量进行Attention操作，这里用的是双线性函数$\alpha_{i}=softmax(q^TW_s\widetilde{p}_i)$），表示答案开头在各个位置的可能性大小；同样的公式，把矩阵 $W_s$ 换成了另一个矩阵 $W_e$ ，再算一个$\widetilde{a}_i$，表示答案结尾在各个位置的可能性大小</li><li>损失函数$L=-\sum{logP^{start}(a<em>{start})}-\sum{logP^{end}(a</em>{end})}$ ，其实这里开始就会有不同的版本，这里是按照CS224n课程中的理解</li></ol><h1 id="DrQA"><a href="#DrQA" class="headerlink" title="DrQA"></a>DrQA</h1><p>出自论文：<a href="https://arxiv.org/abs/1704.00051" target="_blank" rel="external">Reading Wikipedia to Answer Open-Domain Questions</a></p><p>解决的问题：开放域问答，不需要预先给出段落</p><p>思路：</p><p>模型包含两个部分，分别是<strong>Document Retriever</strong>和<strong>Document Reader</strong>，分别用于从广大的数据来源中提取与问题相关的文章，根据提取的文章找到问题的答案，完成阅读理解工作</p><ul><li>Document Retriever<br>只用了<strong>信息检索</strong>的手段，没有用到机器学习，与Document Reader完全分离<ol><li>对语料单词进行清洗，包括去停词等过滤操作</li><li>统计所有的bigram</li><li>将这些bigram进行murmur3 hashing得到每个bigram的id（为了减少存储空间）</li><li>计算每个bigram的TF-IDF向量</li><li>将问题的TF-IDF向量与文章的TF-IDF向量相乘取排名前五的文章</li></ol></li><li><p>Document Reader</p><ol><li><p>表示文章的输入向量是精心改良过的，包括：</p><ul><li>word embedding：使用预训练的300维Glove词向量，对出现频率最高的1000个单词进行fine-tune，比如常见的who, when, how, what, where</li><li>Exact match：引入了三个二值特征，分别表示该单词是否对应于问题中的某一个单词，是否是小写原始形式，是否是词根形式</li><li>Token features：词性(POS)、命名实体(NER) 以及归一化的词频(TF)，三者拼接组成一个向量</li><li>Aligned question embedding：描述paragraph中每个单词与question中每个单词对齐的embedding，换句话说，这里是用相似度来度量两个单词，并不要求完全一样，相当于软注意力机制，而Exact Match的第一个二值特征则相当于硬注意力机制</li></ul></li><li><p>对文章中的每个单词进行Bidirectional LSTM，得到每个单词的特征向量 $p_i$</p></li><li>表示问句的输入向量没有那么复杂，就是300维Glove词向量</li><li>对问句中的每个单词进行Bidirectional LSTM，得到每个单词的特征向量 $q<em>i$ ，然后求加权平均 $q=\sum\limits</em>{i}{b_iq_i}$ ，其中权重因子 $b_i$ 通过将每个单词的embedding $q_i$ 乘以一个可以学习的权重向量 $w$并经过softmax得到，即 $b_i=\frac{exp(w \cdot q<em>i)}{\sum\limits</em>{j}{exp(w \cdot q_j)}}$</li><li>最后和Stanford Attentive Reader一样，对每个单词对应的特征向量与问题的特征向量进行Attention操作，用双线性函数$\alpha_{i}=softmax(q^TWp<em>i)$），分别计算每个字符成为开始字符和结束字符的概率。在预测的过程中，选择最大的 $P</em>{start}(i) * P_{end}(i\prime)$ ，且要满足 $i\leq i\prime \leq i+15$</li></ol></li></ul><p>文章中还提到，在训练的时候，不光使用了SQuAD数据集，还用到了CuratedTREC、WebQuestions、WikiMovies这三个数据集。与SQuAD不同，这三个数据集只包含问题和答案，没有关联的文档或段落，因此无法用来直接训练Document Reader。作者为解决这个问题使用了远程监督的方法：</p><ol><li>基于数据集中的问题，使用document retriever提取相关性最高的5篇文章。</li><li>对于五篇文章中的所有段落，抛弃不包含与已知答案完全匹配的段落，抛弃小于25个字大于1500个字的段落，若有的段落中包含命名实体，抛弃那些不包含命名实体的段落</li><li>对于留下来的所有段落，从段落中找出包含答案的span，这里是基于word水平的，也就是unigram，首先找到段落中包含答案的完整区间[start, end]，然后基于20 token window，从start向左延展20个word，从end向右延展20个word（要保证左右两边不能溢出，溢出则取边界）得到一个备选小段落</li><li>从备选小段落中找出最有可能的5个小段落，要与问题进行比较。分别对每个小段落统计它的bigram，同时也统计问题的bigram，最后统计每个小段落的bigram与问题的bigram有多少交集，最后对交集求和，求和总数最多的5个小段落为最有可能的段落。</li></ol><h1 id="BiDAF"><a href="#BiDAF" class="headerlink" title="BiDAF"></a>BiDAF</h1><p>出自论文：<a href="https://arxiv.org/abs/1611.01603" target="_blank" rel="external">Bi-Directional Attention Flow For Machine Comprehension</a></p><p>解决的问题：给出一个问题和一段文章，找出答案的位置</p><p>思路：</p><p>该模型的核心创新之处在于 <code>Attention Flow Layer</code> ，提出了双向的<code>attention</code></p><p>假设Context有T个单词，Query有J个单词</p><ol><li>词向量用预训练的glove(维度用d1表示)，字符向量用 <code>1D-CNN</code> 计算（最后得到的向量维度等于你用的卷积核的个数，这里用d2表示，字符向量的作用是可以弥补当训练BiDAF时遇到不在gloVe字典中的单词）</li><li>拼接词向量和字符向量，得到的向量维度用d表示（d=d1+d2），现在我们有了两个矩阵，维度分别为 $d<em>T$ 和 $d</em>J$ ，分别用于表示Context和Query</li><li>通过<code>highway network</code> （<code>highway network</code> 和<code>resnet</code> 很像，它的作者甚至认为何凯明是抄袭了他的思想），用公式表示就是 $y=t\bigodot g(Wx+b)+(1-t)\bigodot x$ ，其中 $\bigodot$ 表示<code>element-wise multiply</code> ，g表示激活函数，t的值本身也是由另一个线性层加一个激活函数算出来，取值范围是0到1。可以认为 <code>highway network</code> 的作用是调整词向量和字符向量的相对比重。这步过后，两个矩阵的维度不变</li><li>单层双向的LSTM。这步过后，两个矩阵的维度分别为 $2d<em>T$ 和 $ 2d</em>J$ ，分别命名为H和U</li><li>接下来的 <code>Attention Flow Layer</code> 是个模型的重点，提出了一个相似度矩阵S，维度是 $T<em>J$ ，表示每个上下文单词和每个问句单词的相似度，S是这么来的：对于上下文a和问句b， $S_{ab}=w^T[a;b;a\bigodot b]$ ，<code>;</code>表示上下拼接，w是可训练的向量，维度是 $6d</em>1$ 。得到S后，可以进行下面的两个过程 <code>Context-to-Query Attention</code> 和 <code>Query-to-Context attention</code></li><li><code>Context-to-Query Attention</code> ： 取出S中的一行 $1<em>J$ ，做softmax，得到的结果即视为权重，与U中的每一列做加权求和，得到一个 $2d</em>1$ 的向量。遍历S中的每一行重复上述动作，得到矩阵 $\check{U}$ ，维度为 $2d*T$</li><li><code>Query-to-Context attention</code> ：和上面的做法并不一样，先取出S中每一行的最大值，得到一个列向量 $T<em>1$ ，做softmax，用矩阵H和这个列向量做矩阵乘法，得到一个 $ 2d</em>1 $ 的向量，然后直接把这个向量拷贝T次，得到矩阵 $\check{H}$ ，维度为 $2d*T$</li><li>这步要把 $H$ ，$\check{H}$ ， $\check{U}$ 组合在一起得到一个大矩阵 $G$ 。是这样： $G_t=\beta (H_t,\check{U}_t, \check{H}_t)$ ，下标t表示列号，其中 $\beta(a,b,c)=[a;b;a\bigodot b;a\bigodot c]$ ，$G$ 的维度是 $8d*T$</li><li>双层双向的LSTM。第一层双向的LSTM过后，得到矩阵M1，维度为 $2d<em>T$ ，第二层双向的LSTM过后，得到矩阵M2，,维度也为 $2d</em>T$</li><li>可以预测答案的开始位置和结束位置了，$p1=softmax(w^T<em>{p1}[G;M1])$ ，$p2=softmax(w^T</em>{p2}[G;M2])$， w维度都是$1<em>10d$ ，p纬度都是$1</em>T$ ，预测的时候取T个值中最大的那个；训练的时候损失函数为$L(\theta)=-\frac{1}{N}\sum\limits<em>i^N{[log(p</em>{y1})+log(p_{y2})]}$ ，其中$y1$ 和$y2$ 表示正确答案</li></ol><h1 id="GoldEn-Retriever"><a href="#GoldEn-Retriever" class="headerlink" title="GoldEn Retriever"></a>GoldEn Retriever</h1><p>出自论文：<a href="https://nlp.stanford.edu/pubs/qi2019answering.pdf" target="_blank" rel="external">Answering Complex Open-domain Questions Through Iterative Query Generation</a></p><p>解决的问题：开放域问答，不需要预先给出段落，问题需要系统进行多步推理才能给出正确答案</p><p>思路：</p><p>该模型的核心创新之处在于，它在每一步都使用先前的IR结果来生成新的自然语言查询，并检索新的证据来回答原始问题，而不是单纯依靠原始问题来检索文章段落，从而实现多跳推理。</p><p>Reference:</p><ol><li><a href="https://towardsdatascience.com/modeling-and-output-layers-in-bidaf-an-illustrated-guide-with-minions-f2e101a10d83" target="_blank" rel="external">https://towardsdatascience.com/modeling-and-output-layers-in-bidaf-an-illustrated-guide-with-minions-f2e101a10d83</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在完成毕业论文（设计）期间的调研工作，主要研究了几个经典的问答系统和机器阅读理解模型。&lt;/p&gt;
    
    </summary>
    
      <category term="论文" scheme="https://luxuantao.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
      <category term="问答系统" scheme="https://luxuantao.github.io/tags/%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>HTML人工合成声音</title>
    <link href="https://luxuantao.github.io/2020/06/01/HTML%E4%BA%BA%E5%B7%A5%E5%90%88%E6%88%90%E5%A3%B0%E9%9F%B3/"/>
    <id>https://luxuantao.github.io/2020/06/01/HTML人工合成声音/</id>
    <published>2020-06-01T07:00:59.000Z</published>
    <updated>2020-06-01T07:03:01.108Z</updated>
    
    <content type="html"><![CDATA[<p>问答系统中可以使用的人工合成声音。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"voiceinator"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"voice"</span> <span class="attr">id</span>=<span class="string">"voices"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>Select A Voice<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"rate"</span>&gt;</span>Rate:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"rate"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"3"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">step</span>=<span class="string">"0.1"</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pitch"</span>&gt;</span>Pitch:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"pitch"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"2"</span> <span class="attr">step</span>=<span class="string">"0.1"</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span>我起了 一枪秒了 有什么好说的<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"stop"</span>&gt;</span>Stop<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"speak"</span>&gt;</span>Speak<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">const synth = window.speechSynthesis</span></div><div class="line"><span class="undefined">const msg = new SpeechSynthesisUtterance()</span></div><div class="line"><span class="undefined">let voices = []</span></div><div class="line"><span class="undefined">const voicesDropdown = document.querySelector('[name="voice"]')</span></div><div class="line"><span class="undefined">const options = document.querySelectorAll('[type="range"], [name="text"]')</span></div><div class="line"><span class="undefined">const speakButton = document.querySelector('#speak')</span></div><div class="line"><span class="undefined">const stopButton = document.querySelector('#stop')</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">msg.text = '我起了 一枪秒了 有什么好说的'</span></div><div class="line"><span class="undefined">msg.lang = 'zh-CN'</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">synth.addEventListener('voiceschanged',getSupportVoices)</span></div><div class="line"><span class="undefined">speakButton.addEventListener('click',throttle(handleSpeak,1000))</span></div><div class="line"><span class="undefined">stopButton.addEventListener('click',handleStop)</span></div><div class="line"><span class="undefined">options.forEach(e =&gt; e.addEventListener('change',handleChange))</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">function getSupportVoices() &#123;</span></div><div class="line"><span class="undefined">voices = synth.getVoices()</span></div><div class="line"><span class="undefined">voices.forEach(e =&gt; &#123;</span></div><div class="line"><span class="undefined">  const option = document.createElement('option')</span></div><div class="line"><span class="undefined">  option.value = e.lang</span></div><div class="line"><span class="undefined">  option.text = e.name</span></div><div class="line"><span class="undefined">  voicesDropdown.appendChild(option)</span></div><div class="line"><span class="undefined"> &#125;)</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">function handleSpeak(e) &#123;</span></div><div class="line"><span class="undefined">msg.lang = voicesDropdown.selectedOptions[0].value</span></div><div class="line"><span class="undefined">synth.speak(msg)</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">function handleStop(e) &#123;</span></div><div class="line"><span class="undefined">synth.cancel(msg)</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">function handleChange(e) &#123;</span></div><div class="line"><span class="undefined">msg[this.name] = this.value</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">function throttle(fn,delay) &#123;</span></div><div class="line"><span class="undefined">let last = 0</span></div><div class="line"><span class="undefined">return function() &#123;</span></div><div class="line"><span class="undefined">  const now = new Date()</span></div><div class="line"><span class="undefined">  if(now - last &gt; delay) &#123;</span></div><div class="line"><span class="undefined">    fn.apply(this,arguments)</span></div><div class="line"><span class="undefined">    last = now</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问答系统中可以使用的人工合成声音。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://luxuantao.github.io/categories/HTML/"/>
    
    
  </entry>
  
  <entry>
    <title>爬取百度搜索结果</title>
    <link href="https://luxuantao.github.io/2020/05/15/%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/"/>
    <id>https://luxuantao.github.io/2020/05/15/爬取百度搜索结果/</id>
    <published>2020-05-15T07:08:12.000Z</published>
    <updated>2020-05-29T01:39:42.878Z</updated>
    
    <content type="html"><![CDATA[<p>使用python爬虫获取百度搜索结果。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crawler</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, timeout=<span class="number">5</span>, max_pages=<span class="number">1</span>)</span>:</span></div><div class="line">        self.timeout = timeout</div><div class="line">        self.max_pages = max_pages</div><div class="line">        self.headers = &#123;    </div><div class="line">            <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</div><div class="line">            <span class="string">'Accept'</span>: <span class="string">'text/html, application/xhtml+xml, */*'</span>,</div><div class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'en-US,en;q=0.8,zh-Hans-CN;q=0.5,zh-Hans;q=0.3'</span>,</div><div class="line">            <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</div><div class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/6.1 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko'</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, keywords)</span>:</span></div><div class="line">        url = <span class="string">'https://www.baidu.com/baidu?wd='</span> + quote(keywords) + <span class="string">'&amp;tn=monline_dg&amp;ie=utf-8'</span></div><div class="line">        crawled_pages = <span class="number">0</span></div><div class="line">        crawled_contents = []</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            html = self.crawl(url)</div><div class="line">            <span class="keyword">if</span> len(html) == <span class="number">0</span>: <span class="keyword">break</span></div><div class="line">            soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</div><div class="line">            results = soup.find_all(<span class="string">"div"</span>, class_=<span class="string">"c-abstract"</span>)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">                    crawled_contents.append(result.get_text().strip().replace(<span class="string">"&gt;&gt;"</span>, <span class="string">""</span>))</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">            crawled_pages += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> crawled_pages &gt;= self.max_pages: <span class="keyword">break</span></div><div class="line">            next = soup.find(<span class="string">'a'</span>, class_=<span class="string">"n"</span>)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> next: <span class="keyword">break</span></div><div class="line">            url = <span class="string">'https://www.baidu.com'</span> + next[<span class="string">'href'</span>]</div><div class="line">        <span class="keyword">return</span> keywords, crawled_contents</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self, url)</span>:</span></div><div class="line">        r = requests.get(url, timeout = self.timeout, headers = self.headers)</div><div class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</div><div class="line">            <span class="keyword">return</span> r.text</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'[ERROR]'</span>, self.url, <span class="string">'get此url返回的http状态码不是200'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    crawler = Crawler()</div><div class="line">    print(crawler(<span class="string">"虎门销烟是谁干的"</span>))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用python爬虫获取百度搜索结果。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="爬虫" scheme="https://luxuantao.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>pyecharts可视化</title>
    <link href="https://luxuantao.github.io/2020/04/20/pyecharts%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://luxuantao.github.io/2020/04/20/pyecharts可视化/</id>
    <published>2020-04-20T14:32:12.000Z</published>
    <updated>2020-04-20T14:34:21.436Z</updated>
    
    <content type="html"><![CDATA[<p>pyecharts中的常用可视化工具。</p><a id="more"></a><p><a href="http://pyecharts.org/#/zh-cn/" target="_blank" rel="external">http://pyecharts.org/#/zh-cn/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</div><div class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</div><div class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar, Bar3D, Line, Pie, EffectScatter, Funnel, Geo, Liquid, Radar, WordCloud</div><div class="line"><span class="keyword">from</span> pyecharts.globals <span class="keyword">import</span> ThemeType, SymbolType</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"></div><div class="line">bar = Bar(</div><div class="line">init_opts=opts.InitOpts(</div><div class="line">theme=ThemeType.PURPLE_PASSION,</div><div class="line">width=<span class="string">'720px'</span>,</div><div class="line">height=<span class="string">'540px'</span>))</div><div class="line"></div><div class="line">bar.add_xaxis(Faker.choose())</div><div class="line">bar.add_yaxis(<span class="string">'商家'</span>, Faker.values())</div><div class="line"></div><div class="line"><span class="comment"># bar.add_yaxis('商家1', Faker.values(), stack='stack1')</span></div><div class="line"><span class="comment"># bar.add_yaxis('商家2', Faker.values(), stack='stack1')</span></div><div class="line"><span class="comment"># bar.add_yaxis('商家3', Faker.values(), stack='stack2')</span></div><div class="line"><span class="comment"># bar.add_yaxis('商家4', Faker.values(), stack='stack2')</span></div><div class="line"></div><div class="line">bar.set_global_opts(</div><div class="line">title_opts=opts.TitleOpts(</div><div class="line">title=<span class="string">'Bar1'</span>,</div><div class="line">subtitle=<span class="string">'副标题'</span>),</div><div class="line">datazoom_opts=[opts.DataZoomOpts()],</div><div class="line">xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=<span class="number">30</span>)))</div><div class="line"></div><div class="line">bar.set_series_opts(</div><div class="line">label_opts=opts.LabelOpts(is_show=<span class="keyword">False</span>),</div><div class="line">markpoint_opts=opts.MarkPointOpts(</div><div class="line">data=[</div><div class="line">opts.MarkPointItem(type_=<span class="string">'max'</span>, name=<span class="string">'最大值'</span>),</div><div class="line">opts.MarkPointItem(type_=<span class="string">'min'</span>, name=<span class="string">'最小值'</span>)</div><div class="line">]</div><div class="line">),</div><div class="line">markline_opts=opts.MarkPointOpts(</div><div class="line">data=[</div><div class="line">opts.MarkLineItem(type_=<span class="string">'average'</span>, name=<span class="string">'平均值'</span>)</div><div class="line">]</div><div class="line">)</div><div class="line">)</div><div class="line">bar.reversal_axis()</div><div class="line">bar.render()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">data = [(i, j, random.randint(<span class="number">0</span>, <span class="number">12</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>)]</div><div class="line">bar3d = Bar3D()</div><div class="line">bar3d.add(</div><div class="line"><span class="string">""</span>,</div><div class="line">data,</div><div class="line">xaxis3d_opts=opts.Axis3DOpts(Faker.clock, type_=<span class="string">'category'</span>),</div><div class="line">yaxis3d_opts=opts.Axis3DOpts(Faker.week_en, type_=<span class="string">'category'</span>),</div><div class="line">zaxis3d_opts=opts.Axis3DOpts(Faker.week_en, type_=<span class="string">'value'</span>)</div><div class="line">)</div><div class="line">bar3d.set_global_opts(</div><div class="line">visualmap_opts=opts.VisualMapOpts(max_=<span class="number">20</span>),</div><div class="line">title_opts=opts.TitleOpts(title=<span class="string">'Bar3D'</span>)</div><div class="line">)</div><div class="line">bar3d.render()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">line = Line()</div><div class="line">line.add_xaxis(Faker.choose())</div><div class="line">line.add_yaxis(</div><div class="line"><span class="string">'商家1'</span>, </div><div class="line">Faker.values(), </div><div class="line">is_smooth=<span class="keyword">True</span>,</div><div class="line">areastyle_opts=opts.AreaStyleOpts(</div><div class="line">opacity=<span class="number">0.2</span>,</div><div class="line">color=&#123;</div><div class="line"><span class="string">'type'</span>: <span class="string">'linear'</span>,</div><div class="line"><span class="string">'x'</span>: <span class="number">0</span>,</div><div class="line"><span class="string">'y'</span>: <span class="number">0</span>,</div><div class="line"><span class="string">'x2'</span>: <span class="number">0</span>,</div><div class="line"><span class="string">'x2'</span>: <span class="number">1</span>,</div><div class="line"><span class="string">'colorStops'</span>: [&#123;</div><div class="line"><span class="string">'offset'</span>: <span class="number">0</span>, <span class="string">'color'</span>: <span class="string">'red'</span></div><div class="line">&#125;, &#123;</div><div class="line"><span class="string">'offset'</span>: <span class="number">1</span>, <span class="string">'color'</span>: <span class="string">'blue'</span></div><div class="line">&#125;]</div><div class="line">&#125;</div><div class="line">)</div><div class="line">)</div><div class="line">line.add_yaxis(<span class="string">'商家2'</span>, Faker.values())</div><div class="line">line.set_global_opts(</div><div class="line">title_opts=opts.TitleOpts(</div><div class="line">title=<span class="string">'line1'</span>,</div><div class="line">subtitle=<span class="string">'副标题'</span></div><div class="line">)</div><div class="line">)</div><div class="line">line.render()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">pie = Pie()</div><div class="line">pie.add(<span class="string">""</span>,</div><div class="line">[list(z) <span class="keyword">for</span> z <span class="keyword">in</span> zip(Faker.choose(), Faker.values())],</div><div class="line">radius=[<span class="string">'40%'</span>, <span class="string">'75%'</span>],</div><div class="line">rosetype=<span class="string">"area"</span>)</div><div class="line">pie.set_global_opts(</div><div class="line">title_opts=opts.TitleOpts(</div><div class="line">title=<span class="string">'Pie1'</span>,</div><div class="line">subtitle=<span class="string">'副标题'</span>)</div><div class="line">)</div><div class="line"></div><div class="line">pie.set_series_opts(</div><div class="line">label_opts=opts.LabelOpts(formatter=<span class="string">'&#123;b&#125;:&#123;c&#125;'</span>)</div><div class="line">)</div><div class="line"></div><div class="line">pie.render()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">effect_scatter = EffectScatter()</div><div class="line">effect_scatter.add_xaxis(Faker.choose())</div><div class="line">effect_scatter.add_yaxis(</div><div class="line"><span class="string">''</span>,</div><div class="line">Faker.values(),</div><div class="line">symbol=SymbolType.ARROW)</div><div class="line"></div><div class="line">effect_scatter.set_global_opts(</div><div class="line">title_opts=opts.TitleOpts(</div><div class="line">title=<span class="string">'effect_scatter2'</span>,</div><div class="line">subtitle=<span class="string">'副标题'</span></div><div class="line">)</div><div class="line">)</div><div class="line"></div><div class="line">effect_scatter.render()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">funnel = Funnel()</div><div class="line">funnel.add(</div><div class="line"><span class="string">'用户转化率'</span>,</div><div class="line">[list(z) <span class="keyword">for</span> z <span class="keyword">in</span> zip(Faker.choose(), Faker.values())],</div><div class="line">label_opts=opts.LabelOpts(position=<span class="string">'inside'</span>))</div><div class="line"></div><div class="line">funnel.set_global_opts(</div><div class="line">title_opts=opts.TitleOpts(</div><div class="line">title=<span class="string">'funnel1'</span>,</div><div class="line">subtitle=<span class="string">'副标题'</span></div><div class="line">)</div><div class="line">)</div><div class="line"></div><div class="line">funnel.render()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">geo = Geo()</div><div class="line">geo.add_schema(maptype=<span class="string">'china'</span>)</div><div class="line">geo.add(<span class="string">'geo'</span>, [list(z) <span class="keyword">for</span> z <span class="keyword">in</span> zip(Faker.provinces, Faker.values())])</div><div class="line">geo.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="keyword">False</span>))</div><div class="line"></div><div class="line">geo.set_global_opts(</div><div class="line">visualmap_opts=opts.VisualMapOpts(),</div><div class="line">title_opts=opts.TitleOpts(</div><div class="line">title=<span class="string">'funnel1'</span>,</div><div class="line">subtitle=<span class="string">'副标题'</span></div><div class="line">)</div><div class="line">)</div><div class="line"></div><div class="line">geo.render()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">liquid = Liquid()</div><div class="line">liquid.add(<span class="string">'liquid'</span>, [<span class="number">0.7</span>, <span class="number">0.6</span>, <span class="number">0.5</span>])</div><div class="line">liquid.set_global_opts(</div><div class="line">title_opts=opts.TitleOpts(</div><div class="line">title=<span class="string">'funnel1'</span>,</div><div class="line">subtitle=<span class="string">'副标题'</span></div><div class="line">)</div><div class="line">)</div><div class="line">liquid.render()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">radar = Radar()</div><div class="line">radar.add_schema(</div><div class="line">schema=[</div><div class="line">opts.RadarIndicatorItem(name=<span class="string">'a'</span>, max_=<span class="number">6500</span>),</div><div class="line">opts.RadarIndicatorItem(name=<span class="string">'b'</span>, max_=<span class="number">5500</span>),</div><div class="line">opts.RadarIndicatorItem(name=<span class="string">'c'</span>, max_=<span class="number">4500</span>),</div><div class="line">opts.RadarIndicatorItem(name=<span class="string">'d'</span>, max_=<span class="number">3500</span>),</div><div class="line">]</div><div class="line">)</div><div class="line"><span class="comment"># radar.add('G', v1)</span></div><div class="line"><span class="comment"># radar.add('H', v)</span></div><div class="line">radar.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="keyword">False</span>))</div><div class="line">radar.set_global_opts(</div><div class="line">title_opts=opts.TitleOpts(</div><div class="line">title=<span class="string">'funnel1'</span>,</div><div class="line">subtitle=<span class="string">'副标题'</span></div><div class="line">)</div><div class="line">)</div><div class="line">radar.render()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">words = [</div><div class="line">(<span class="string">'aaaaaaa'</span>, <span class="number">10000</span>),</div><div class="line">(<span class="string">'bbbb'</span>, <span class="number">20000</span>),</div><div class="line">(<span class="string">'ccc'</span>, <span class="number">30000</span>)</div><div class="line">]</div><div class="line">wordcloud = WordCloud()</div><div class="line">wordcloud.add(<span class="string">''</span>, words, word_size_range=[<span class="number">20</span>, <span class="number">100</span>])</div><div class="line">wordcloud.set_global_opts(</div><div class="line">title_opts=opts.TitleOpts(</div><div class="line">title=<span class="string">'funnel1'</span>,</div><div class="line">subtitle=<span class="string">'副标题'</span></div><div class="line">)</div><div class="line">)</div><div class="line">wordcloud.render()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pyecharts中的常用可视化工具。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="pyecharts" scheme="https://luxuantao.github.io/tags/pyecharts/"/>
    
  </entry>
  
  <entry>
    <title>pytorch打印各层信息</title>
    <link href="https://luxuantao.github.io/2020/04/18/pytorch%E6%89%93%E5%8D%B0%E5%90%84%E5%B1%82%E4%BF%A1%E6%81%AF/"/>
    <id>https://luxuantao.github.io/2020/04/18/pytorch打印各层信息/</id>
    <published>2020-04-18T05:59:34.000Z</published>
    <updated>2020-04-18T06:05:48.640Z</updated>
    
    <content type="html"><![CDATA[<p>在pytorch中像keras一样打印出神经网络各层的信息。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> collections</div><div class="line"><span class="keyword">import</span> torch</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">paras_summary</span><span class="params">(input_size, model)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_hook</span><span class="params">(module)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">hook</span><span class="params">(module, input, output)</span>:</span></div><div class="line">            class_name = str(module.__class__).split(<span class="string">'.'</span>)[<span class="number">-1</span>].split(<span class="string">"'"</span>)[<span class="number">0</span>]</div><div class="line">            module_idx = len(summary)</div><div class="line"></div><div class="line">            m_key = <span class="string">'%s-%i'</span> % (class_name, module_idx+<span class="number">1</span>)</div><div class="line">            summary[m_key] = collections.OrderedDict()</div><div class="line">            summary[m_key][<span class="string">'input_shape'</span>] = list(input[<span class="number">0</span>].size())</div><div class="line">            summary[m_key][<span class="string">'input_shape'</span>][<span class="number">0</span>] = <span class="number">-1</span></div><div class="line">            summary[m_key][<span class="string">'output_shape'</span>] = list(output.size())</div><div class="line">            summary[m_key][<span class="string">'output_shape'</span>][<span class="number">0</span>] = <span class="number">-1</span></div><div class="line"></div><div class="line">            params = <span class="number">0</span></div><div class="line">            <span class="keyword">if</span> hasattr(module, <span class="string">'weight'</span>):</div><div class="line">                params += torch.prod(torch.LongTensor(list(module.weight.size())))</div><div class="line">                <span class="keyword">if</span> module.weight.requires_grad:</div><div class="line">                    summary[m_key][<span class="string">'trainable'</span>] = <span class="keyword">True</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    summary[m_key][<span class="string">'trainable'</span>] = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> hasattr(module, <span class="string">'bias'</span>):</div><div class="line">                params +=  torch.prod(torch.LongTensor(list(module.bias.size())))</div><div class="line">            summary[m_key][<span class="string">'nb_params'</span>] = params</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(module, nn.Sequential) <span class="keyword">and</span> \</div><div class="line">           <span class="keyword">not</span> isinstance(module, nn.ModuleList) <span class="keyword">and</span> \</div><div class="line">           <span class="keyword">not</span> (module == model):</div><div class="line">            hooks.append(module.register_forward_hook(hook))</div><div class="line"></div><div class="line">    <span class="comment"># check if there are multiple inputs to the network</span></div><div class="line">    <span class="keyword">if</span> isinstance(input_size[<span class="number">0</span>], (list, tuple)):</div><div class="line">        x = [torch.rand(<span class="number">1</span>,*in_size) <span class="keyword">for</span> in_size <span class="keyword">in</span> input_size]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        x = torch.rand(<span class="number">1</span>,*input_size)</div><div class="line"></div><div class="line">    <span class="comment"># create properties</span></div><div class="line">    summary = collections.OrderedDict()</div><div class="line">    hooks = []</div><div class="line">    <span class="comment"># register hook</span></div><div class="line">    model.apply(register_hook)</div><div class="line">    <span class="comment"># make a forward pass</span></div><div class="line">    model(x)</div><div class="line">    <span class="comment"># remove these hooks</span></div><div class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> hooks:</div><div class="line">        h.remove()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> summary</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">net = Net()</div><div class="line">input_size=[<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>]</div><div class="line">paras_summary(input_size,net)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在pytorch中像keras一样打印出神经网络各层的信息。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="pytorch" scheme="https://luxuantao.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动实习有感</title>
    <link href="https://luxuantao.github.io/2019/12/06/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%AE%9E%E4%B9%A0%E6%9C%89%E6%84%9F/"/>
    <id>https://luxuantao.github.io/2019/12/06/字节跳动实习有感/</id>
    <published>2019-12-06T12:34:08.000Z</published>
    <updated>2019-12-06T13:29:24.820Z</updated>
    
    <content type="html"><![CDATA[<p>昨天正式办理了离职手续，实习告一段落。</p><a id="more"></a><p>2019年7月15日~2019年12月5日，说长不长，说短也不短。</p><p>公司坐标上海科技绿洲，漕河泾开发区的隔壁，每天早上坐地铁会经过漕河泾，下去一大波鹅厂的员工，再下一站就到了字节。</p><p>公司的设备和福利相当相当相当好，27寸的<code>DELL</code> 显示屏，15寸的<code>MacBook</code> ，四季恒温的空调，免费的三餐加下午茶，持续供应的零食，还有健身房，每两个月左右会出去团建一次。</p><p>刚进组的时候，组里还有另两名实习生，一个是同济的本硕，另一个是本科复旦硕士纽约大学的研究生，两人都马上要毕业了。</p><p>字节会给实习生安排一个montor，一个leader。不会做新人培训，看两天新人文档，然后直接干活。组里没有产品经理，我的任务都是leader直接给我布置，每个任务对应一个<code>ddl</code> 。刚开始确实会有无从下手的感觉，庆幸的是这位复旦的研究生一直在指导我，一两周后，已有的代码脉络了然于心。</p><p>leader不会手把手教你，你有问题可以问他。我的leader水平很高，啥都会，唯一的不足就是表达能力不强，有时会搞不懂他在说什么。而我的montor实际是我的leader的leader，虽然就坐在我旁边，但是平时管理好几个团队，一般见不到人。</p><p>作为<code>IES-QA安全平台组</code> 的一位测试开发工程师，每日的工作就是想着为测试工程师谋福祉，因此和我打交道的也有不少是测试工程师。leader一个人负责前端开发，我们三个臭皮匠负责后端开发。过了一阵子，同济的老哥干不下去了，leader没给他发转正offer，走了。到了8月底，复旦的老哥要回纽大读书了，临走前通过了转正答辩（确实很厉害，很聪明而且情商也很高）。就剩我和leader相依为命，后端全部扔给我一个人。</p><p>又过了一阵子，leader各种“利诱”，问我想不想转正，我说算了吧，还是读研重要。</p><p>11月中旬，组里新来了一位湖南大学的女同学，大四，已经拿到了秋招offer，算是正式员工。运气不好，刚进来就接了个大活。到我昨天离职，这个活还没干完。。。</p><p>你问我这段实习经历有没有用，自然是有用的。学到了不少新知识，了解了大公司的工作环境，为将来的职业生涯做了铺垫。但是你说有没有印象特别深刻的事，那还真没有，感觉自己就是干着拧螺丝的活，每天就是写接口，数据入库一些很常见的活，还有就是开会，开会，开会。五个月不到的时间里倒是挣了不少钱，三年读研的钱全部都挣出来了。</p><p>我觉得我的研究生导师说得对，实习就要干有意义的活，这也是我决定不留下的原因。这份工作对我来说没有太大的挑战性，还没有达到我理想中的工作要求。虽说字节上市已箭在弦上，薪水也是高的吓人，可我这些年付出的努力，远远超出这些。</p><p><code>AI-LAB</code>，三年后见。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天正式办理了离职手续，实习告一段落。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>pytorch+cuda初体验</title>
    <link href="https://luxuantao.github.io/2019/09/08/pytorch-cuda%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://luxuantao.github.io/2019/09/08/pytorch-cuda初体验/</id>
    <published>2019-09-08T06:10:30.000Z</published>
    <updated>2019-09-08T06:48:34.118Z</updated>
    
    <content type="html"><![CDATA[<p>之前只在<code>NVIDIA JETSON TX2</code>上用过<code>CUDA</code>，由于本学期选了并行计算这门课，应该会用到一点<code>CUDA</code>；于此同时，最近又在研究<code>pytorch</code>，还没有试过在<code>GPU</code>上跑<code>pytorch</code>；并且我一查，自己的显卡是英伟达的且支持<code>CUDA</code>。所以就毅然决定去试一试。</p><a id="more"></a><h2 id="查看自己的显卡是否支持CUDA"><a href="#查看自己的显卡是否支持CUDA" class="headerlink" title="查看自己的显卡是否支持CUDA"></a>查看自己的显卡是否支持CUDA</h2><p>首先你要看自己的显卡是不是英伟达的，如果是<code>AMD</code>的就已经没戏了，后面的文章你就别看了。</p><p>确定是英伟达的显卡后，上这个网查一查自己的显卡是否支持CUDA：<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="external">https://developer.nvidia.com/cuda-gpus</a></p><p>网站里也清楚地标注了不同型号的算力，我的显卡是<code>Quadro K620</code>，这是一款专业级显卡，画图建模很不错，但是用来打游戏就不咋地了（打游戏请用<code>Geforce</code>系列），算力5.0，算是刚刚及格吧。<code>Jetson TX1</code>的算力为5.3，<code>TX2</code>为6.2，最新的<code>AGX Xavier</code>算力为7.2，毕竟一分价钱一分货。</p><h2 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h2><p>上这个网址下载CUDA：<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="external">https://developer.nvidia.com/cuda-downloads</a></p><p>选择自己操作系统的版本，<code>Installer Type</code>我选的是<code>local</code>，然后就是无脑装，所有的配件我都勾选了（默认），当然你也可以按需选取。安装过程中屏幕会有闪动，这是正常现象。</p><p>装好后，去<code>CMD</code>输入<code>nvcc -V</code>看一下版本号，我下的最新版为<code>Cuda compilation tools, release 10.1, V10.1.243</code>，如果显示找不到命令，去配一下环境变量 。</p><h2 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h2><p>上这个网址下载pytorch：<a href="https://pytorch.org/" target="_blank" rel="external">https://pytorch.org</a>，选择相应的版本，得到下载命令。</p><p>我的下载命令为：<code>conda install pytorch torchvision cudatoolkit=10.0 -c pytorch</code></p><p>下载过程中可能会碰到各种<code>anaconda</code>给你报的奇奇怪怪的问题，更新这个，下载那个，照做就是了。</p><h2 id="对比CPU和GPU的性能差距"><a href="#对比CPU和GPU的性能差距" class="headerlink" title="对比CPU和GPU的性能差距"></a>对比CPU和GPU的性能差距</h2><p>装好后检验一下效果，用<code>pytorch</code>分别在CPU和GPU上做一个矩阵乘法，算一下用时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> torch</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">print(torch.__version__)</div><div class="line">print(torch.cuda.is_available())  <span class="comment"># 得返回true，否则你再看看上文哪儿出了问题</span></div><div class="line"></div><div class="line">a = torch.randn(<span class="number">10000</span>, <span class="number">1000</span>)</div><div class="line">b = torch.randn(<span class="number">1000</span>, <span class="number">2000</span>)</div><div class="line"></div><div class="line">t0 = time.time()</div><div class="line">c = torch.matmul(a, b)</div><div class="line">t1 = time.time()</div><div class="line">print(a.device, t1 - t0, c.norm(<span class="number">2</span>))</div><div class="line"></div><div class="line">device = torch.device(<span class="string">'cuda'</span>)</div><div class="line">a = a.to(device)</div><div class="line">b = b.to(device)</div><div class="line"></div><div class="line">t0 = time.time()</div><div class="line">c = torch.matmul(a, b)</div><div class="line">t2 = time.time()</div><div class="line">print(a.device, t2 - t0, c.norm(<span class="number">2</span>))</div><div class="line"></div><div class="line">t0 = time.time()</div><div class="line">c = torch.matmul(a, b)</div><div class="line">t2 = time.time()</div><div class="line">print(a.device, t2 - t0, c.norm(<span class="number">2</span>))</div></pre></td></tr></table></figure><p>我的运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.2.0</div><div class="line">True</div><div class="line">cpu 0.2418828010559082 tensor(141039.7031)</div><div class="line">cuda:0 0.30884218215942383 tensor(141441.1094, device=&apos;cuda:0&apos;)</div><div class="line">cuda:0 0.0069959163665771484 tensor(141441.1094, device=&apos;cuda:0&apos;)</div></pre></td></tr></table></figure><p>你会发现我在GPU上特地跑了两次，而且第一次时间甚至比CPU还久，那是因为第一次GPU需要做一些部署的工作，时间自然会长一些，第二次运行时间就明显比 CPU短很多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前只在&lt;code&gt;NVIDIA JETSON TX2&lt;/code&gt;上用过&lt;code&gt;CUDA&lt;/code&gt;，由于本学期选了并行计算这门课，应该会用到一点&lt;code&gt;CUDA&lt;/code&gt;；于此同时，最近又在研究&lt;code&gt;pytorch&lt;/code&gt;，还没有试过在&lt;code&gt;GPU&lt;/code&gt;上跑&lt;code&gt;pytorch&lt;/code&gt;；并且我一查，自己的显卡是英伟达的且支持&lt;code&gt;CUDA&lt;/code&gt;。所以就毅然决定去试一试。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="pytorch" scheme="https://luxuantao.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>推免!推免!推免!</title>
    <link href="https://luxuantao.github.io/2019/09/07/%E6%8E%A8%E5%85%8D!%E6%8E%A8%E5%85%8D!%E6%8E%A8%E5%85%8D!/"/>
    <id>https://luxuantao.github.io/2019/09/07/推免!推免!推免!/</id>
    <published>2019-09-07T12:38:47.000Z</published>
    <updated>2019-09-07T13:31:32.914Z</updated>
    
    <content type="html"><![CDATA[<p>2019年7月9日，研究生推免大战正式揭开帷幕。</p><a id="more"></a><h2 id="自我实力评估"><a href="#自我实力评估" class="headerlink" title="自我实力评估"></a>自我实力评估</h2><p>ACM，CTF，全国物联网竞赛，含金量高的创新创业比赛的奖项，专利，软件著作权，托福雅思。</p><p>这些我一个都没有。</p><p>我有的只有一腔热血，三年前高考失利，三年后的现在，我要重新站起来。</p><h2 id="本校机试"><a href="#本校机试" class="headerlink" title="本校机试"></a>本校机试</h2><p>7月9日参加的是自己学校的机试，和外校来参加夏令营的一起。赛前还特地刷了些题（事实证明一点卵用都么得），什么并查集啊，树状数组啊，博弈论啊，数论啊，这些统统不考。</p><p>OI赛制，有部分分，三小时四道题，每道题都有三种数据量，满分400，我分别拿了100/100，50/100，0/100，40/100，总分190。说实话，我很不满意，其实可以至少再拿30分的，只能怪当时脑子被塞住了。</p><p>我们自己都看不到榜，而zzw全程可以看榜（mmp），考完告诉我说我没了，吓得我赶紧问名次，他只肯说我是15名（内外校加起来）。然后我也没那么紧张了，除个2，相当于第7名左右，本校收14个推免的，应该没什么大问题。（这里真的想吐槽一下，我对我们学校大部分同学真的很无语，我都考成这样了，还能排进前十，你们都是干什么吃的？？？）。</p><h2 id="复旦夏令营"><a href="#复旦夏令营" class="headerlink" title="复旦夏令营"></a>复旦夏令营</h2><p>接下来开始的才是重头戏，7月10日~7月12日三天时间，复旦夏令营，浦东张江校区。总共报名第一批夏令营的有两千多人，但是入围的只有200人不到，去掉招收的直博生，最后能获得优秀营员的只有五十来个。</p><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><p>本以为我们学校入围复旦第一批夏令营的人很多，去了才知道，算上我只有三个，还有hxw和qdw。。。（这里我又想吐槽一下，华师大的同学们，你们争点气行不行啊？？？）。你可能想问我：“你不是说自己没什么奖嘛，怎么就入围了？” 没错，我的奖确实不多，但是这三年我一刻都没有松懈，绩点还是相当高的（我大三全年有十几门课，全部4.0）。</p><p>第一天没什么实质性的东西，上午听老师一个一个吹逼，下午自己去想去的实验室参观。</p><p>复旦这次是计算机学院和软件学院合办的夏令营，主要分为三个一级学科：计算机，软件工程，网络空间安全。</p><p>我一直想进数据工程下肖仰华老师的实验组，搞知识图谱的，而且还有一个学姐在那儿（这几天里也帮我解答了不少问题）。这个方向其实是软件工程下面的，然而。。。当初报名夏令营时我的志愿填成了计算机学院下的自然语言处理（我以为知识图谱是自然语言处理下的一个分支），谁知道完全不搭边。</p><p>第一天下午，我首先和qdw去找了网络空间安全的一个教授，呵呵，是个大水比。然而qdw对这个大水比很感兴趣。然后我们就分道扬镳，我去找肖老师，结果第一天肖老师出差不在，同一个实验组的汪卫老师接待了我，聊了几句，发现自己确实和某些外校同学比起来有些差距，别人又是论文，又是获奖，对这个方向相当了解，而我完全没有基础，免不了有点心灰意冷。</p><p>路过自然语言处理实验室的时候，门口排了一长队的人，hxw也在，他说因为nlp太抢手，需要“预面试”。我出了冷汗，心里想着自己当初的志愿还填成了nlp。。。</p><p>我觉得还是得联系下肖老师，发了微信后，肖老师让一个博士生接待了我，了解了一下我的基本情况，告诉我说，我在知识图谱这方面确实了解的太少。</p><p>然后我就走了，心如死灰。</p><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><p>上来就是机考，考前好多人都在看书，我觉得完全没必要了。</p><p>复旦机试是闭卷，两个半小时三道题，三种数据量，满分300，有部分分，但是！！！提交代码上去是看不到反馈结果的！也就是说你不知道自己写对了还是写错了。赛前说只有VS2008，把我吓得还去看了vs下的c++标准，结果考了才知道是有codeblocks的。</p><p>考试途中，老师会让你填志愿，这里有一次修改的机会，我赶紧改成了软件工程。（hxw填了计算机，qdw填了网络空间安全）</p><p>机考难度比我们学校要低，但也并不是无脑题（可能对hxw是），这三题我总感觉都做过，但是前两题印象不深了。第三题直接秒了，经典题，求最长公共子序列，考前刚看过。就是会卡内存，滚动数组就行了。（事后qdw告诉我，这他都不会。。。）。前两题就是拉差距的了，我先做的第一题，感觉自己的方法挺巧妙的，应该能过大数据，第二题实在没想到好方法，写了个暴力混分。还有半小时的时候，自己编了组数据，一测发现第一题有个bug，赶紧改了，现在想想都有些后怕。</p><p>下午英语面试，一对一，面我的是个男老师，一个录音笔正对着我。我觉得自己运气比较好，他说的我都听得懂，我说的他也听得懂，聊得很投机。短短五分钟，虽说不知道他打了几分，但我知道自己的成绩不会差。</p><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><p>第三天就一件事，专业面试，从上午开始，就有一批一批的人被叫走了，我们三个里我是最后被叫走的。</p><p>之前听说复旦的分数比例是这么算的：机考35%+英语面试15%+专业面试50%，所以说专业面试还是很重要的。</p><p>但这个时候，专业面试的老师已经看到了你前两次的成绩，对他的心里判断也会有影响，所以说前两项也不能差。</p><p>专业面试是一个学生对多个老师，好像有六七个，昨天面我英语的男老师也在。上来先自我介绍，我就把他们往我的机器人和NVIDIA JetsonTX2上引导（这可能是我唯一的优势了，搞这些的人是真的少）。自我介绍我所说的很少，我觉得没必要多BB，然后就说老师们有什么想问的都可以问我。一个姓池的女老师（记住这个人）率先问了问我，表示对我的软硬件结合经验很感兴趣，说她的实验室正需要这方面的人，其他几个老师见状也不敢多说什么，就随便问了我知识图谱方面的问题，我说我确实了解的少。但是本着我天生自带的一点小幽默，我把这几个老师逗乐了（具体怎么逗乐的我自己都想不起来了）。面试完出来，门口排队的同学还问了我：“同学，刚才里面怎么这么热闹？”</p><p>中午吃好饭，我都打算走了，池老师给我发了短信，说约我见面，我一想有戏，赶紧答应，她和我聊了聊，让我去了盛大（她的研究生在盛大做项目，又是一个博士生接待了我），她自己下午还要面别人。</p><p>在盛大等到下午三点，她来了，带了另两个女同学，也是她看中的。然后又是请我们喝茶又是曲奇饼干，介绍了她的项目组情况，说想留我们。其实这老师是搞机器学习的，但是因为最近接了华为的项目，手下的研究生又迟迟不能完工，所以急需新鲜血液。她还偷偷给我们看了我们的成绩，我机考84（已经换算成了100分满分，另两个同学一个58，一个63），英语面试97（我估计我已经封顶了）。说我能进学硕，但是要答应去她那儿，当时我想这么好的机会怎么能错过，就答应了，（现在想想真是打脸）。</p><p>出来已是下午四点，我想想总是心有不甘，决定去肖老师那儿跑一次，（学姐告诉我肖老师已经回来了，在给他们开会），我就在会议室门口等着。等的时候我心里就在作斗争，这个纠结啊，到底还要不要见肖老师？楼上楼下我跑了三四次，会还没结束，等了半小时，最后狠心打算走了，已经走出校门一公里了，学姐告诉我会开完了。我转身就往回跑，冲到肖老师办公室。</p><p>肖老师表示欢迎，让我也不要有负担，知识图谱这方面基础可以补，后来又带我去了实验室，和学姐见了面（我始终没和学姐见过面），和学姐聊了会儿。</p><p>出校门时已是下午六点，早上十一点时我的面试就已经完成了，结果和老师们打交道搞到了这么晚，但是我的内心还是很满足的。</p><h3 id="事后"><a href="#事后" class="headerlink" title="事后"></a>事后</h3><p>面试完，休息了个双休日，7月15日我就去字节跳动实习了，发出了自己的第一个<code>pull request</code>并且成功地<code>merge</code>，至此抖音里就有了我的身影。7月18日晚，我下班到家已快十点，坐在马桶上嗯嗯嗯的时候，qdw发来了消息，问我收到邮件了没？我一看邮箱，优秀营员通知书，软件工程学硕。当下联系了肖老师，肖老师表示强烈欢迎。当然我也联系了池老师，表示歉意，然而池老师完全没鸟我，估计气死了。。。但是我想了想，这本就是双向选择的问题，强扭的瓜不甜。</p><h2 id="本校面试"><a href="#本校面试" class="headerlink" title="本校面试"></a>本校面试</h2><p>今天完成了本校的推免面试，一开始有30+的同学报了名，然后光看成绩和获奖情况就刷到只剩22人。学校原本打算收14个推免的，但是了解到有很多同学想报外校，就把名额改为了16个，所以最终是22进16，会被刷掉6个。</p><p>三年下来，绩点3.81，又有好多高手不参加推免，我觉得自己怎么也前三了，但是面试前我的排名情况是：第四。</p><p>hxw，jkx比我强完全说得过去，cqj在我前面完全是意料之外。不少同学在暑假期间还在外面拼命参加比赛，想要给自己多加点分，而我却在公司挣大钱（摸鱼），其实心里还是有些后怕的。</p><p>下午两点四十五到我，每人十五分钟，而我早到了一个小时，过去和其他面试的同学聊了聊，缓解一下心情。</p><p>面试前十分钟，我口很渴，然后。。。我就去厕所喝了自来水，还喝了两趟。。。（味道和纯净水没啥区别），喝完水，就很舒服，感觉已是十拿九稳。</p><p>进去的时候一点都不紧张，十几个计算机学院的老师围在一起看你表演（吹逼）。先是做英语自我介绍，我的介绍很短，30秒左右，我一直认为自我介绍没必要说很多，尤其是英语自我介绍，老师也听不太懂，说多了他们也会不耐烦。说完以后，陈蕾老师说：“听完后都想给你鼓掌”。（唉呀妈，感情你还都听懂了！）</p><p>然后让我抽一段英语论文翻译，我脸黑，抽了段又臭又长的，讲深度学习的，硬着头皮翻完，说出去的话都已不是人话。</p><p>然后是抽专业问题，运气又变好了，抽到单源最短路问题（这么傻逼的问题都往里放）。一套<code>dijkstra</code>，<code>bellman-ford</code>上去，直接把老师眼睛给干大了，然后就给我加难度，说大数据量怎么办？（当老子没去大厂面试过？）。堆优化，图数据库，索引，缓存一套堆上去，几个老师的眼睛瞪得更大了。</p><p>然后就问我研究方向，这其实是个送命题。（你说某一个方向，他就会盯着你问；你说还不知道，他会认为你没目标）。我就不一样了，我说我过了复旦夏令营，两个老师看中我，两个方向（知识图谱，边缘计算），还在犹豫。这话一说，几个老师的眼睛已经掉出来了，然后就是闲聊。问我去复旦还是留华师大（这不废话），我还没等他问完就说“复旦”，然后又是一道送命题，你认为复旦比华师大好在哪儿？（这个问题很难回答，你不能说华师大师资不如复旦，生源不如复旦，钱没复旦多。。。）我就很机智，我说我是上海人，进复旦是我高中时就有的梦想，几个老师立马频频点头（反正啥事都往梦想上扯就对了）。</p><p>总结一下，魏老师全程没说话（可能是为了避嫌），贺梁对我的感觉一直很好，我对他也是（大一上过他的课，虽然他不记得了）。陈蕾就是笑，笑，笑。孙仕亮说你可以看看别的方向，像什么物联网，计算机基础架构也不错的（对不起，不感兴趣）。沈建华问想不想出国（我知道沈建华有过留学经历），我说将来读博完全可以考虑（真的读不读谁知道呢？）。</p><h2 id="录取结果"><a href="#录取结果" class="headerlink" title="录取结果"></a>录取结果</h2><p>这个就不写了，你看了上面的，也知道啥结果，zzw催我这篇文章已经很久了。</p><p>至此，推免结束，继续上班挣大钱（话说整个抖音QA平台组的后端就剩我一个人在写了，难顶）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019年7月9日，研究生推免大战正式揭开帷幕。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 红外遥控</title>
    <link href="https://luxuantao.github.io/2019/06/28/Android-%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7/"/>
    <id>https://luxuantao.github.io/2019/06/28/Android-红外遥控/</id>
    <published>2019-06-28T03:59:46.000Z</published>
    <updated>2019-06-28T04:39:00.008Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚放假，老爸就给了我一个任务，让我写个简易的app，用手机红外遥控他公司要用的单片机。之前在JetsonTx2小车的项目里有用过蓝牙和socket通信，还没尝试过红外，研究了一下，发现并不难。整个app两个小时就写好了，当然也没做什么界面的美化，主要还是把精力放在功能的实现上。</p><a id="more"></a><h2 id="Android部分"><a href="#Android部分" class="headerlink" title="Android部分"></a>Android部分</h2><p>Android有现成的红外类<code>ConsumerIrManager</code>可以用，代码都很简单，关键在于红外码的解读。</p><p>红外的编码格式一般为：引导码+用户编码低8位+用户编码高8位+数据码（8位）+数据码的反码（8位，校验用）</p><p>以我老爸的单片机为例：</p><ul><li>引导码：<code>9ms</code>的高电平+<code>4.5ms</code>的低电平</li><li>用户编码：这个要看你自己的，我们的单片机为<code>00000000 ffffffff</code></li><li>数据码：这个要看你想传什么，以传<code>16</code>为例，就是<code>0001 0110</code>，前4位表示<code>1</code>，后4位表示<code>6</code></li><li>数据码的反码：看名字就知道要干嘛，还是以传<code>16</code>为例，就是<code>1110 1001</code></li><li>载波：<code>38KHz</code></li></ul><p>最后要把<code>1</code>和<code>0</code>用高低电平表示，在我老爸的单片机上，<code>560ms</code>的高电平+<code>565ms</code>的低电平表示<code>0</code>，<code>560ms</code>的高电平+<code>1690ms</code>的低电平表示<code>1</code></p><h3 id="activity-main-xml"><a href="#activity-main-xml" class="headerlink" title="activity_main.xml"></a>activity_main.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">TableLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:stretchColumns</span>=<span class="string">"0,1,2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TableRow</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button45"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"总开关"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"#ff0000"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"25dp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TableRow</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button0d"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"区号"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button47"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"模式"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button44"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"时间"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TableRow</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button0c"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"统一时间"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button18"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"统一模式"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button16"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"分段定时"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TableRow</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button40"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"+"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button19"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"-"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"30dp"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button15"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"移位"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TableRow</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button09"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"开机"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"#0000ff"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button07"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"关机"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"#bb0000"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/send_button43"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"确认"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"#00aa00"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><p>加上这两句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 红外遥控 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.TRANSMIT_IR"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 仅在支持红外的设备上运行 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">"android.hardware.ConsumerIrManager"</span> <span class="attr">android:required</span>=<span class="string">"true"</span> /&gt;</span></div></pre></td></tr></table></figure><h3 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.hongwai;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</div><div class="line"><span class="keyword">import</span> android.annotation.TargetApi;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.hardware.ConsumerIrManager;</div><div class="line"><span class="keyword">import</span> android.os.Build;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ConsumerIrTest"</span>;</div><div class="line">    <span class="keyword">private</span> ConsumerIrManager mCIR;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"InlinedApi"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">// 获取系统的红外遥控服务</span></div><div class="line">        mCIR = (ConsumerIrManager) getSystemService(Context.CONSUMER_IR_SERVICE);</div><div class="line">        initViewsAndEvents();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViewsAndEvents</span><span class="params">()</span> </span>&#123;</div><div class="line">        findViewById(R.id.send_button45).setOnClickListener(mSendClickListener45);</div><div class="line">       <span class="comment">//其余类似</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> startH = <span class="number">9000</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> startL = <span class="number">4500</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> high8 = <span class="number">560</span>;</div><div class="line">    <span class="comment">//0：1125</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> low0 = <span class="number">565</span>;</div><div class="line">    <span class="comment">//1：2250</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> low1 = <span class="number">1690</span>;</div><div class="line"></div><div class="line">    <span class="comment">//用户编码高八位</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String userH = <span class="string">"00000000"</span>;</div><div class="line">    <span class="comment">//用户编码低八位</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String userL = <span class="string">"11111111"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//38kHz</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> carrierFrequency = <span class="number">38000</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] pattern;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String code)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = code.length();</div><div class="line">        String part;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            list.add(high8);</div><div class="line">            part = code.substring(i, i + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (part.equals(<span class="string">"0"</span>))</div><div class="line">                list.add(low0);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                list.add(low1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    View.OnClickListener mSendClickListener45 = <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@TargetApi</span>(Build.VERSION_CODES.KITKAT)</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!mCIR.hasIrEmitter()) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"未找到红外发身器！"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            list.clear();</div><div class="line">            <span class="comment">//引导码</span></div><div class="line">            list.add(startH);</div><div class="line">            list.add(startL);</div><div class="line">            <span class="comment">//用户编码</span></div><div class="line">            change(userH);</div><div class="line">            change(userL);</div><div class="line">            <span class="comment">//键数据码</span></div><div class="line">            change(<span class="string">"10100010"</span>);</div><div class="line">            <span class="comment">//键数据反码</span></div><div class="line">            change(<span class="string">"01011101"</span>);</div><div class="line">            <span class="comment">//发射时数据少一位</span></div><div class="line">            change(<span class="string">"1"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> size = list.size();</div><div class="line">            pattern = <span class="keyword">new</span> <span class="keyword">int</span>[size];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">                pattern[i] = list.get(i);</div><div class="line">            &#125;</div><div class="line">            mCIR.transmit(carrierFrequency, pattern);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line"><span class="comment">//其余类似</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码写的不好，不同的数据我就硬编码了，没动脑子。。。这里就不全贴出来，用”其余类似“表示了</p><p>实际操作中，数据码的传送要左右颠倒，比如<code>16</code>的数据码是<code>00010110</code>，那你就得写成<code>01101000</code>。我不知道为什么要这样，可能是我老爸的单片机接受数据的方式就是这样，开始一直不对，我也是试了几次才发现了这个规律。</p><p>还有个坑是发射时数据会少一位，所以我补了一位，这个问题也是仁者见仁，你可能压根遇不到这个问题。</p><h2 id="单片机部分"><a href="#单片机部分" class="headerlink" title="单片机部分"></a>单片机部分</h2><p>这个咱也不知道是咋写的，咱也不敢问。反正老爸都写好了，用C语言写了一千多行，咱也不想看。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚放假，老爸就给了我一个任务，让我写个简易的app，用手机红外遥控他公司要用的单片机。之前在JetsonTx2小车的项目里有用过蓝牙和socket通信，还没尝试过红外，研究了一下，发现并不难。整个app两个小时就写好了，当然也没做什么界面的美化，主要还是把精力放在功能的实现上。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://luxuantao.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>春招面试心路</title>
    <link href="https://luxuantao.github.io/2019/05/09/%E6%98%A5%E6%8B%9B%E9%9D%A2%E8%AF%95%E5%BF%83%E8%B7%AF/"/>
    <id>https://luxuantao.github.io/2019/05/09/春招面试心路/</id>
    <published>2019-05-09T10:01:26.000Z</published>
    <updated>2019-05-10T00:49:02.593Z</updated>
    
    <content type="html"><![CDATA[<p>本文并不是一篇面经，其中只谈到了我在大三下的春季招聘中遇到的那些事。</p><a id="more"></a><p>先说结果：今天收到了正式offer，已被<strong>字节跳动–上海抖音部门–测试开发岗</strong>录用。</p><p>接下来从头开始说起。</p><p>我的第一次工作面试给了腾讯，在3月初，提前批，后端开发，现场面试，第一次本就没什么经验，前一晚甚至都没睡好，一大早翘了课去面试，结果面试官问的好多题都答不上来。而且面试官上来问我平时玩游戏吗？我说不怎么玩，结束了告诉我：他是天美的。一面挂。</p><p>然后就是合合信息，来我们学校办了宣讲会，我参加了宣讲会的笔试，通过了。后来去现场面试（离我家还挺近），后端开发，技术面就一面（还有点水），过了直接打电话叫hr来面，对我意向不错，问我什么时候能确定来不来，我说暑假前。至此没了后文。</p><p>阿里提前批内推，没想好做啥，随便报了个前端，突然电话面试，当场去世，全程不在一个频道。</p><p>然后就是重头戏：字节跳动，抖音后端开发（注意这里是后端），视频面试，在一个周六的早上，连着三面技术面，两个半小时，面到大脑缺氧，但还是撑过去了。过了两周，HR打电话说过了，给了口头offer，我很激动，回绝了基本上所有的笔试面试。然后就一直在等正式offer，HR说负责人在国外，要等一阵子。</p><p>期间，腾讯开始了正式批面试，我被调剂到了应用开发岗，当时都没明确回复接受面试邀请还是拒绝，（心里想着已经有字节跳动了，不想搞这么累再去面了）。到了时间，面试官还是打来了电话，上来就问我是不是已经有offer了，应该是听出了我的心不在焉，然后就面了十分钟，没问什么技术含量的问题。过了会儿，手机一查，已挂。</p><p>此外，微软的笔试也过了，但面试在闵行，想着太远了就没去。</p><p>过了一周，字节跳动的HR突然联系我，说我的offer被负责人驳回了，当时心态大崩，因为当时的我已经没有了退路。只得恳求说能不能换个岗，HR说会想想办法，然后又是等。。。</p><p>无奈，只能再找找别的，华为的笔试我本来都拒绝了，理由也写的很清楚，已收到字节跳动的offer，后来一想真是打脸，厚着脸皮做了在线笔试题，两个小时三题，结果一个半小时就ak了（确实简单）。</p><p>此外，还有摩根士丹利，第一轮是电话面试，全英语。。。不过还是过了，并不是因为我的英语有多好，应该是最后一道逻辑题在提示下答上来了。</p><p>再回到字节跳动，HR把我换到了后端开发（独立闭环业务），但是这个部门一直没反应，只得再问我愿意去测试开发吗，我哪里还顾得那么多，直接果断答应了，当天测试开发的HR就联系了我，说要加一轮技术面，问我什么时候有空，我说五一后，约在了五一后的周一上午十一点半（留意这个时间点）。</p><p>期间，摩根士丹利和华为也问我什么时候能去面试，我也都说五一后（剩下的这三家公司我自然是最想去字节跳动）。还有个小插曲，我在校内的游族杯程序设计竞赛拿了一等奖，获得了游族网络的实习直通卡，当天HR就联系了我，问我想不想去，我说可以考虑，但是直到今天也没有收到消息。</p><p>五一没过好，心情很复杂。</p><p>周一上午十一点半面试，我要从家里赶到学校，想着面完试不一定有时间去食堂吃饭，母亲就说给我买点面包，十点休息回家带给我，我算着时间有些紧张，但还是答应了。结果母亲回家的时候太心急，电动车开得太快，差点和一辆小货车撞到一起，自己摔倒，受了伤。我赶紧开了电动车去事发现场，也没时间说上几句话，拿了面包就要赶去学校了，去的路上我一直在想：一定要过，不然对不起母亲。</p><p>提前赶到了学校，我就一直在等（我以为是电话面试，因为邮箱里一直没见到面试链接），11点40，HR打来了电话，问我怎么还没上线？我就惊了，一开邮箱，发现面试链接静静地躺在垃圾邮箱里。。。赶紧上线面试，面试官倒也不介意，面了半小时，感觉还可以。</p><p>当天晚上，HR联系了我，说我早上面试过了，现在要加一轮HR面（这是我在字节跳动的第六面。。。）</p><p>聊得很不错，直接给了offer意向。这次我有点高兴不起来，因为有了之前的经历，总觉得口头offer不可信。过了三天，也就是今天，终于收到了正式offer。</p><p>嗯。可以理直气壮地拒掉其他公司了。</p><p>PS：b站和谷歌，简历都没过。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文并不是一篇面经，其中只谈到了我在大三下的春季招聘中遇到的那些事。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>C++查缺补漏</title>
    <link href="https://luxuantao.github.io/2019/03/28/C-%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F/"/>
    <id>https://luxuantao.github.io/2019/03/28/C-查缺补漏/</id>
    <published>2019-03-28T11:33:29.000Z</published>
    <updated>2019-03-28T11:40:30.432Z</updated>
    
    <content type="html"><![CDATA[<p>这是本博客有史以来最长的一篇文章，总结了我从大一至今，遇到的几乎所有不易理解或是容易忘记的C++知识，可作为手册查阅，内容参考自清华大学郑莉教授的C++课程。</p><hr><a id="more"></a><h1 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h1><p>声明时使用关键字 inline</p><p>编译时在调用处用函数体进行替换，节省了参数传递、控制转移等开销</p><p>注意：</p><p>内联函数体内不能有循环语句和switch语句</p><p>内联函数的定义必须出现在内联函数第一次被调用之前</p><p>对内联函数不能进行异常接口声明</p><p>定义内联函数，可以显式用inline声明，也可以直接在类内定义好实现</p><p>编译器并不一定遵从我们的inline</p><h1 id="constexpr函数"><a href="#constexpr函数" class="headerlink" title="constexpr函数"></a>constexpr函数</h1><p>constexpr修饰的函数在其所有参数都是constexpr时，一定返回constexpr</p><p>函数体中必须有且仅有一条return语句</p><p>constexpr的变量的值必须是编译器在编译的时候就可以确定的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">get_size</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">20</span>; &#125;</div><div class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> foo = get_size();  <span class="comment">//正确：foo是一个常量表达式</span></div></pre></td></tr></table></figure><h1 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h1><p>通过形参的个数不同或者类型不同进行区分</p><p>无法通过返回值区分</p><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面两个都是默认构造函数，如在类中同时出现，将产生编译错误：</span></div><div class="line">Clock();</div><div class="line">Clock(<span class="keyword">int</span> newH=<span class="number">0</span>,<span class="keyword">int</span> newM=<span class="number">0</span>,<span class="keyword">int</span> newS=<span class="number">0</span>);</div></pre></td></tr></table></figure><h2 id="隐含生成的构造函数"><a href="#隐含生成的构造函数" class="headerlink" title="隐含生成的构造函数"></a>隐含生成的构造函数</h2><p>如果程序中未定义构造函数，编译器将在需要时自动生成一个默认构造函数</p><p>参数列表为空，不为数据成员设置初始值</p><p>如果类内定义了成员的初始值，则使用类内定义的初始值</p><p>如果没有定义类内的初始值，则以默认方式初始化</p><p>基本类型的数据默认初始化的值是不确定的</p><h2 id="default"><a href="#default" class="headerlink" title="=default"></a>=default</h2><p>如果程序中已定义构造函数，默认情况下编译器就不再隐含生成默认构造函数。如果此时依然希望编译器隐含生成默认构造函数，可以使用<code>=default</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">   Clock() =<span class="keyword">default</span>; <span class="comment">//指示编译器提供默认构造函数</span></div><div class="line">   Clock(<span class="keyword">int</span> newH, <span class="keyword">int</span> newM, <span class="keyword">int</span> newS);     <span class="comment">//构造函数</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">   <span class="keyword">int</span> hour, minute, second;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="委托构造函数"><a href="#委托构造函数" class="headerlink" title="委托构造函数"></a>委托构造函数</h2><p>类中往往有多个构造函数，只是参数表和初始化列表不同，其初始化算法都是相同的，这时，为了避免代码重复，可以使用委托构造函数</p><p>不使用委托构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数</span></div><div class="line">Clock(<span class="keyword">int</span> newH, <span class="keyword">int</span> newM, <span class="keyword">int</span> newS) : hour(newH),minute(newM),second(newS) &#123;&#125;</div><div class="line"><span class="comment">//默认构造函数</span></div><div class="line">Clock() : hour(<span class="number">0</span>),minute(<span class="number">0</span>),second(<span class="number">0</span>) &#123;&#125;</div></pre></td></tr></table></figure><p>使用委托构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Clock(<span class="keyword">int</span> newH, <span class="keyword">int</span> newM, <span class="keyword">int</span> newS) : hour(newH),minute(newM),second(newS) &#123;&#125;</div><div class="line">Clock(): Clock(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &#123;&#125;</div></pre></td></tr></table></figure><h2 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h2><p>复制构造函数是一种特殊的构造函数，其形参为本类的对象引用，作用是用一个已存在的对象去初始化同类型的新对象</p><p>定义一个对象时，以本类另一个对象作为初始值，发生复制构造</p><p>如果函数的形参是类的对象，调用函数时，将使用实参对象初始化形参对象，发生复制构造</p><p>如果函数的返回值是类的对象，函数执行完成返回主调函数时，将使用return语句中的对象初始化一个临时无名对象，传递给主调函数，此时发生复制构造</p><h2 id="隐含的复制构造函数"><a href="#隐含的复制构造函数" class="headerlink" title="隐含的复制构造函数"></a>隐含的复制构造函数</h2><p>如果程序员没有为类声明拷贝初始化构造函数，则编译器自己生成一个隐含的复制构造函数</p><p>这个构造函数执行的功能是：用作为初始值的对象的每个数据成员的值，初始化将要建立的对象的对应数据成员（浅拷贝）</p><h2 id="delete"><a href="#delete" class="headerlink" title="=delete"></a>=delete</h2><p>C++11做法：用<code>=delete</code>指示编译器不生成默认复制构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span>   <span class="comment">//Point 类的定义</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Point(<span class="keyword">int</span> xx=<span class="number">0</span>, <span class="keyword">int</span> yy=<span class="number">0</span>) &#123; x = xx; y = yy; &#125;    <span class="comment">//构造函数，内联</span></div><div class="line">    Point(<span class="keyword">const</span> Point&amp; p) =<span class="keyword">delete</span>;  <span class="comment">//指示编译器不生成默认复制构造函数</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> x, y; <span class="comment">//私有数据</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a>类的组合</h1><h2 id="构造组合类对象时的初始化次序"><a href="#构造组合类对象时的初始化次序" class="headerlink" title="构造组合类对象时的初始化次序"></a>构造组合类对象时的初始化次序</h2><p>首先对构造函数初始化列表中列出的成员（包括基本类型成员和对象成员）进行初始化，初始化次序是成员在类体中定义的次序</p><p>成员对象构造函数调用顺序：按对象成员的声明顺序，先声明者先构造</p><p>初始化列表中未出现的成员对象：调用用默认构造函数（即无形参的）初始化</p><p>处理完初始化列表之后，再执行构造函数的函数体</p><h2 id="前向引用声明"><a href="#前向引用声明" class="headerlink" title="前向引用声明"></a>前向引用声明</h2><p>如果需要在某个类的声明之前，引用该类，则应进行前向引用声明</p><p>前向引用声明只为程序引入一个标识符，但具体声明在其他地方</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span>  <span class="comment">//前向引用声明</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(B b)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(A a)</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>使用前向引用声明虽然可以解决一些问题，但它并不是万能的</p><p>在提供一个完整的类声明之前，不能声明该类的对象，也不能在内联成员函数中使用该类的对象</p><p>当使用前向引用声明时，只能使用被声明的符号，而不能涉及类的任何细节</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fred</span>;</span> <span class="comment">//前向引用声明</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Barney</span> &#123;</span></div><div class="line">   Fred x; <span class="comment">//错误：类Fred的声明尚不完善</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fred</span> &#123;</span></div><div class="line">   Barney y;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="联合体"><a href="#联合体" class="headerlink" title="联合体"></a>联合体</h1><p>成员共用同一组内存单元</p><p>任何两个成员不会同时有效</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExamInfo</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="built_in">string</span> name;<span class="comment">//课程名称</span></div><div class="line"><span class="keyword">enum</span> &#123; GRADE, PASS, PERCENTAGE &#125; mode;<span class="comment">//计分方式</span></div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">char</span> grade;<span class="comment">//等级制的成绩</span></div><div class="line"><span class="keyword">bool</span> pass;<span class="comment">//只记是否通过课程的成绩</span></div><div class="line"><span class="keyword">int</span> percent;<span class="comment">//百分制的成绩</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="comment">//三种构造函数，分别用等级、是否通过和百分初始化</span></div><div class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">char</span> grade)</div><div class="line">: name(name), mode(GRADE), grade(grade) &#123; &#125;</div><div class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">bool</span> pass)</div><div class="line">: name(name), mode(PASS), pass(pass) &#123; &#125;</div><div class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">int</span> percent)</div><div class="line">: name(name), mode(PERCENTAGE), percent(percent) &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> ExamInfo::show() &#123;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">": "</span>;</div><div class="line"><span class="keyword">switch</span> (mode) &#123;</div><div class="line">  <span class="keyword">case</span> GRADE: <span class="built_in">cout</span> &lt;&lt; grade;  <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> PASS: <span class="built_in">cout</span> &lt;&lt; (pass ? <span class="string">"PASS"</span> : <span class="string">"FAIL"</span>); <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> PERCENTAGE: <span class="built_in">cout</span> &lt;&lt; percent; <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="function">ExamInfo <span class="title">course1</span><span class="params">(<span class="string">"English"</span>, <span class="string">'B'</span>)</span></span>;</div><div class="line"><span class="function">ExamInfo <span class="title">course2</span><span class="params">(<span class="string">"Calculus"</span>, <span class="literal">true</span>)</span></span>;</div><div class="line"><span class="function">ExamInfo <span class="title">course3</span><span class="params">(<span class="string">"C++ Programming"</span>, <span class="number">85</span>)</span></span>;</div><div class="line">course1.show();</div><div class="line">course2.show();</div><div class="line">course3.show();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//运行结果：</span></div><div class="line"><span class="comment">//English: B</span></div><div class="line"><span class="comment">//Calculus: PASS</span></div><div class="line"><span class="comment">//C++ Programming: 85</span></div></pre></td></tr></table></figure><h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//enum class 枚举类型名: 底层类型 &#123;枚举值列表&#125;;</span></div><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> &#123;</span> General, Light, Medium, Heavy&#125;;</div><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span>:</span> <span class="keyword">char</span> &#123; General, Light, Medium, Heavy&#125;;</div><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> &#123;</span> General=<span class="number">1</span>, Pistol, MachineGun, Cannon&#125;;</div></pre></td></tr></table></figure><p>枚举类的优势</p><p>强作用域，其作用域限制在枚举类中</p><p>转换限制，枚举类对象不可以与整型隐式地互相转换。</p><p>可以指定底层类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Side</span>&#123;</span> Right, Left &#125;;</div><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Thing</span>&#123;</span> Wrong, Right &#125;;  <span class="comment">//不冲突</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Side s = Side::Right;</div><div class="line">    Thing w = Thing::Wrong;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; (s == w) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//编译错误，无法直接比较不同枚举类</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="类的友元"><a href="#类的友元" class="headerlink" title="类的友元"></a>类的友元</h1><p>友元是C++提供的一种破坏数据封装和数据隐藏的机制</p><p>通过将一个模块声明为另一个模块的友元，一个模块能够引用到另一个模块中本是被隐藏的信息</p><p>为了确保数据的完整性，及数据封装与隐藏的原则，建议尽量不使用或少使用友元</p><h2 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h2><p>友元函数是在类声明中由关键字friend修饰说明的非成员函数，在它的函数体中能够通过对象名访问 private 和protected成员</p><p>作用：增加灵活性，使程序员可以在封装和快速性方面做合理选择</p><p>访问对象中的成员必须通过对象名</p><h2 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h2><p>若一个类为另一个类的友元，则此类的所有成员都能访问对方类的私有成员</p><p>声明语法：将友元类名在另一个类中使用friend修饰说明</p><h2 id="类的友元关系是单向的"><a href="#类的友元关系是单向的" class="headerlink" title="类的友元关系是单向的"></a>类的友元关系是单向的</h2><p>如果声明B类是A类的友元，B类的成员函数就可以访问A类的私有和保护数据，但A类的成员函数却不能访问B类的私有、保护数据</p><h1 id="常类型"><a href="#常类型" class="headerlink" title="常类型"></a>常类型</h1><p>对于既需要共享、又需要防止改变的数据应该声明为<strong>常类型</strong>（用const进行修饰）</p><p>const关键字可以被用于参与对重载函数的区分</p><p>通过常对象只能调用它的常成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  R(<span class="keyword">int</span> r1, <span class="keyword">int</span> r2) : r1(r1), r2(r2) &#123; &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">int</span> r1, r2;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> R::print() &#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; r1 &lt;&lt; <span class="string">":"</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> R::print() <span class="keyword">const</span> &#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; r1 &lt;&lt; <span class="string">";"</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">R <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">4</span>)</span></span>;</div><div class="line">  a.print(); <span class="comment">//调用void print()</span></div><div class="line">  <span class="function"><span class="keyword">const</span> R <span class="title">b</span><span class="params">(<span class="number">20</span>,<span class="number">52</span>)</span></span>; </div><div class="line">  b.print(); <span class="comment">//调用void print() const</span></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 常成员函数可以被非常对象调用，但常对象不可调用非常成员函数</p><h1 id="多文件结构"><a href="#多文件结构" class="headerlink" title="多文件结构"></a>多文件结构</h1><h2 id="外部变量"><a href="#外部变量" class="headerlink" title="外部变量"></a>外部变量</h2><p>如果一个变量除了在定义它的源文件中可以使用外，还能被其它文件使用，那么就称这个变量是外部变量</p><p>文件作用域中定义的变量，默认情况下都是外部变量，但在其它文件中如果需要使用这一变量，需要用extern关键字加以声明</p><h2 id="外部函数"><a href="#外部函数" class="headerlink" title="外部函数"></a>外部函数</h2><p>在所有类之外声明的函数（也就是非成员函数），都是具有文件作用域的</p><p>这样的函数都可以在不同的编译单元中被调用，只要在调用之前进行引用性声明（即声明函数原型）即可。也可以在声明函数原型或定义函数时用extern修饰，其效果与不加修饰的默认状态是一样的</p><h1 id="编译预处理指令"><a href="#编译预处理指令" class="headerlink" title="编译预处理指令"></a>编译预处理指令</h1><p>预处理在编译前进行</p><p>每条预处理指令必须单独占用一行</p><p>预处理指令可以出现在程序的任何位置</p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="空值nullptr"><a href="#空值nullptr" class="headerlink" title="空值nullptr"></a>空值nullptr</h2><ul><li><p>以往用0或者NULL去表达空指针的问题：</p><p>C/C++的NULL宏是个被有很多潜在BUG的宏。因为有的库把其定义成整数0，有的定义成 (void*)0。在C的时代还好。但是在C++的时代，这就会引发很多问题</p></li><li><p>C++11使用nullptr关键字，是表达更准确，类型安全的空指针</p></li></ul><h2 id="指向常量的指针"><a href="#指向常量的指针" class="headerlink" title="指向常量的指针"></a>指向常量的指针</h2><p>不能通过指向常量的指针改变所指对象的值，但指针本身可以改变，可以指向另外的对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p1 = &amp;a; <span class="comment">//p1是指向常量的指针</span></div><div class="line"><span class="keyword">int</span> b;</div><div class="line">p1 = &amp;b; <span class="comment">//正确，p1本身的值可以改变</span></div><div class="line">*p1 = <span class="number">1</span>; <span class="comment">//编译时出错，不能通过p1改变所指的对象</span></div></pre></td></tr></table></figure><h2 id="指针类型的常量"><a href="#指针类型的常量" class="headerlink" title="指针类型的常量"></a>指针类型的常量</h2><p>若声明指针常量，则指针本身的值不能被改变。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a;</div><div class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</div><div class="line">p2 = &amp;b; <span class="comment">//错误，p2是指针常量，值不能改变</span></div></pre></td></tr></table></figure><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>) = f;</div><div class="line">   <span class="built_in">cout</span>&lt;&lt;p(<span class="number">1</span>, <span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><p>显式管理内存在是能上有优势，但容易出错</p><p>C++11提供智能指针的数据类型，对垃圾回收技术提供了一些支持，实现一定程度的内存管理</p><ul><li>unique_ptr ：不允许多个指针共享资源，可以用标准库中的move函数转移指针</li><li>shared_ptr ：多个指针共享资源</li><li>weak_ptr ：可复制shared_ptr，但其构造或者释放对资源不产生影响</li></ul><h1 id="移动构造"><a href="#移动构造" class="headerlink" title="移动构造"></a>移动构造</h1><p>移动构造可以减少不必要的复制，带来性能上的提升</p><p>C++11之前，如果要将源对象的状态转移到目标对象只能通过复制。在某些情况下，我们没有必要复制对象——只需要移动它们</p><p>有可被利用的临时对象时，触发移动构造</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数返回含有指针成员的对象</span></div><div class="line"><span class="comment">//将要返回的局部对象转移到主调函数，省去了构造和删除临时对象的过程</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntNum</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">IntNum(<span class="keyword">int</span> x = <span class="number">0</span>) : xptr(<span class="keyword">new</span> <span class="keyword">int</span>(x))&#123; <span class="comment">//构造函数</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line">IntNum(<span class="keyword">const</span> IntNum &amp; n) : xptr(<span class="keyword">new</span> <span class="keyword">int</span>(*n.xptr))&#123;<span class="comment">//复制构造函数</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling copy constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//&amp;&amp;是右值引用</span></div><div class="line"><span class="comment">//函数返回的临时变量是右值</span></div><div class="line">IntNum(IntNum &amp;&amp; n): xptr(n.xptr)&#123; <span class="comment">//移动构造函数</span></div><div class="line">n.xptr = <span class="literal">nullptr</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling move constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line">~IntNum()&#123; <span class="comment">//析构函数</span></div><div class="line">    <span class="keyword">delete</span> xptr;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destructing..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="keyword">int</span> *xptr;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//返回值为IntNum类对象</span></div><div class="line"><span class="function">IntNum <span class="title">getNum</span><span class="params">()</span> </span>&#123;</div><div class="line">    IntNum a;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; getNum().getInt() &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">运行结果：</span></div><div class="line"><span class="comment">Calling constructor...</span></div><div class="line"><span class="comment">Calling move constructor...</span></div><div class="line"><span class="comment">Destructing...  //这里释放了nullptr</span></div><div class="line"><span class="comment">0</span></div><div class="line"><span class="comment">Destructing...</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h2 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h2><p>左值和右值都是针对表达式而言的</p><p>左值是指表达式结束后依然存在的持久对象</p><p>右值指表达式结束时就不再存在的临时对象——显然右值不可以被取地址</p><h1 id="读入字符串"><a href="#读入字符串" class="headerlink" title="读入字符串"></a>读入字符串</h1><p>用cin的&gt;&gt;操作符输入字符串，会以空格作为分隔符，空格后的内容会在下一回输入时被读取</p><p>getline可以输入整行字符串（要包string头文件），例如：<code>getline(cin, s2);</code></p><p>输入字符串时，可以使用其它分隔符作为字符串结束的标志（例如逗号、分号），将分隔符作为getline的第3个参数即可，例如：<code>getline(cin, s2, &#39;,&#39;);</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</div><div class="line">        <span class="built_in">string</span> city, state;</div><div class="line">        getline(<span class="built_in">cin</span>, city, <span class="string">','</span>);</div><div class="line">        getline(<span class="built_in">cin</span>, state);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"City:"</span> &lt;&lt; city &lt;&lt; “ State:<span class="string">" &lt;&lt; state &lt;&lt; endl;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">return 0;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">/*</span></div><div class="line"><span class="string">运行结果：</span></div><div class="line"><span class="string">Beijing,China</span></div><div class="line"><span class="string">City: Beijing State: China</span></div><div class="line"><span class="string">San Francisco,the United States</span></div><div class="line"><span class="string">City: San Francisco State: the United States</span></div><div class="line"><span class="string">*/</span></div></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="公有继承-public"><a href="#公有继承-public" class="headerlink" title="公有继承(public)"></a>公有继承(public)</h2><p>继承的访问控制</p><ul><li>基类的public和protected成员：访问属性在派生类中保持不变</li><li>基类的private成员：不可直接访问</li></ul><p>访问权限</p><ul><li>派生类中的成员函数：可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员</li><li>通过派生类的对象：只能访问public成员</li></ul><h2 id="私有继承-private"><a href="#私有继承-private" class="headerlink" title="私有继承(private)"></a>私有继承(private)</h2><p>继承的访问控制</p><ul><li>基类的<strong>public</strong>和<strong>protected成员：都以private</strong>身份出现在派生类中</li><li>基类的private成员：<strong>不可直接访问</strong></li></ul><p>访问权限</p><ul><li>派生类中的成员函数：可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员</li><li>通过派生类的对象：不能直接访问从基类继承的任何成员</li></ul><h2 id="保护继承-protected"><a href="#保护继承-protected" class="headerlink" title="保护继承(protected)"></a>保护继承(protected)</h2><p>继承的访问控制</p><ul><li>基类的<strong>public</strong>和<strong>protected成员：都以protected</strong>身份出现在派生类中</li><li>基类的<strong>private</strong>成员：<strong>不可直接访问</strong></li></ul><p>访问权限</p><ul><li>派生类中的成员函数：可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员</li><li>通过派生类的对象：不能直接访问从基类继承的任何成员</li></ul><p>protected 成员的特点与作用</p><ul><li>对建立其所在类对象的模块来说，它与 private 成员的性质相同</li><li>对于其派生类来说，它与 public 成员的性质相同</li><li>既实现了数据隐藏，又方便继承，实现代码重用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> a;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setB</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> b;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A, <span class="keyword">private</span> B&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setC</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> c;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">void</span> A::setA(<span class="keyword">int</span> x)&#123;</div><div class="line">    a = x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> B::setB(<span class="keyword">int</span> x)&#123;</div><div class="line">    b = x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> C::setC(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)&#123;</div><div class="line">    setA(x);</div><div class="line">    setB(y);</div><div class="line">    c = z;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    C obj;</div><div class="line">    obj.setA(<span class="number">5</span>); <span class="comment">// 正确</span></div><div class="line">    obj.setB(<span class="number">6</span>); <span class="comment">// 错误</span></div><div class="line">    obj.setC(<span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>); <span class="comment">// 正确</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="派生类的构造函数"><a href="#派生类的构造函数" class="headerlink" title="派生类的构造函数"></a>派生类的构造函数</h1><p>默认情况</p><ul><li>基类的构造函数不被继承</li><li>派生类需要定义自己的构造函数</li></ul><p>C++11规定</p><ul><li><p>可用using语句继承基类构造函数</p></li><li><p>但是只能初始化从基类继承的成员</p><p>派生类新增成员可以通过类内初始值进行初始化</p></li><li><p>语法形式：</p><p>using B::B;</p></li></ul><h2 id="多继承且有对象成员时派生的构造函数定义语法"><a href="#多继承且有对象成员时派生的构造函数定义语法" class="headerlink" title="多继承且有对象成员时派生的构造函数定义语法"></a>多继承且有对象成员时派生的构造函数定义语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">派生类名::派生类名(形参表):</div><div class="line">基类名1(参数), 基类名2(参数), ..., 基类名n(参数), </div><div class="line">本类成员（含对象成员）初始化列表</div><div class="line">&#123;</div><div class="line">        //其他初始化</div><div class="line">&#125;；</div></pre></td></tr></table></figure><h2 id="构造函数的执行顺序"><a href="#构造函数的执行顺序" class="headerlink" title="构造函数的执行顺序"></a>构造函数的执行顺序</h2><ol><li><p>调用基类构造函数</p><p>顺序按照它们被继承时声明的顺序（从左向右）</p></li><li><p>对初始化列表中的成员进行初始化</p><p>顺序按照它们在类中定义的顺序</p><p>对象成员初始化时自动调用其所属类的构造函数，由初始化列表提供参数</p></li><li><p>执行派生类的构造函数体中的内容</p></li></ol><h1 id="派生类复制构造函数"><a href="#派生类复制构造函数" class="headerlink" title="派生类复制构造函数"></a>派生类复制构造函数</h1><h2 id="派生类未定义复制构造函数的情况"><a href="#派生类未定义复制构造函数的情况" class="headerlink" title="派生类未定义复制构造函数的情况"></a>派生类未定义复制构造函数的情况</h2><p>编译器会在需要时生成一个隐含的复制构造函数</p><p>先调用基类的复制构造函数</p><p>再为派生类新增的成员执行复制</p><h2 id="派生类定义了复制构造函数的情况"><a href="#派生类定义了复制构造函数的情况" class="headerlink" title="派生类定义了复制构造函数的情况"></a>派生类定义了复制构造函数的情况</h2><p>一般都要为基类的复制构造函数传递参数</p><p>复制构造函数只能接受一个参数，既用来初始化派生类定义的成员，也将被传递给基类的复制构造函数</p><p>基类的复制构造函数形参类型是基类对象的引用，实参可以是派生类对象的引用</p><p>例如: <code>C::C(const C &amp;c1): B(c1) {…}</code></p><h1 id="派生类的析构函数"><a href="#派生类的析构函数" class="headerlink" title="派生类的析构函数"></a>派生类的析构函数</h1><p>析构函数不被继承，派生类如果需要，要自行声明析构函数</p><p>声明方法与无继承关系时类的析构函数相同</p><p>不需要显式地调用基类的析构函数，系统会自动隐式调用</p><p>先执行派生类析构函数的函数体，再调用基类的析构函数</p><h1 id="访问从基类继承的成员"><a href="#访问从基类继承的成员" class="headerlink" title="访问从基类继承的成员"></a>访问从基类继承的成员</h1><p>当派生类与基类中有相同成员时：</p><ul><li>若未特别限定，则通过派生类对象使用的是派生类中的同名成员</li><li>如要通过派生类对象访问基类中被隐藏的同名成员，应使用基类名和作用域操作符（::）来限定</li></ul><p>如果从不同基类继承了同名成员，但是在派生类中没有定义同名成员，“<strong>派生类对象名或引用名.成员名</strong>”、“<strong>派生类指针-&gt;成员名</strong>”访问成员存在二义性问题</p><ul><li>解决方式：用类名限定</li></ul><h1 id="虚基类"><a href="#虚基类" class="headerlink" title="虚基类"></a>虚基类</h1><p>需要解决的问题</p><ul><li>当派生类从多个基类派生，而这些基类又共同基类，则在访问此共同基类中的成员时，将产生冗余，并有可能因冗余带来不一致性</li></ul><p>虚基类声明</p><ul><li>以virtual说明基类继承方式</li><li>例：<code>class B1:virtual public B</code></li></ul><p>作用</p><ul><li>主要用来解决多继承时可能发生的对同一基类继承多次而产生的二义性问题</li><li>为最远的派生类提供唯一的基类成员，而不重复产生多次复制</li></ul><p>注意：</p><ul><li>在第一级继承时就要将共同基类设计为虚基类</li></ul><h2 id="虚基类及其派生类构造函数"><a href="#虚基类及其派生类构造函数" class="headerlink" title="虚基类及其派生类构造函数"></a>虚基类及其派生类构造函数</h2><p>建立对象时所指定的类称为<strong>最远派生类</strong></p><p>虚基类的成员是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的</p><p>在整个继承结构中，直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化表中为虚基类的构造函数列出参数。如果未列出，则表示调用该虚基类的默认构造函数</p><p>在建立对象时，只有最远派生类的构造函数调用虚基类的构造函数，其他类对虚基类构造函数的调用被忽略</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base0</span> &#123;</span>   </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Base0(<span class="keyword">int</span> var) : var0(var) &#123; &#125;</div><div class="line">    <span class="keyword">int</span> var0;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun0</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Member of Base0"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Base0 &#123;</div><div class="line"><span class="keyword">public</span>: </div><div class="line">    Base1(<span class="keyword">int</span> var) : Base0(var) &#123; &#125;</div><div class="line">    <span class="keyword">int</span> var1;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Base0 &#123; </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Base2(<span class="keyword">int</span> var) : Base0(var) &#123; &#125;</div><div class="line">    <span class="keyword">int</span> var2;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Derived(<span class="keyword">int</span> var) : Base0(var), Base1(var), Base2(var) &#123; &#125;</div><div class="line">    <span class="keyword">int</span> var;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span></div><div class="line"><span class="function">   </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Member of Derived"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    <span class="comment">//程序主函数</span></div><div class="line">    <span class="function">Derived <span class="title">d</span><span class="params">(<span class="number">1</span>)</span></span>;</div><div class="line">    d.var0 = <span class="number">2</span>; <span class="comment">//直接访问虚基类的数据成员</span></div><div class="line">    d.fun0();   <span class="comment">//直接访问虚基类的函数成员</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><h2 id="双目运算符重载规则"><a href="#双目运算符重载规则" class="headerlink" title="双目运算符重载规则"></a>双目运算符重载规则</h2><p>如果要重载 B 为类成员函数，使之能够实现表达式 oprd1 B oprd2，其中 oprd1 为A 类对象，则 B 应被重载为 A 类的成员函数，形参类型应该是 oprd2 所属的类型</p><p>经重载后，表达式 oprd1 B oprd2 相当于 oprd1.operator B(oprd2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Complex(<span class="keyword">double</span> r = <span class="number">0.0</span>, <span class="keyword">double</span> i = <span class="number">0.0</span>) : real(r), imag(i) &#123; &#125;</div><div class="line">    <span class="comment">//运算符+重载成员函数</span></div><div class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;c2) <span class="keyword">const</span>;</div><div class="line">    <span class="comment">//运算符-重载成员函数</span></div><div class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp;c2) <span class="keyword">const</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">const</span></span>;   <span class="comment">//输出复数</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">double</span> real;    <span class="comment">//复数实部</span></div><div class="line">    <span class="keyword">double</span> imag;    <span class="comment">//复数虚部</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//复数类加减法运算重载为成员函数</span></div><div class="line">Complex Complex::<span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;c2) <span class="keyword">const</span>&#123;</div><div class="line">  <span class="comment">//创建一个临时无名对象作为返回值 </span></div><div class="line">  <span class="keyword">return</span> Complex(real+c2.real, imag+c2.imag); </div><div class="line">&#125;</div><div class="line"></div><div class="line">Complex Complex::<span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp;c2) <span class="keyword">const</span>&#123;</div><div class="line"> <span class="comment">//创建一个临时无名对象作为返回值</span></div><div class="line">    <span class="keyword">return</span> Complex(real-c2.real, imag-c2.imag); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Complex::display() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;real&lt;&lt;<span class="string">", "</span>&lt;&lt;imag&lt;&lt;<span class="string">")"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//复数类加减法运算重载为成员函数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Complex c1(5, 4), c2(2, 10), c3;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 = "</span>; c1.display();</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c2 = "</span>; c2.display();</div><div class="line">    c3 = c1 - c2;   <span class="comment">//使用重载运算符完成复数减法</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c3 = c1 - c2 = "</span>; c3.display();</div><div class="line">    c3 = c1 + c2;   <span class="comment">//使用重载运算符完成复数加法</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c3 = c1 + c2 = "</span>; c3.display();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="前置单目运算符重载规则"><a href="#前置单目运算符重载规则" class="headerlink" title="前置单目运算符重载规则"></a>前置单目运算符重载规则</h2><p>如果要重载 U 为类成员函数，使之能够实现表达式 U oprd，其中 oprd 为A类对象，则 U 应被重载为 A 类的成员函数，无形参。</p><p>经重载后，表达式 U oprd 相当于 oprd.operator U()</p><h2 id="后置单目运算符-和–重载规则"><a href="#后置单目运算符-和–重载规则" class="headerlink" title="后置单目运算符 ++和–重载规则"></a>后置单目运算符 ++和–重载规则</h2><p>如果要重载 ++或–为类成员函数，使之能够实现表达式 oprd++ 或 oprd– ，其中 oprd 为A类对象，则 ++或– 应被重载为 A 类的成员函数，且具有一个 int 类型形参。</p><p>经重载后，表达式 oprd++ 相当于 oprd.operator ++(0)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> &#123;</span><span class="comment">//时钟类定义</span></div><div class="line"><span class="keyword">public</span>: </div><div class="line">    Clock(<span class="keyword">int</span> hour = <span class="number">0</span>, <span class="keyword">int</span> minute = <span class="number">0</span>, <span class="keyword">int</span> second = <span class="number">0</span>);</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">  <span class="comment">//前置单目运算符重载</span></div><div class="line">    Clock&amp; <span class="keyword">operator</span> ++ ();</div><div class="line">  <span class="comment">//后置单目运算符重载</span></div><div class="line">    Clock <span class="keyword">operator</span> ++ (<span class="keyword">int</span>);    </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> hour, minute, second;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Clock::Clock(<span class="keyword">int</span> hour, <span class="keyword">int</span> minute, <span class="keyword">int</span> second) &#123;    </div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt;= hour &amp;&amp; hour &lt; <span class="number">24</span> &amp;&amp; <span class="number">0</span> &lt;= minute &amp;&amp; minute &lt; <span class="number">60</span></div><div class="line">        &amp;&amp; <span class="number">0</span> &lt;= second &amp;&amp; second &lt; <span class="number">60</span>) &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;hour = hour;</div><div class="line">        <span class="keyword">this</span>-&gt;minute = minute;</div><div class="line">        <span class="keyword">this</span>-&gt;second = second;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Time error!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> Clock::showTime() <span class="keyword">const</span> &#123;  <span class="comment">//显示时间</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; hour &lt;&lt; <span class="string">":"</span> &lt;&lt; minute &lt;&lt; <span class="string">":"</span> &lt;&lt; second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//重载前置++和后置++为时钟类成员函数</span></div><div class="line">Clock &amp; Clock::<span class="keyword">operator</span> ++ () &#123; </div><div class="line">    second++;</div><div class="line">    <span class="keyword">if</span> (second &gt;= <span class="number">60</span>) &#123;</div><div class="line">        second -= <span class="number">60</span>;  minute++;</div><div class="line">        <span class="keyword">if</span> (minute &gt;= <span class="number">60</span>) &#123;</div><div class="line">          minute -= <span class="number">60</span>; hour = (hour + <span class="number">1</span>) % <span class="number">24</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Clock Clock::<span class="keyword">operator</span> ++ (<span class="keyword">int</span>) &#123;</div><div class="line">    <span class="comment">//注意形参表中的整型参数</span></div><div class="line">    Clock old = *<span class="keyword">this</span>;</div><div class="line">    ++(*<span class="keyword">this</span>);  <span class="comment">//调用前置“++”运算符</span></div><div class="line">    <span class="keyword">return</span> old;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="function">Clock <span class="title">myClock</span><span class="params">(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>)</span></span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"First time output: "</span>;</div><div class="line">    myClock.showTime();</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Show myClock++:    "</span>;</div><div class="line">    (myClock++).showTime();</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Show ++myClock:    "</span>;</div><div class="line">    (++myClock).showTime();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="运算符重载为非成员函数"><a href="#运算符重载为非成员函数" class="headerlink" title="运算符重载为非成员函数"></a>运算符重载为非成员函数</h2><p>有些运算符不能重载为成员函数，例如二元运算符的左操作数不是对象，或者是不能由我们重载运算符的对象</p><h3 id="运算符重载为非成员函数的规则"><a href="#运算符重载为非成员函数的规则" class="headerlink" title="运算符重载为非成员函数的规则"></a>运算符重载为非成员函数的规则</h3><ul><li>函数的形参代表依自左至右次序排列的各操作数</li><li>参数个数=原操作数个数（后置++、–除外）</li><li>至少应该有一个自定义类型的参数</li><li>后置单目运算符 ++和–的重载函数，形参列表中要增加一个int，但不必写形参名</li><li>如果在运算符的重载函数中需要操作某类对象的私有成员，可以将此函数声明为该类的友元</li><li>双目运算符 B重载后，表达式oprd1 B oprd2等同于operator B(oprd1,oprd2 )</li><li>前置单目运算符 B重载后，表达式 B oprd等同于operator B(oprd )</li><li>后置单目运算符 ++和–重载后，表达式 oprd B等同于operator B(oprd,0 )</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//重载Complex的加减法和“&lt;&lt;”运算符为非成员函数</span></div><div class="line"><span class="comment">//将+、-（双目）重载为非成员函数，并将其声明为复数类的友元，两个操作数都是复数类的常引用。 • 将&lt;&lt;（双目）重载为非成员函数，并将其声明为复数类的友元，它的左操作数是std::ostream引用，右操作数为复数类的常引用，返回std::ostream引用</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">    Complex(<span class="keyword">double</span> r = <span class="number">0.0</span>, <span class="keyword">double</span> i = <span class="number">0.0</span>) : real(r), imag(i) &#123; &#125;  </div><div class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;c1, <span class="keyword">const</span> Complex &amp;c2);</div><div class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>-(<span class="keyword">const</span> Complex &amp;c1, <span class="keyword">const</span> Complex &amp;c2);</div><div class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Complex &amp;c);</div><div class="line">    <span class="keyword">private</span>:    </div><div class="line">    <span class="keyword">double</span> real;  <span class="comment">//复数实部</span></div><div class="line">    <span class="keyword">double</span> imag;  <span class="comment">//复数虚部</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;c1, <span class="keyword">const</span> Complex &amp;c2)&#123;</div><div class="line">    <span class="keyword">return</span> Complex(c1.real+c2.real, c1.imag+c2.imag); </div><div class="line">&#125;</div><div class="line">Complex <span class="keyword">operator</span>-(<span class="keyword">const</span> Complex &amp;c1, <span class="keyword">const</span> Complex &amp;c2)&#123;</div><div class="line">    <span class="keyword">return</span> Complex(c1.real-c2.real, c1.imag-c2.imag); </div><div class="line">&#125;</div><div class="line"></div><div class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Complex &amp;c)&#123;</div><div class="line">    out &lt;&lt; <span class="string">"("</span> &lt;&lt; c.real &lt;&lt; <span class="string">", "</span> &lt;&lt; c.imag &lt;&lt; <span class="string">")"</span>;</div><div class="line">    <span class="keyword">return</span> out;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </div><div class="line">    Complex c1(5, 4), c2(2, 10), c3;    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 = "</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c2 = "</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    c3 = c1 - c2;   <span class="comment">//使用重载运算符完成复数减法</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c3 = c1 - c2 = "</span> &lt;&lt; c3 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    c3 = c1 + c2;   <span class="comment">//使用重载运算符完成复数加法</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c3 = c1 + c2 = "</span> &lt;&lt; c3 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><ul><li>用virtual关键字说明的函数</li><li>虚函数是实现运行时多态性基础</li><li>C++中的虚函数是动态绑定的函数</li><li>虚函数必须是非静态的成员函数，虚函数经过派生之后，就可以实现运行过程中的多态</li><li>一般成员函数可以是虚函数</li><li>构造函数不能是虚函数</li><li>析构函数可以是虚函数</li><li>虚函数声明只能出现在类定义中的函数原型声明中，而不能在成员函数实现的时候</li><li>在派生类中可以对基类中的成员函数进行覆盖</li><li>虚函数一般不声明为内联函数，因为对虚函数的调用需要动态绑定，而对内联函数的处理是静态的</li></ul><h2 id="virtual-关键字"><a href="#virtual-关键字" class="headerlink" title="virtual 关键字"></a>virtual 关键字</h2><ul><li>派生类可以不显式地用virtual声明虚函数，这时系统就会用以下规则来判断派生类的一个函数成员是不是虚函数：<ul><li>该函数是否与基类的虚函数有相同的名称、参数个数及对应参数类型</li><li>该函数是否与基类的虚函数有相同的返回值或者满足类型兼容规则的指针、引用型的返回值</li></ul></li><li>如果从名称、参数及返回值三个方面检查之后，派生类的函数满足上述条件，就会自动确定为虚函数。这时，派生类的虚函数便覆盖了基类的虚函数</li><li>派生类中的虚函数还会隐藏基类中同名函数的所有其它重载形式</li><li>一般习惯于在派生类的函数中也使用virtual关键字，以增加程序的可读性</li></ul><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><p>为什么需要虚析构函数？ - 可能通过基类指针删除派生类对象； - 如果你打算允许其他人通过基类指针调用对象的析构函数（通过delete这样做是正常的），就需要让基类的析构函数成为虚函数，否则执行delete的结果是不确定的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~Base();</div><div class="line">&#125;;</div><div class="line">Base::~Base()</div><div class="line">&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base "</span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~Derived();</div><div class="line">&#125;;</div><div class="line">Derived::~Derived()&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derived "</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(Base *b)</span></span>&#123;</div><div class="line">    <span class="keyword">delete</span> b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    Base *b = <span class="keyword">new</span> Derived();</div><div class="line">    fun(b);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="虚表与动态绑定"><a href="#虚表与动态绑定" class="headerlink" title="虚表与动态绑定"></a>虚表与动态绑定</h2><p>虚表</p><ul><li>每个多态类有一个虚表（virtual table）</li><li>虚表中有当前类的各个虚函数的入口地址</li><li>每个对象有一个指向当前类的虚表的指针（虚指针vptr）</li></ul><p>动态绑定的实现</p><ul><li>构造函数中为对象的虚指针赋值</li><li>通过多态类型的指针或引用调用成员函数时，通过虚指针找到虚表，进而找到所调用的虚函数的入口地址</li><li>通过该入口地址调用虚函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//在32位机器上，sizeof(A)为：4；在64位机器上，sizeof(A)为：8</span></div><div class="line"><span class="comment">//因为A中含有一个指向虚表的指针，在32位机器上，指针占4个字节；在64位机器上，指针占8个字节</span></div></pre></td></tr></table></figure><h1 id="抽象类和纯虚函数"><a href="#抽象类和纯虚函数" class="headerlink" title="抽象类和纯虚函数"></a>抽象类和纯虚函数</h1><p>纯虚函数是一个在基类中声明的虚函数，它在该基类中没有定义具体的操作内容，要求各派生类根据实际需要定义自己的版本，纯虚函数的声明格式为：virtual 函数类型 函数名(参数表) = 0;</p><p>带有纯虚函数的类称为抽象类</p><h2 id="抽象类作用"><a href="#抽象类作用" class="headerlink" title="抽象类作用"></a>抽象类作用</h2><ul><li>抽象类为抽象和设计的目的而声明</li><li>将有关的数据和行为组织在一个继承层次结构中，保证派生类具有要求的行为</li><li>对于暂时无法实现的函数，可以声明为纯虚函数，留给派生类去实现</li></ul><p>注意：</p><ul><li>抽象类只能作为基类来使用。</li><li>不能定义抽象类的对象。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span> </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;   <span class="comment">//纯虚函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span>:</span> <span class="keyword">public</span> Base1 &#123; </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">//覆盖基类的虚函数</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">void</span> Base2::display() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base2::display()"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base2 &#123; </div><div class="line"><span class="keyword">public</span>:</div><div class="line">     <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">//覆盖基类的虚函数</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">void</span> Derived::display() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derived::display()"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(Base1 *ptr)</span> </span>&#123; </div><div class="line">    ptr-&gt;display(); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </div><div class="line">    Base2 base2;    </div><div class="line">    Derived derived;    </div><div class="line">    fun(&amp;base2);    </div><div class="line">    fun(&amp;derived);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="override"><a href="#override" class="headerlink" title="override"></a>override</h1><p>C++11 引入显式函数覆盖，在编译期而非运行期捕获此类错误。 - 在虚函数显式重载中运用，编译器会检查基类是否存在一虚拟函数，与派生类中带有声明override的虚拟函数，有相同的函数签名（signature）；若不存在，则会回报错误</p><ul><li>多态行为的基础：基类声明虚函数，继承类声明一个函数覆盖该虚函数</li><li>覆盖要求： 函数签名（signatture）完全一致</li><li>函数签名包括：函数名 参数列表 const</li></ul><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><p>C++11提供final，用来避免类被继承，或是基类的函数被改写 例： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base1</span> <span class="title">final</span> &#123;</span> &#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived1</span> :</span> Base1 &#123; &#125;; <span class="comment">// 编译错误：Base1为final，不允许被继承</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base2</span> &#123;</span> <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> final</span>; &#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived2</span> :</span> Base2 &#123; <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>; <span class="comment">// 编译错误：Base2::f 为final，不允许被覆盖 &#125;;</span></div></pre></td></tr></table></figure><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>语法形式：</p><p>template &lt;模板参数表&gt;</p><p>模板参数表的内容：</p><ul><li>类型参数：class（或typename） 标识符</li><li>常量参数：类型说明符 标识符</li><li>模板参数：template &lt;参数表&gt; class标识符</li></ul><p>注意：</p><ul><li>一个函数模板并非自动可以处理所有类型的数据</li><li>只有能够进行函数模板中运算的类型，可以作为类型实参</li><li>自定义的类，需要重载模板中的运算符，才能作为类型实参</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;  //定义函数模板</span></div><div class="line"><span class="class"><span class="title">void</span> <span class="title">outputArray</span>(<span class="title">const</span> <span class="title">T</span> *<span class="title">array</span>, <span class="title">int</span> <span class="title">count</span>) &#123;</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">array</span>[i] &lt;&lt; <span class="string">" "</span>; <span class="comment">//如果数组元素是类的对象，需要该对象所属类重载了流插入运算符“&lt;&lt;”</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;     </div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> A_COUNT = <span class="number">8</span>, B_COUNT = <span class="number">8</span>, C_COUNT = <span class="number">20</span>;</div><div class="line">    <span class="keyword">int</span> a [A_COUNT] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;;</div><div class="line">    <span class="keyword">double</span> b[B_COUNT] = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span> &#125;;</div><div class="line">    <span class="keyword">char</span> c[C_COUNT] = <span class="string">"Welcome!"</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" a array contains:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    outputArray(a, A_COUNT);    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" b array contains:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    outputArray(b, B_COUNT);    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" c array contains:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    outputArray(c, C_COUNT);    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><p>使用类模板使用户可以为类声明一种模式，使得类中的某些数据成员、某些成员函数的参数、某些成员函数的返回值，能取任意类型（包括基本类型的和用户自定义类型）</p><p>类模板 template &lt;模板参数表&gt; class 类名 {类成员声明};</p><p>如果需要在类模板以外定义其成员函数，则要采用以下的形式： template &lt;模板参数表&gt; 类型名 类名&lt;模板参数标识符列表&gt;::函数名（参数表）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> id;       <span class="comment">//学号</span></div><div class="line">  <span class="keyword">float</span> gpa;    <span class="comment">//平均分</span></div><div class="line">&#125;; </div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">class</span> <span class="title">Store</span> &#123;</span><span class="comment">//类模板：实现对任意类型数据进行存取</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T item; <span class="comment">// item用于存放任意类型的数据</span></div><div class="line">    <span class="keyword">bool</span> haveValue;  <span class="comment">// haveValue标记item是否已被存入内容</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Store();</div><div class="line">    <span class="function">T &amp;<span class="title">getElem</span><span class="params">()</span></span>;   <span class="comment">//提取数据函数</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putElem</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>;  <span class="comment">//存入数据函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;  </span></div><div class="line"><span class="class"><span class="title">Store</span>&lt;T&gt;:</span>:Store(): haveValue(<span class="literal">false</span>) &#123; &#125; </div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">T</span> &amp;<span class="title">Store</span>&lt;T&gt;:</span>:getElem() &#123;</div><div class="line">    <span class="comment">//如试图提取未初始化的数据，则终止程序</span></div><div class="line">    <span class="keyword">if</span> (!haveValue) &#123;   </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No item present!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);    <span class="comment">//使程序完全退出，返回到操作系统。</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> item;        <span class="comment">// 返回item中存放的数据 </span></div><div class="line">&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">void</span> <span class="title">Store</span>&lt;T&gt;:</span>:putElem(<span class="keyword">const</span> T &amp;x) &#123;</div><div class="line">    <span class="comment">// 将haveValue 置为true，表示item中已存入数值   </span></div><div class="line">    haveValue = <span class="literal">true</span>;   </div><div class="line">    item = x;           <span class="comment">// 将x值存入item</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Store&lt;<span class="keyword">int</span>&gt; s1, s2;  </div><div class="line">    s1.putElem(<span class="number">3</span>);  </div><div class="line">    s2.putElem(<span class="number">-7</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; s1.getElem() &lt;&lt; <span class="string">"  "</span> &lt;&lt; s2.getElem() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    Student g = &#123; <span class="number">1000</span>, <span class="number">23</span> &#125;;</div><div class="line">    Store&lt;Student&gt; s3;</div><div class="line">    s3.putElem(g); </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The student id is "</span> &lt;&lt; s3.getElem().id &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    Store&lt;<span class="keyword">double</span>&gt; d;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Retrieving object D... "</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; d.getElem() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">   <span class="comment">//d未初始化，执行函数D.getElement()时导致程序终止</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="数组类模板"><a href="#数组类模板" class="headerlink" title="数组类模板"></a>数组类模板</h2><p>自己实现一个动态数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ARRAY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;  //数组类模板定义</span></div><div class="line"><span class="class"><span class="title">class</span> <span class="title">Array</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T* <span class="built_in">list</span>;        <span class="comment">//用于存放动态分配的数组内存首地址</span></div><div class="line">    <span class="keyword">int</span> size;       <span class="comment">//数组大小（元素个数）</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Array(<span class="keyword">int</span> sz = <span class="number">50</span>);     <span class="comment">//构造函数</span></div><div class="line">    Array(<span class="keyword">const</span> Array&lt;T&gt; &amp;a);   <span class="comment">//复制构造函数</span></div><div class="line">    ~Array();           <span class="comment">//析构函数</span></div><div class="line">    Array&lt;T&gt; &amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Array&lt;T&gt; &amp;rhs);    <span class="comment">//重载"=“</span></div><div class="line">    T &amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> i); <span class="comment">//重载"[]”</span></div><div class="line">    <span class="keyword">const</span> T &amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> i) <span class="keyword">const</span>;     <span class="comment">//重载"[]”常函数</span></div><div class="line">    <span class="keyword">operator</span> T * ();        <span class="comment">//重载到T*类型的转换</span></div><div class="line">    <span class="keyword">operator</span> <span class="keyword">const</span> T * () <span class="keyword">const</span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> <span class="keyword">const</span></span>;        <span class="comment">//取数组的大小</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> sz)</span></span>;        <span class="comment">//修改数组的大小</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">Array</span>&lt;T&gt;:</span>:Array(<span class="keyword">int</span> sz) &#123;<span class="comment">//构造函数</span></div><div class="line">    assert(sz &gt;= <span class="number">0</span>);<span class="comment">//sz为数组大小（元素个数），应当非负</span></div><div class="line">    size = sz;  <span class="comment">// 将元素个数赋值给变量size</span></div><div class="line">    <span class="built_in">list</span> = <span class="keyword">new</span> T [size];    <span class="comment">//动态分配size个T类型的元素空间</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">Array</span>&lt;T&gt;:</span>:~Array() &#123; <span class="comment">//析构函数</span></div><div class="line">    <span class="keyword">delete</span> [] <span class="built_in">list</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; </span></div><div class="line"><span class="class"><span class="title">Array</span>&lt;T&gt;:</span>:Array(<span class="keyword">const</span> Array&lt;T&gt; &amp;a) &#123;    <span class="comment">//复制构造函数</span></div><div class="line">    size = a.size;     <span class="comment">//从对象x取得数组大小，并赋值给当前对象的成员</span></div><div class="line">    <span class="built_in">list</span> = <span class="keyword">new</span> T[size]; <span class="comment">// 动态分配n个T类型的元素空间</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)     <span class="comment">//从对象X复制数组元素到本对象 </span></div><div class="line">        <span class="built_in">list</span>[i] = a.<span class="built_in">list</span>[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//重载"="运算符，将对象rhs赋值给本对象。实现对象之间的整体赋值</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">Array</span>&lt;T&gt; &amp;<span class="title">Array</span>&lt;T&gt;:</span>:<span class="keyword">operator</span> = (<span class="keyword">const</span> Array&lt;T&gt;&amp; rhs) &#123;</div><div class="line">    <span class="keyword">if</span> (&amp;rhs != <span class="keyword">this</span>) &#123;</div><div class="line"><span class="comment">//如果本对象中数组大小与rhs不同，则删除数组原有内存，然后重新分配</span></div><div class="line">        <span class="keyword">if</span> (size != rhs.size) &#123;</div><div class="line">            <span class="keyword">delete</span> [] <span class="built_in">list</span>; <span class="comment">//删除数组原有内存</span></div><div class="line">            size = rhs.size;    <span class="comment">//设置本对象的数组大小</span></div><div class="line">            <span class="built_in">list</span> = <span class="keyword">new</span> T[size];  <span class="comment">//重新分配size个元素的内存</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//从对象X复制数组元素到本对象  </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">            <span class="built_in">list</span>[i] = rhs.<span class="built_in">list</span>[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;   <span class="comment">//返回当前对象的引用</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//重载下标运算符，实现与普通数组一样通过下标访问元素，具有越界检查功能</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">T</span> &amp;<span class="title">Array</span>&lt;T&gt;:</span>:<span class="keyword">operator</span>[] (<span class="keyword">int</span> n) &#123;</div><div class="line">    assert(n &gt;= <span class="number">0</span> &amp;&amp; n &lt; size);  <span class="comment">//检查下标是否越界</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">list</span>[n];       <span class="comment">//返回下标为n的数组元素</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">const</span> <span class="title">T</span> &amp;<span class="title">Array</span>&lt;T&gt;:</span>:<span class="keyword">operator</span>[] (<span class="keyword">int</span> n) <span class="keyword">const</span> &#123;</div><div class="line">    assert(n &gt;= <span class="number">0</span> &amp;&amp; n &lt; size);  <span class="comment">//检查下标是否越界</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">list</span>[n];       <span class="comment">//返回下标为n的数组元素</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//重载指针转换运算符，将Array类的对象名转换为T类型的指针</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">Array</span>&lt;T&gt;:</span>:<span class="keyword">operator</span> T * () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;    <span class="comment">//返回当前对象中私有数组的首地址</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//取当前数组的大小</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">int</span> <span class="title">Array</span>&lt;T&gt;:</span>:getSize() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> size;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将数组大小修改为sz</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">void</span> <span class="title">Array</span>&lt;T&gt;:</span>:resize(<span class="keyword">int</span> sz) &#123;</div><div class="line">    assert(sz &gt;= <span class="number">0</span>);    <span class="comment">//检查sz是否非负</span></div><div class="line">    <span class="keyword">if</span> (sz == size) <span class="comment">//如果指定的大小与原有大小一样，什么也不做</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    T* newList = <span class="keyword">new</span> T [sz];    <span class="comment">//申请新的数组内存</span></div><div class="line">    <span class="keyword">int</span> n = (sz &lt; size) ? sz : size;<span class="comment">//将sz与size中较小的一个赋值给n</span></div><div class="line">    <span class="comment">//将原有数组中前n个元素复制到新数组中</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        newList[i] = <span class="built_in">list</span>[i];</div><div class="line">    <span class="keyword">delete</span>[] <span class="built_in">list</span>;      <span class="comment">//删除原数组</span></div><div class="line">    <span class="built_in">list</span> = newList; <span class="comment">// 使list指向新数组</span></div><div class="line">    size = sz;  <span class="comment">//更新size</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">//ARRAY_H</span></span></div></pre></td></tr></table></figure><h1 id="泛型程序设计与STL"><a href="#泛型程序设计与STL" class="headerlink" title="泛型程序设计与STL"></a>泛型程序设计与STL</h1><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是算法和容器的桥梁</p><ul><li>迭代器用作访问容器中的元素</li><li>算法不直接操作容器中的数据，而是通过迭代器间接操作</li></ul><p>算法和容器独立</p><ul><li>增加新的算法，无需影响容器的实现</li><li>增加新的容器，原有的算法也能适用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//将来自输入迭代器的n个T类型的数值排序，将结果通过输出迭代器result输出</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">InputIterator</span>, <span class="title">class</span> <span class="title">OutputIterator</span>&gt;</span></div><div class="line"><span class="class"><span class="title">void</span> <span class="title">mySort</span>(<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>, <span class="title">OutputIterator</span> <span class="title">result</span>) &#123;</span></div><div class="line">    <span class="comment">//通过输入迭代器将输入数据存入向量容器s中</span></div><div class="line">    <span class="built_in">vector</span>&lt;T&gt; s;</div><div class="line">    <span class="keyword">for</span> (;first != last; ++first)</div><div class="line">        s.push_back(*first);</div><div class="line">    <span class="comment">//对s进行排序，sort函数的参数必须是随机访问迭代器</span></div><div class="line">    sort(s.begin(), s.end());  </div><div class="line">    copy(s.begin(), s.end(), result);   <span class="comment">//将s序列通过输出迭代器输出</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//将s数组的内容排序后输出</span></div><div class="line">    <span class="keyword">double</span> a[<span class="number">5</span>] = &#123; <span class="number">1.2</span>, <span class="number">2.4</span>, <span class="number">0.8</span>, <span class="number">3.3</span>, <span class="number">3.2</span> &#125;;</div><div class="line">    mySort&lt;<span class="keyword">double</span>&gt;(a, a + <span class="number">5</span>, ostream_iterator&lt;<span class="keyword">double</span>&gt;(<span class="built_in">cout</span>, <span class="string">" "</span>));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="comment">//从标准输入读入若干个整数，将排序后的结果输出</span></div><div class="line">    mySort&lt;<span class="keyword">int</span>&gt;(istream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cin</span>), istream_iterator&lt;<span class="keyword">int</span>&gt;(), ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>, <span class="string">" "</span>));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="逆向迭代器"><a href="#逆向迭代器" class="headerlink" title="逆向迭代器"></a>逆向迭代器</h2><ul><li>rbegin() ：指向容器尾的逆向迭代器</li><li>rend()：指向容器首的逆向迭代器</li></ul><p>逆向迭代器的类型名的表示方式如下：</p><ul><li>S::reverse_iterator：逆向迭代器类型</li><li>S::const_reverse_iterator：逆向常迭代器类型</li></ul><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><p>一个行为类似函数的对象</p><p>可以没有参数，也可以带有若干参数</p><p>其功能是获取一个值，或者改变操作的状态</p><p>普通函数就是函数对象</p><p>重载了“()”运算符的类的实例是函数对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt; //包含数值算法头文件</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultClass</span>&#123;</span>  <span class="comment">//定义MultClass类</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="comment">//重载操作符operator()</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x * y; &#125;   </div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The result by multipling all elements in a is "</span></div><div class="line">        &lt;&lt; accumulate(a, a + N, <span class="number">1</span>, MultClass()) <span class="comment">//将类multclass传递给通用算法</span></div><div class="line">        &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> intArr[] = &#123; <span class="number">30</span>, <span class="number">90</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">70</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">80</span> &#125;;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="keyword">sizeof</span>(intArr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(intArr, intArr + N);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"before sorting:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    copy(a.begin(),a.end(),ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>,<span class="string">"\t"</span>));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    sort(a.begin(), a.end(), greater&lt;<span class="keyword">int</span>&gt;()); <span class="comment">//STL中的二元谓词函数对象</span></div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"after sorting:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    copy(a.begin(),a.end(),ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>,<span class="string">"\t"</span>));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="I-O流"><a href="#I-O流" class="headerlink" title="I/O流"></a>I/O流</h1><h2 id="操纵符（manipulator）"><a href="#操纵符（manipulator）" class="headerlink" title="操纵符（manipulator）"></a>操纵符（manipulator）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用width控制输出宽度</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">        <span class="built_in">cout</span>.width(<span class="number">10</span>);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果:</span></div><div class="line"><span class="comment">      1.23</span></div><div class="line"><span class="comment">     35.36</span></div><div class="line"><span class="comment">     653.7</span></div><div class="line"><span class="comment">   4358.24</span></div><div class="line"><span class="comment">   */</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用setw操纵符指定宽度</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="built_in">string</span> names[] = &#123; <span class="string">"Zoot"</span>, <span class="string">"Jimmy"</span>, <span class="string">"Al"</span>, <span class="string">"Stan"</span> &#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; names[i] </div><div class="line">     &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果:</span></div><div class="line"><span class="comment">  Zoot      1.23</span></div><div class="line"><span class="comment"> Jimmy     35.36</span></div><div class="line"><span class="comment">    Al     653.7</span></div><div class="line"><span class="comment">  Stan   4358.24</span></div><div class="line"><span class="comment">  */</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置对齐方式</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="built_in">string</span> names[] = &#123; <span class="string">"Zoot"</span>, <span class="string">"Jimmy"</span>, <span class="string">"Al"</span>, <span class="string">"Stan"</span> &#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::left)<span class="comment">//左对齐</span></div><div class="line">           &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; names[i]</div><div class="line">           &lt;&lt; resetiosflags(ios_base::left)</div><div class="line">           &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果:</span></div><div class="line"><span class="comment">Zoot        1.23</span></div><div class="line"><span class="comment">Jimmy      35.36</span></div><div class="line"><span class="comment">Al         653.7</span></div><div class="line"><span class="comment">Stan     4358.24</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控制输出精度——未指定fixed或scientific</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="built_in">string</span> names[] = &#123; <span class="string">"Zoot"</span>, <span class="string">"Jimmy"</span>, <span class="string">"Al"</span>, <span class="string">"Stan"</span> &#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::left)</div><div class="line">        &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; names[i]</div><div class="line">        &lt;&lt; resetiosflags(ios_base::left)<span class="comment">//清除左对齐设置</span></div><div class="line">        &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果：</span></div><div class="line"><span class="comment">Zoot           1</span></div><div class="line"><span class="comment">Jimmy     4e+001</span></div><div class="line"><span class="comment">Al        7e+002</span></div><div class="line"><span class="comment">Stan      4e+003</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控制输出精度——指定fixed</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="built_in">string</span> names[] = &#123; <span class="string">"Zoot"</span>, <span class="string">"Jimmy"</span>, <span class="string">"Al"</span>, <span class="string">"Stan"</span> &#125;;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::fixed);   </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::left)</div><div class="line">        &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; names[i]</div><div class="line">        &lt;&lt; resetiosflags(ios_base::left)<span class="comment">//清除左对齐设置</span></div><div class="line">        &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">输出结果：</div><div class="line">Zoot         <span class="number">1.2</span></div><div class="line">Jimmy       <span class="number">35.4</span></div><div class="line">Al         <span class="number">653.7</span></div><div class="line">Stan      <span class="number">4358.2</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控制输出精度——指定scientific</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="built_in">string</span> names[] = &#123; <span class="string">"Zoot"</span>, <span class="string">"Jimmy"</span>, <span class="string">"Al"</span>, <span class="string">"Stan"</span> &#125;;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::scientific);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::left)</div><div class="line">        &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; names[i]</div><div class="line">        &lt;&lt; resetiosflags(ios_base::left)<span class="comment">//清除左对齐设置</span></div><div class="line">        &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">输出结果：</div><div class="line">Zoot    <span class="number">1.2e+000</span></div><div class="line">Jimmy   <span class="number">3.5e+001</span></div><div class="line">Al      <span class="number">6.5e+002</span></div><div class="line">Stan    <span class="number">4.4e+003</span></div></pre></td></tr></table></figure><h2 id="二进制文件流"><a href="#二进制文件流" class="headerlink" title="二进制文件流"></a>二进制文件流</h2><p>使用ofstream构造函数中的模式参量指定二进制输出模式或以通常方式构造一个流，然后使用setmode成员函数，在文件打开后改变模式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//向二进制文件输出</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> mon, day, year;  </div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Date dt = &#123; <span class="number">6</span>, <span class="number">10</span>, <span class="number">92</span> &#125;;</div><div class="line">    <span class="function">ofstream <span class="title">file</span><span class="params">(<span class="string">"date.dat"</span>, ios_base::binary)</span></span>;</div><div class="line">    file.write(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;dt),<span class="keyword">sizeof</span>(dt));</div><div class="line">    file.close();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="字符串输出流（-ostringstream-）"><a href="#字符串输出流（-ostringstream-）" class="headerlink" title="字符串输出流（ ostringstream ）"></a>字符串输出流（ ostringstream ）</h2><p>将字符串作为输出流的目标，可以实现将其他数据类型转换为字符串的功能</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用ostringstream将数值转换为字符串</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//函数模板toString可以将各种支持“&lt;&lt;“插入符的类型的对象转换为字符串。</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">inline</span> <span class="title">string</span> <span class="title">toString</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">v</span>) &#123;</span></div><div class="line">    <span class="built_in">ostringstream</span> os;   <span class="comment">//创建字符串输出流</span></div><div class="line">    os &lt;&lt; v;        <span class="comment">//将变量v的值写入字符串流</span></div><div class="line">    <span class="keyword">return</span> os.str();    <span class="comment">//返回输出流生成的字符串</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> str1 = toString(<span class="number">5</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">string</span> str2 = toString(<span class="number">1.2</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果：</span></div><div class="line"><span class="comment">5</span></div><div class="line"><span class="comment">1.2</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h2 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h2><h3 id="重要的输入流类"><a href="#重要的输入流类" class="headerlink" title="重要的输入流类"></a>重要的输入流类</h3><ul><li>istream类最适合用于顺序文本模式输入，cin是其实例</li><li>ifstream类支持磁盘文件输入</li><li>istringstream类支持从内存中的字符串输入</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//get函数应用举例</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    <span class="keyword">while</span> ((ch = <span class="built_in">cin</span>.get()) != EOF)</div><div class="line">        <span class="built_in">cout</span>.put(ch);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为输入流指定一个终止字符</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> line;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Type a line terminated by 't' "</span> &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">    getline(<span class="built_in">cin</span>, line, <span class="string">'t'</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从文件读一个二进制记录到一个结构中</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SalaryInfo</span> &#123;</span></div><div class="line">    <span class="keyword">unsigned</span> id;</div><div class="line">    <span class="keyword">double</span> salary;</div><div class="line">&#125;; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    SalaryInfo employee1 = &#123; <span class="number">600001</span>, <span class="number">8000</span> &#125;;</div><div class="line">    <span class="function">ofstream <span class="title">os</span><span class="params">(<span class="string">"payroll"</span>, ios_base::out | ios_base::binary)</span></span>;</div><div class="line">    os.write(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;employee1), <span class="keyword">sizeof</span>(employee1));</div><div class="line">    os.close();</div><div class="line">    <span class="function">ifstream <span class="title">is</span><span class="params">(<span class="string">"payroll"</span>, ios_base::in | ios_base::binary)</span></span>;</div><div class="line">    <span class="keyword">if</span> (is) &#123;</div><div class="line">        SalaryInfo employee2;</div><div class="line">        is.read(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;employee2), <span class="keyword">sizeof</span>(employee2));</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; employee2.id &lt;&lt; <span class="string">" "</span> &lt;&lt; employee2.salary &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: Cannot open file 'payroll'."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    is.close();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用seekg函数设置位置指针</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> values[] = &#123; <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span> &#125;;</div><div class="line">    <span class="function">ofstream <span class="title">os</span><span class="params">(<span class="string">"integers"</span>, ios_base::out | ios_base::binary)</span></span>;</div><div class="line">    os.write(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(values), <span class="keyword">sizeof</span>(values));</div><div class="line">    os.close();</div><div class="line"></div><div class="line">    <span class="function">ifstream <span class="title">is</span><span class="params">(<span class="string">"integers"</span>, ios_base::in | ios_base::binary)</span></span>;</div><div class="line">    <span class="keyword">if</span> (is) &#123;</div><div class="line">        is.seekg(<span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">        <span class="keyword">int</span> v;</div><div class="line">        is.read(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;v), <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"The 4th integer in the file 'integers' is "</span> &lt;&lt; v &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: Cannot open file 'integers'."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//读一个文件并显示出其中0元素的位置</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="function">ifstream <span class="title">file</span><span class="params">(<span class="string">"integers"</span>, ios_base::in | ios_base::binary)</span></span>;</div><div class="line">    <span class="keyword">if</span> (file) &#123;</div><div class="line">        <span class="keyword">while</span> (file) &#123;<span class="comment">//读到文件尾file为0</span></div><div class="line">            streampos here = file.tellg();</div><div class="line">            <span class="keyword">int</span> v;</div><div class="line">            file.read(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;v), <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">            <span class="keyword">if</span> (file &amp;&amp; v == <span class="number">0</span>) </div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Position "</span> &lt;&lt; here &lt;&lt; <span class="string">" is 0"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: Cannot open file 'integers'."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    file.close();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="字符串输入流（-istringstream）"><a href="#字符串输入流（-istringstream）" class="headerlink" title="字符串输入流（ istringstream）"></a>字符串输入流（ istringstream）</h3><p>将字符串作为文本输入流的源，可以将字符串转换为其他数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用istringstream将字符串转换为数值</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">inline</span> <span class="title">T</span> <span class="title">fromString</span>(<span class="title">const</span> <span class="title">string</span> &amp;<span class="title">str</span>) &#123;</span></div><div class="line">    <span class="function"><span class="built_in">istringstream</span> <span class="title">is</span><span class="params">(str)</span></span>;  <span class="comment">//创建字符串输入流</span></div><div class="line">    T v;</div><div class="line">    is &gt;&gt; v;    <span class="comment">//从字符串输入流中读取变量v</span></div><div class="line">    <span class="keyword">return</span> v;   <span class="comment">//返回变量v</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> v1 = fromString&lt;<span class="keyword">int</span>&gt;(<span class="string">"5"</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">double</span> v2 = fromString&lt;<span class="keyword">double</span>&gt;(<span class="string">"1.2"</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; v2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果：</span></div><div class="line"><span class="comment">5</span></div><div class="line"><span class="comment">1.2</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h2 id="输入-输出流"><a href="#输入-输出流" class="headerlink" title="输入/输出流"></a>输入/输出流</h2><p>两个重要的输入/输出流</p><ul><li>一个iostream对象可以是数据的源或目的</li><li>两个重要的I/O流类都是从iostream派生的，它们是fstream和stringstream。这些类继承了前面描述的istream和ostream类的功能</li></ul><h3 id="fstream类"><a href="#fstream类" class="headerlink" title="fstream类"></a>fstream类</h3><ul><li>fstream类支持磁盘文件输入和输出</li><li>如果需要在同一个程序中从一个特定磁盘文件读并写到该磁盘文件，可以构造一个fstream对象</li><li>一个fstream对象是有两个逻辑子流的单个流，两个子流一个用于输入，另一个用于输出</li></ul><h3 id="stringstream类"><a href="#stringstream类" class="headerlink" title="stringstream类"></a>stringstream类</h3><ul><li>stringstream类支持面向字符串的输入和输出</li><li>可以用于对同一个字符串的内容交替读写，同样是由两个逻辑子流构成</li></ul><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="异常接口声明"><a href="#异常接口声明" class="headerlink" title="异常接口声明"></a>异常接口声明</h2><p>一个函数显式声明可能抛出的异常，有利于函数的调用者为异常处理做好准备</p><p>可以在函数的声明中列出这个函数可能抛掷的所有异常类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void fun() throw(A，B，C，D);</div></pre></td></tr></table></figure><p>若无异常接口声明，则此函数可以抛掷任何类型的异常</p><p>不抛掷任何类型异常的函数声明如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void fun() throw();</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> x;</div><div class="line">    <span class="keyword">return</span> x / y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"5 / 2 = "</span> &lt;&lt; divide(<span class="number">5</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"8 / 0 = "</span> &lt;&lt; divide(<span class="number">8</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"7 / 1 = "</span> &lt;&lt; divide(<span class="number">7</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">int</span> e) &#123; <span class="comment">//若改成float e就不会catch到</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" is divided by zero!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"That is ok."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="自动的析构"><a href="#自动的析构" class="headerlink" title="自动的析构"></a>自动的析构</h2><p>找到一个匹配的catch异常处理后</p><ul><li>初始化异常参数</li><li>将从对应的try块开始到异常被抛掷处之间构造（且尚未析构）的所有自动对象进行析构</li></ul><p>从最后一个catch处理之后开始恢复执行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    MyException(<span class="keyword">const</span> <span class="built_in">string</span> &amp;message) : message(message) &#123;&#125;</div><div class="line">    ~MyException() &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="title">getMessage</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> message; &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">string</span> message;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Demo() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Constructor of Demo"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">    ~Demo() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destructor of Demo"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="title">throw</span> <span class="params">(MyException)</span> </span>&#123;</div><div class="line">    Demo d;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Throw MyException in func()"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">throw</span> MyException(<span class="string">"exception thrown by func()"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"In main function"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        func();</div><div class="line">    &#125; <span class="keyword">catch</span> (MyException&amp; e) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Caught an exception: "</span> &lt;&lt; e.getMessage() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Resume the execution of main()"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">运行结果：</span></div><div class="line"><span class="comment">In main function</span></div><div class="line"><span class="comment">Constructor of Demo</span></div><div class="line"><span class="comment">Throw MyException in func()</span></div><div class="line"><span class="comment">Destructor of Demo</span></div><div class="line"><span class="comment">Caught an exception: exception thrown by func()</span></div><div class="line"><span class="comment">Resume the execution of main()</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是本博客有史以来最长的一篇文章，总结了我从大一至今，遇到的几乎所有不易理解或是容易忘记的C++知识，可作为手册查阅，内容参考自清华大学郑莉教授的C++课程。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>JetsonTX2自主无人车原型开发</title>
    <link href="https://luxuantao.github.io/2019/01/24/JetsonTX2%E8%87%AA%E4%B8%BB%E6%97%A0%E4%BA%BA%E8%BD%A6%E5%8E%9F%E5%9E%8B%E5%BC%80%E5%8F%91/"/>
    <id>https://luxuantao.github.io/2019/01/24/JetsonTX2自主无人车原型开发/</id>
    <published>2019-01-24T08:46:26.000Z</published>
    <updated>2019-01-24T10:16:33.393Z</updated>
    
    <content type="html"><![CDATA[<p>本科生培育的项目，目前已基本成型，涉及的技术包括：opencv，caffe，arduino，android</p><p>项目github地址：<a href="https://github.com/luxuantao/jetsontx2_car" target="_blank" rel="external">https://github.com/luxuantao/jetsontx2_car</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当初搞这个项目，纯粹是我一厢情愿。自从有了JetsonTX2开发板，就想着这么又贵又强的东西不用怎么行。断断续续搞了一学期，也算学了不少新东西。队里加我总共四个人，其中三个不干活的（没错，从头到尾只有我一个人在瞎忙活）。你问我有怨气吗，自然是有的，这学期第13周的时候，我把物体识别的任务交给了一位队友，就想着后面要期末考所以特地提前了些，结果他硬生生地拖到第十九周学期结束，都没有碰一下开发板。罢了，给他学习的机会他不要，又能怪谁呢？而且我在一开始申报项目时就做好了一带三的准备，那么好，opencv，caffe，arduino，android，全都由我一个人负责。</p><p>我不贴代码，arduino和android的全部代码可以从<a href="https://github.com/luxuantao/jetsontx2_car" target="_blank" rel="external">https://github.com/luxuantao/jetsontx2_car</a> 获取。</p><p>这是一篇开发手札，主要是写给我自己看的，记录一下开发中遇到的问题。</p><h2 id="已完成的目标"><a href="#已完成的目标" class="headerlink" title="已完成的目标"></a>已完成的目标</h2><ul><li>JetsonTX2架设在小车上，调用usb摄像头，能够识别出20种不同的物体，包括人，车，显示屏等等，并能将带有标记的流（实际上传的是图片）传回手机</li><li>用于控制小车和显示回传视频的app</li><li>小车用anduino开发，有两种运行模式：手动控制行驶（由app和anduino蓝牙通信实现）和自动行驶（由一组超声波模块+三组红外探测模块实现避障），可随时通过app切换模式</li></ul><h2 id="Arduino小车部分"><a href="#Arduino小车部分" class="headerlink" title="Arduino小车部分"></a>Arduino小车部分</h2><p>最先做的是小车，网上买的小车零件，买回来后要自己全部一个个拼接起来，比如扩展板上，每一个排角，电阻都要自己焊上去。这里要感谢我的爸爸，他虽然不怎么懂编程，但是焊接东西他很拿手，帮我一个部件一个部件的焊好，前后焊了有一周的时间，感谢我的爸爸，没有他，第一步都没法完成。</p><p>小车上最重要的是这些模块：正前方的一组超声波云台模块，正前方/左前方/右前方各一组红外探测模块，以及一组蓝牙模块。为什么正前方又要装超声波又要装红外？因为超声波打的距离比较远，能提早做出判断，但是在车上的位置比较高，打不到较低的地方，所以我在低处补了一组红外探测模块，做两手准备。而左前方和右前方的红外探测模块是后来加的，因为当小车以接近四十五度角接近前方障碍时，无法通过正前方的超声波和红外探测到，所以我在左前方和右前方各补了一个红外，效果不错。</p><h2 id="JetsonTX2部分"><a href="#JetsonTX2部分" class="headerlink" title="JetsonTX2部分"></a>JetsonTX2部分</h2><p>NVIDIA的JetsonTX2是比JetsonTX1性能更强的一块开发板（不过最近好像又有了一块比JetsonTX2还要厉害的开发板）。说它是开发板，其实并不准确，它其实是一台嵌入式计算机，由于其GPU的强大，专门用于做图像处理方面的工作。</p><p>刚到手的JetsonTX2是一台裸机，内置ubuntu16.04操作系统，看上去就和普通的计算机没什么两样。要让它变得更强，先要在NVIDIA的官网上下载JetPack开发包，装好后，就有了CUDA等一系列基础设施。</p><p>关于图像识别，我用的是<code>Faster R-CNN</code> ，但是用它之前，先要装好<code>Caffe</code> 和 <code>PyCaffe</code> ，但是装<code>Caffe</code> 之前，先要装好<code>opencv</code> 。是不是感觉挺麻烦的？没错，难就难在这，有不少依赖要装，而且要翻墙。给出一个很不错的博客，我基本上就是照着这个博客中所说的一步步做的，装了两天（其中caffe装了两遍，注意一定要用python2）。</p><p>opencv3安装：<a href="https://jkjung-avt.github.io/opencv3-on-tx2/" target="_blank" rel="external">https://jkjung-avt.github.io/opencv3-on-tx2/</a></p><p>caffe安装：<a href="https://jkjung-avt.github.io/caffe-on-tx2/" target="_blank" rel="external">https://jkjung-avt.github.io/caffe-on-tx2/</a></p><p>opencv3和caffe都是下载源码在本地编译，所以很慢很慢。。。</p><p>然后就是套<code>Faster R-CNN</code>：<a href="https://jkjung-avt.github.io/faster-rcnn/" target="_blank" rel="external">https://jkjung-avt.github.io/faster-rcnn/</a> ，用到了别人训练好的模型，细心的你会发现github上说这个模型已经废弃了，现在有更快的模型可以用。没错，<code>Faster R-CNN</code> 虽然有个<code>Faster</code> 但是它的速度真心不快，0.9秒识别一张图片（后面会提到如何加速），但是这个模型的准确度非常好，比起别的模型更具优势，所以我还是采用了这个模型。</p><p>那如何做到更快呢，<a href="https://jkjung-avt.github.io/making-frcn-faster/" target="_blank" rel="external">https://jkjung-avt.github.io/making-frcn-faster/</a> 里面提到可以用<code>GoogLeNet</code>换掉速度较慢的<code>VGG16</code> ，也就是对神经网络中的某一层做了改动，但是简简单单的这一步带来的改良是巨大的，在JetsonTX2开最佳性能的情况下<code>sudo nvpmodel -m 0</code>，可以做到0.5秒识别一张图片。</p><p>视频流可以选择使用板载摄像头或者自己搞个usb摄像头，我都试了下，运行后，opencv会在JetsonTX2上会新建一个窗口，里面实时显示带有识别框的图片，每0.5秒换一次图片。</p><h2 id="Android部分"><a href="#Android部分" class="headerlink" title="Android部分"></a>Android部分</h2><p>手机是通过蓝牙和小车交互，但是由于和JetsonTX2需要进行图片流的传输，数据量较大，所以采用Wifi，经TCP传输，socket通信。</p><p><a href="https://jkjung-avt.github.io/faster-rcnn/" target="_blank" rel="external">https://jkjung-avt.github.io/faster-rcnn/</a> 中提到的<code>demo_camera.py</code> 自然不包括传图片的回手机的部分，这个需要自己实现。原本代码中用于显示在窗口中的每一张图片其实是一个三维的<code>ndarray</code>（长、宽和RGB），我的做法是把这个<code>ndarray</code>转换为照片先存在本地，然后再读取这个图片把它传输出去。这里有个坑，<code>ndarray</code>中的某两个颜色次序（好像是G和B）要反一下，不然生成的图片你会觉得颜色不对劲。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>我也试了试<code>yolov3</code>，<a href="https://jkjung-avt.github.io/yolov3/" target="_blank" rel="external">https://jkjung-avt.github.io/yolov3/</a> ，但是实际效果很差，主要是延时太久，理论上<code>yolov3</code> 的速度应该是最快的，可能是有什么没注意到的地方，今后再说。</p><p>PS：很多事情只能靠自己。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本科生培育的项目，目前已基本成型，涉及的技术包括：opencv，caffe，arduino，android&lt;/p&gt;
&lt;p&gt;项目github地址：&lt;a href=&quot;https://github.com/luxuantao/jetsontx2_car&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/luxuantao/jetsontx2_car&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JetsonTX2" scheme="https://luxuantao.github.io/categories/JetsonTX2/"/>
    
    
      <category term="机器视觉" scheme="https://luxuantao.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow实现手写体数字识别</title>
    <link href="https://luxuantao.github.io/2018/09/03/tensorflow%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99%E4%BD%93%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>https://luxuantao.github.io/2018/09/03/tensorflow实现手写体数字识别/</id>
    <published>2018-09-03T06:47:08.000Z</published>
    <updated>2018-09-03T06:48:52.502Z</updated>
    
    <content type="html"><![CDATA[<p>调用tensorflow实现手写体数字识别。<br><a id="more"></a></p><blockquote><p>内容参考自北京大学曹健教授的tensorflow课程，在此感谢</p><p>代码原址：<a href="https://github.com/cj0012/AI-Practice-Tensorflow-Notes" target="_blank" rel="external">https://github.com/cj0012/AI-Practice-Tensorflow-Notes</a></p></blockquote><p>之前在人工智能课上自己手动搭建过一个BP神经网络实现MNIST数据集的手写体数字识别，使用的是<code>c++</code>，最终准确率的上限在<code>95%至96%</code>左右（毕竟水平有限）。这次不一样了，使用<code>tensorflow</code>进行实验，准确率确实提高了不少。可能有人会觉得<code>tensorflow</code>有点过时，现在的大企业不怎么用<code>tensorflow</code>了，但我觉得，对于初学者来说，<code>tensorflow</code>还是不错的选择。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>ubuntu 16.04</li><li>python 2.7.13</li><li>tensorflow 1.3.0</li><li>MNIST数据集</li></ul><p>我不清楚windows下可不可以装tensorflow，反正很久以前是不行，现在好像可以了？？？</p><h2 id="总体框架"><a href="#总体框架" class="headerlink" title="总体框架"></a>总体框架</h2><p>主要分为三个部分如下：</p><ul><li>前向传播过程(mnist_forward.py)</li><li>进行网络参数优化方法的反向传播过程 ( mnist_backward.py )</li><li>验证模型准确率的测试过程(mnist_test.py)</li></ul><p>每个部分都单独写成了一个模块文件。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><h3 id="mnist-forward-py"><a href="#mnist-forward-py" class="headerlink" title="mnist_forward.py"></a>mnist_forward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line">INPUT_NODE = <span class="number">784</span></div><div class="line">OUTPUT_NODE = <span class="number">10</span></div><div class="line">LAYER1_NODE = <span class="number">500</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weight</span><span class="params">(shape, regularizer)</span>:</span></div><div class="line">w = tf.Variable(tf.truncated_normal(shape, stddev=<span class="number">0.1</span>))</div><div class="line"><span class="keyword">if</span> regularizer != <span class="keyword">None</span>:</div><div class="line">tf.add_to_collection(<span class="string">'losses'</span>, tf.contrib.layers.l2_regularizer(regularizer)(w))</div><div class="line"><span class="keyword">return</span> w</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bias</span><span class="params">(shape)</span>:</span></div><div class="line">b = tf.Variable(tf.zeros(shape))</div><div class="line"><span class="keyword">return</span> b</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(x, regularizer)</span>:</span></div><div class="line">w1 = get_weight([INPUT_NODE, LAYER1_NODE], regularizer)</div><div class="line">b1 = get_bias([LAYER1_NODE])</div><div class="line">y1 = tf.nn.relu(tf.matmul(x, w1) + b1)</div><div class="line"></div><div class="line">w2 = get_weight([LAYER1_NODE, OUTPUT_NODE], regularizer)</div><div class="line">b2 = get_bias([OUTPUT_NODE])</div><div class="line">y = tf.matmul(y1, w2) + b2</div><div class="line"><span class="keyword">return</span> y</div></pre></td></tr></table></figure><h3 id="mnist-backward-py"><a href="#mnist-backward-py" class="headerlink" title="mnist_backward.py"></a>mnist_backward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="keyword">import</span> mnist_forward</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">STEPS = <span class="number">50000</span></div><div class="line">BATCH_SIZE = <span class="number">200</span></div><div class="line">LEARNING_RATE_BASE = <span class="number">0.1</span></div><div class="line">LEARNING_RATE_DECAY = <span class="number">0.99</span></div><div class="line">REGULIZER = <span class="number">0.0001</span></div><div class="line">MOVING_AVERAGE_DECAY = <span class="number">0.99</span></div><div class="line">MODEL_SAVE_PATH = <span class="string">"./model/"</span></div><div class="line">MODEL_NAME = <span class="string">"mnist_model"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(mnist)</span>:</span></div><div class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</div><div class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.OUTPUT_NODE])</div><div class="line">y = mnist_forward.forward(x, REGULIZER)</div><div class="line">global_step = tf.Variable(<span class="number">0</span>, trainable = <span class="keyword">False</span>)</div><div class="line"></div><div class="line">ce = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, labels=tf.argmax(y_,<span class="number">-1</span>))</div><div class="line">cem = tf.reduce_mean(ce)</div><div class="line">loss = cem + tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</div><div class="line"></div><div class="line">learning_rate = tf.train.exponential_decay(</div><div class="line">LEARNING_RATE_BASE,</div><div class="line">global_step,</div><div class="line">mnist.train.num_examples / BATCH_SIZE,</div><div class="line">LEARNING_RATE_DECAY,</div><div class="line">staircase = <span class="keyword">True</span></div><div class="line">)</div><div class="line"></div><div class="line">train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</div><div class="line">ema = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step)</div><div class="line">ema_op = ema.apply(tf.trainable_variables())</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.control_dependencies([train_step, ema_op]):</div><div class="line">train_op = tf.no_op(name = <span class="string">'train'</span>)</div><div class="line"></div><div class="line">saver = tf.train.Saver()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">init_op = tf.global_variables_initializer()</div><div class="line">sess.run(init_op)</div><div class="line"></div><div class="line">ckpt = tf.train.get_checkpoint_state(MODEL_SAVE_PATH)</div><div class="line"><span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</div><div class="line">saver.restore(sess, ckpt.model_checkpoint_path)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(STEPS):</div><div class="line">xs,ys = mnist.train.next_batch(BATCH_SIZE)</div><div class="line">_,loss_value,step = sess.run([train_op, loss, global_step], feed_dict=&#123;x:xs, y_:ys&#125;)</div><div class="line"><span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</div><div class="line"><span class="keyword">print</span> <span class="string">"after %d training steps, loss on training batch is %g"</span> % (step, loss_value)</div><div class="line">saver.save(sess, os.path.join(MODEL_SAVE_PATH,MODEL_NAME), global_step=global_step)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"./data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line">backward(mnist)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">main()</div></pre></td></tr></table></figure><h3 id="mnist-test-py"><a href="#mnist-test-py" class="headerlink" title="mnist_test.py"></a>mnist_test.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding utf-8</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="keyword">import</span> mnist_forward</div><div class="line"><span class="keyword">import</span> mnist_backward</div><div class="line">TEST_INTERVAL_SECS = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(mnist)</span>:</span></div><div class="line"><span class="keyword">with</span> tf.Graph().as_default() <span class="keyword">as</span> g:</div><div class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</div><div class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.OUTPUT_NODE])</div><div class="line">y = mnist_forward.forward(x, <span class="keyword">None</span>)</div><div class="line"></div><div class="line">ema = tf.train.ExponentialMovingAverage(mnist_backward.MOVING_AVERAGE_DECAY)</div><div class="line">ema_restore = ema.variables_to_restore()</div><div class="line">saver = tf.train.Saver(ema_restore)</div><div class="line"></div><div class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">ckpt = tf.train.get_checkpoint_state(mnist_backward.MODEL_SAVE_PATH)</div><div class="line"><span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</div><div class="line">saver.restore(sess, ckpt.model_checkpoint_path)</div><div class="line">global_step = ckpt.model_checkpoint_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>].split(<span class="string">'-'</span>)[<span class="number">-1</span>]</div><div class="line">accuracy_score = sess.run(accuracy, feed_dict=&#123;x:mnist.test.images, y_:mnist.test.labels&#125;)</div><div class="line"><span class="keyword">print</span> <span class="string">"after %s training steps, test accuracy = %g"</span> % (global_step, accuracy_score)</div><div class="line"><span class="keyword">else</span>:</div><div class="line"><span class="keyword">print</span> <span class="string">"no checkpoint file found"</span></div><div class="line"><span class="keyword">return</span></div><div class="line">time.sleep(TEST_INTERVAL_SECS)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"./data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line">test(mnist)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">main()</div></pre></td></tr></table></figure><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="mnist-forward-py-1"><a href="#mnist-forward-py-1" class="headerlink" title="mnist_forward.py"></a>mnist_forward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INPUT_NODE = <span class="number">784</span></div><div class="line">OUTPUT_NODE = <span class="number">10</span></div><div class="line">LAYER1_NODE = <span class="number">500</span></div></pre></td></tr></table></figure><p>在前向传播过程中，规定网络输入结点为 784 个(代表每张输入图片的像素个数)，隐藏层节点 500 个(一层)，输出节点 10 个(表示输出为数字 0-9的十分类)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w = tf.Variable(tf.truncated_normal(shape, stddev=<span class="number">0.1</span>))</div></pre></td></tr></table></figure><p>参数满足截断正态分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> regularizer != <span class="keyword">None</span>:</div><div class="line">tf.add_to_collection(<span class="string">'losses'</span>, tf.contrib.layers.l2_regularizer(regularizer)(w))</div></pre></td></tr></table></figure><p>使用正则化,将每个参数的正则化损失加到总损失中</p><h3 id="mnist-backward-py-1"><a href="#mnist-backward-py-1" class="headerlink" title="mnist_backward.py"></a>mnist_backward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ce = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, labels=tf.argmax(y_,<span class="number">-1</span>))</div><div class="line">cem = tf.reduce_mean(ce)</div><div class="line">loss = cem + tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</div></pre></td></tr></table></figure><p>softmax()函数与交叉熵一起使用，再加上正则化损失以此计算得到总的偏差值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">learning_rate = tf.train.exponential_decay(</div><div class="line">LEARNING_RATE_BASE,</div><div class="line">global_step,</div><div class="line">mnist.train.num_examples / BATCH_SIZE,</div><div class="line">LEARNING_RATE_DECAY,</div><div class="line">staircase = <span class="keyword">True</span></div><div class="line">)</div></pre></td></tr></table></figure><p>使用指数衰减学习率使模型在训练的前期快速收敛接近较优解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</div></pre></td></tr></table></figure><p>使用梯度下降算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ema = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step)</div><div class="line">ema_op = ema.apply(tf.trainable_variables())</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.control_dependencies([train_step, ema_op]):</div><div class="line">train_op = tf.no_op(name = <span class="string">'train'</span>)</div></pre></td></tr></table></figure><p>在模型训练时引入滑动平均使模型在测试数据上表现的更加健壮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">saver = tf.train.Saver()</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ckpt = tf.train.get_checkpoint_state(MODEL_SAVE_PATH)</div><div class="line"><span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</div><div class="line">saver.restore(sess, ckpt.model_checkpoint_path)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">saver.save(sess, os.path.join(MODEL_SAVE_PATH,MODEL_NAME), global_step=global_step)</div></pre></td></tr></table></figure><p>断点续训，因为训练时间比较长，万一断电了呢。。。为了使得之前训练好的参数（w,b）能够保留下来，调用了saver进行保存和恢复</p><h3 id="mnist-test-py-1"><a href="#mnist-test-py-1" class="headerlink" title="mnist_test.py"></a>mnist_test.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TEST_INTERVAL_SECS = <span class="number">5</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">time.sleep(TEST_INTERVAL_SECS)</div></pre></td></tr></table></figure><p>每隔五秒钟测试一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ema = tf.train.ExponentialMovingAverage(mnist_backward.MOVING_AVERAGES_DECAY)</div><div class="line">ema_restore = ema.variables_to_restore()</div><div class="line">saver = tf.train.Saver(ema_restore)</div></pre></td></tr></table></figure><p>实例化具有滑动平均的 saver 对象，从而在会话被加载时，模型中的所有参数被赋值为各自的滑动平均值，增强模型的稳定性</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><blockquote><p>可能你已经注意到了，mnist_forward.py中并没有main函数（说明这个文件只是一个模块用来被其他文件调用，本例中是mnist_backward.py调用了mnist_forward.py），而另两个文件都有main函数。</p></blockquote><ul><li>终端输入<code>python mnist_backward.py</code>，开始训练，会显示实时的损失值，如：<code>after 15005 training steps, loss on training batch is 0.159981</code></li><li>再开一个终端，输入<code>python mnist_test.py</code>，进行同步的测试（每五秒一次），会显示实时的损失值，如：<code>after 15005 training steps, test accuracy = 0.979</code></li></ul><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>代码里设置的总循环数是50000次，但是我只跑到15000次（毕竟时间比较久），但已经能有98%的准确率了，如果全跑完的话，预计能达到99%以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;调用tensorflow实现手写体数字识别。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="tensorflow" scheme="https://luxuantao.github.io/tags/tensorflow/"/>
    
      <category term="人工智能" scheme="https://luxuantao.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>WeChall Training: Programming 1</title>
    <link href="https://luxuantao.github.io/2018/08/17/WeChall-Training-Programming-1/"/>
    <id>https://luxuantao.github.io/2018/08/17/WeChall-Training-Programming-1/</id>
    <published>2018-08-17T09:34:25.000Z</published>
    <updated>2018-08-17T09:51:37.948Z</updated>
    
    <content type="html"><![CDATA[<hr><p>刚入ctf的坑，做一些题练练手。</p><p>WeChall上的题还是比较适合入门的。</p><a id="more"></a><p>题目如下：</p><blockquote><p>When you visit <a href="http://www.wechall.net/challenge/training/programming1/index.php?action=request" target="_blank" rel="external">this link</a> you receive a message.</p><p>Submit the same message back to <a href="http://www.wechall.net/challenge/training/programming1/index.php?answer=the_message" target="_blank" rel="external">http://www.wechall.net/challenge/training/programming1/index.php?answer=the_message</a></p><p>Your timelimit is 1.337 seconds</p></blockquote><p>给了个链接，点进去后显示一个字符串，要把它加在指定的URL中并进行访问，整个过程要在1.337秒内完成。</p><p>我竟然还真的手动试了几次。。。最快也要四秒。。。</p><p>正解就是写个脚本，我用Python实现，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://www.wechall.net/challenge/training/programming1/index.php?action=request'</span></div><div class="line">cookie = dict(WC = <span class="string">'************************'</span>)</div><div class="line">re = requests.get(url, cookies = cookie)</div><div class="line">key = re.text</div><div class="line">url2 = <span class="string">'http://www.wechall.net/challenge/training/programming1/index.php?answer='</span></div><div class="line">y = requests.get(url2 + key, cookies = cookie)</div></pre></td></tr></table></figure><p>其中<code>************************</code>部分要填入的是你浏览器的cookie</p><p>至于如何查询cookie，这里我以Chrome浏览器为例：</p><ol><li><code>Ctrl+Shift+Delete</code>调出清除历史记录的界面，点击取消（这样的目的纯粹是因为方便一些）</li><li>依次点击<code>内容设置</code>-&gt;<code>Cookie</code>-&gt;<code>查看所有 Cookie 和网站数据</code></li><li>搜索<code>wechall.net</code>-&gt;找到名称为<code>WC</code>的cookie内容</li></ol><p>PS：上面的代码运行完成后并不会出现提示性的语句，但是你会惊奇地发现题目已经过了</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;刚入ctf的坑，做一些题练练手。&lt;/p&gt;
&lt;p&gt;WeChall上的题还是比较适合入门的。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="WeChall" scheme="https://luxuantao.github.io/tags/WeChall/"/>
    
  </entry>
  
</feed>
