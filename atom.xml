<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Luson&#39;s home</title>
  
  <subtitle>就怕你宁愿流泪望天却不昂首向前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luxuantao.github.io/"/>
  <updated>2018-02-21T14:26:00.897Z</updated>
  <id>https://luxuantao.github.io/</id>
  
  <author>
    <name>陆轩韬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java-网络编程</title>
    <link href="https://luxuantao.github.io/2018/02/21/java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://luxuantao.github.io/2018/02/21/java-网络编程/</id>
    <published>2018-02-21T14:25:59.000Z</published>
    <updated>2018-02-21T14:26:00.897Z</updated>
    
    <content type="html"><![CDATA[<hr><p>网络编程本质还是在处理IO流上。</p><a id="more"></a><h2 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h2><p>这个类主要用来表示IP地址，有两个子类：Inet4Address和Inet6Address</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        InetAddress locAdd = InetAddress.getLocalHost();</div><div class="line">        InetAddress remAdd = InetAddress.getByName(<span class="string">"luxuantao.github.io"</span>);</div><div class="line">        System.out.println(<span class="string">"本机IP地址"</span>+locAdd.getHostAddress());</div><div class="line">        System.out.println(<span class="string">"我的博客的IP地址"</span>+remAdd.getHostAddress());</div><div class="line">        System.out.println(<span class="string">"本机是否可达"</span>+locAdd.isReachable(<span class="number">5000</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="URL类"><a href="#URL类" class="headerlink" title="URL类"></a>URL类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="comment">//URL类的基本方法</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseURL</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        URL Aurl = <span class="keyword">new</span> URL(<span class="string">"http://java.sun.com:80/docs/books/"</span>); <span class="comment">//基地址</span></div><div class="line">        URL tuto = <span class="keyword">new</span> URL(Aurl,<span class="string">"tutorial.intro.html#DOWNLOADING"</span>); <span class="comment">//相对地址</span></div><div class="line">        System.out.println(<span class="string">"协议信息"</span>+tuto.getProtocol());</div><div class="line">        System.out.println(<span class="string">"地址"</span>+tuto.getHost());</div><div class="line">        System.out.println(<span class="string">"文件名"</span>+tuto.getFile());</div><div class="line">        System.out.println(<span class="string">"端口"</span>+tuto.getPort());</div><div class="line">        System.out.println(<span class="string">"引用信息"</span>+tuto.getRef());</div><div class="line">        System.out.println(<span class="string">"查询信息"</span>+tuto.getQuery());</div><div class="line">        System.out.println(<span class="string">"路径"</span>+tuto.getPath());</div><div class="line">        System.out.println(<span class="string">"用户信息"</span>+tuto.getUserInfo());</div><div class="line">        System.out.println(<span class="string">"权限信息"</span>+tuto.getAuthority());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="comment">//从URL读取网络资源</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLReader</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        URL tire = <span class="keyword">new</span> URL(<span class="string">"https://luxuantao.github.io/"</span>);</div><div class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(tire.openStream()));</div><div class="line">        String inputLine;</div><div class="line">        <span class="keyword">while</span>((inputLine = in.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(inputLine);</div><div class="line">        &#125;</div><div class="line">        in.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="URLConnection类"><a href="#URLConnection类" class="headerlink" title="URLConnection类"></a>URLConnection类</h2><p>URL是单向的，而URLConnection是双向的，可以通过它对URL资源读或写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.net.URLConnection;</div><div class="line"></div><div class="line"><span class="comment">//与指定URL建立动态链接,可向服务器发送请求</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLConnectionDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://www.mldnjava.cn"</span>);</div><div class="line">        URLConnection urlCon = url.openConnection(); <span class="comment">//建立连接</span></div><div class="line">        System.out.println(<span class="string">"内容大小"</span>+urlCon.getContentLength());</div><div class="line">        System.out.println(<span class="string">"内容类型"</span>+urlCon.getContentType());</div><div class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader((urlCon.getInputStream())));</div><div class="line">        String inputline;</div><div class="line">        <span class="keyword">while</span> ((inputline = in.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(inputline);</div><div class="line">        &#125;</div><div class="line">        in.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="服务端与客户端简单交互"><a href="#服务端与客户端简单交互" class="headerlink" title="服务端与客户端简单交互"></a>服务端与客户端简单交互</h2><h3 id="单向传输（服务端给客户端）"><a href="#单向传输（服务端给客户端）" class="headerlink" title="单向传输（服务端给客户端）"></a>单向传输（服务端给客户端）</h3><p>示例：服务端传输helloworld给客户端。</p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.net.UnknownHostException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8888</span>);</div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(client.getInputStream()));</div><div class="line">        String context = br.readLine();</div><div class="line">        System.out.println(<span class="string">"当前服务端输出的语句是："</span>+context);</div><div class="line">        br.close();</div><div class="line">        client.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">        System.out.println(<span class="string">"服务器运行，等待客户端连接"</span>);</div><div class="line">        Socket client = server.accept();</div><div class="line">        OutputStream out = client.getOutputStream();</div><div class="line">        PrintWriter pw =<span class="keyword">new</span> PrintWriter(out);</div><div class="line">        pw.println(<span class="string">"hello world!"</span>);</div><div class="line">        pw.close();</div><div class="line">        client.close();</div><div class="line">        server.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="一对一TCP传输（单个服务端和单个客户端）"><a href="#一对一TCP传输（单个服务端和单个客户端）" class="headerlink" title="一对一TCP传输（单个服务端和单个客户端）"></a>一对一TCP传输（单个服务端和单个客户端）</h3><p>示例：客户端发送半径给服务端，服务端算出圆的面积后把结果返回给客户端。</p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.rmi.UnknownHostException;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8888</span>);</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        DataInputStream fromServer = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">        DataOutputStream toServer = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"请输入半径："</span>);</div><div class="line">            <span class="keyword">double</span> radius = sc.nextDouble();</div><div class="line">            toServer.writeDouble(radius);</div><div class="line">            toServer.flush();</div><div class="line">            <span class="keyword">double</span> area = fromServer.readDouble();</div><div class="line">            System.out.println(<span class="string">"客户端：输入的半径是："</span>+radius);</div><div class="line">            System.out.println(<span class="string">"客户端：收到的圆的面积是："</span>+area);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">        System.out.println(<span class="string">"服务器启动成功，时间是"</span>+<span class="keyword">new</span> Date());</div><div class="line">        Socket client = server.accept();</div><div class="line">        DataInputStream inputFromClient = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">        DataOutputStream outputToClient = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">double</span> radius = inputFromClient.readDouble();</div><div class="line">            <span class="keyword">double</span> area = radius*radius*Math.PI;</div><div class="line">            System.out.println(<span class="string">"服务端：接受到客户端半径为："</span>+radius);</div><div class="line">            System.out.println(<span class="string">"服务端：计算面积为："</span>+area);</div><div class="line">            outputToClient.writeDouble(area);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="一对多TCP传输（单个服务端和多个客户端）"><a href="#一对多TCP传输（单个服务端和多个客户端）" class="headerlink" title="一对多TCP传输（单个服务端和多个客户端）"></a>一对多TCP传输（单个服务端和多个客户端）</h3><p>当多个客户端同时对服务器发送请求时，上面的方法就不行了（在IDE上的表现就是多次启动了客户端程序，这时只有第一个客户端程序能够成功连接上服务端）。</p><p>不过，可以通过多线程解决这个问题。</p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.rmi.UnknownHostException;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8888</span>);</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        DataInputStream fromServer = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">        DataOutputStream toServer = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"请输入半径："</span>);</div><div class="line">            <span class="keyword">double</span> radius = sc.nextDouble();</div><div class="line">            toServer.writeDouble(radius);</div><div class="line">            toServer.flush();</div><div class="line">            <span class="keyword">double</span> area = fromServer.readDouble();</div><div class="line">            System.out.println(<span class="string">"客户端：输入的半径是："</span>+radius);</div><div class="line">            System.out.println(<span class="string">"客户端：收到的圆的面积是："</span>+area);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">        System.out.println(<span class="string">"服务器启动成功，时间是"</span>+<span class="keyword">new</span> Date());</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">            Socket client = server.accept();</div><div class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AreaRunnable(client)); <span class="comment">//多创建一个线程回应请求</span></div><div class="line">            thread.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AreaRunnable类（处理每个线程）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AreaRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Socket client;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AreaRunnable</span><span class="params">(Socket client)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.client = client;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            DataInputStream inputFromClient = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">            DataOutputStream outputToClient = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">double</span> radius = inputFromClient.readDouble();</div><div class="line">                <span class="keyword">double</span> area = radius * radius * Math.PI;</div><div class="line">                System.out.println(<span class="string">"服务端：接受到客户端半径为："</span> + radius);</div><div class="line">                System.out.println(<span class="string">"服务端：计算面积为："</span> + area);</div><div class="line">                outputToClient.writeDouble(area);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上这些内容基本上都属于TCP（要先进行服务端与客户端的连接），而实际上现在用的更多的是UDP（非连接，直接发送数据包），今后有空再研究了。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;网络编程本质还是在处理IO流上。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
      <category term="网络编程" scheme="https://luxuantao.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python-自定义类的运算</title>
    <link href="https://luxuantao.github.io/2018/02/18/python-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%9A%84%E8%BF%90%E7%AE%97/"/>
    <id>https://luxuantao.github.io/2018/02/18/python-自定义类的运算/</id>
    <published>2018-02-18T07:34:20.000Z</published>
    <updated>2018-02-18T07:41:13.330Z</updated>
    
    <content type="html"><![CDATA[<hr><p>自定义一个复数类，实现四则运算。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, real, imaginary)</span>:</span></div><div class="line">        self.real = real</div><div class="line">        self.imaginary = imaginary</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, no)</span>:</span></div><div class="line">        real = self.real + no.real</div><div class="line">        imaginary = self.imaginary + no.imaginary</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span><span class="params">(self, no)</span>:</span></div><div class="line">        real = self.real - no.real</div><div class="line">        imaginary = self.imaginary - no.imaginary</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, no)</span>:</span></div><div class="line">        real = self.real * no.real - self.imaginary * no.imaginary</div><div class="line">        imaginary = self.real * no.imaginary + self.imaginary * no.real</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__truediv__</span><span class="params">(self, no)</span>:</span></div><div class="line">        x = float(no.real ** <span class="number">2</span> + no.imaginary ** <span class="number">2</span>)</div><div class="line">        y = self * Complex(no.real, -no.imaginary)</div><div class="line">        real = y.real / x</div><div class="line">        imaginary = y.imaginary / x</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">(self)</span>:</span></div><div class="line">        real = math.sqrt(self.real ** <span class="number">2</span> + self.imaginary ** <span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> Complex(real, <span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.imaginary == <span class="number">0</span>:</div><div class="line">            result = <span class="string">"%.2f+0.00i"</span> % (self.real)</div><div class="line">        <span class="keyword">elif</span> self.real == <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> self.imaginary &gt;= <span class="number">0</span>:</div><div class="line">                result = <span class="string">"0.00+%.2fi"</span> % (self.imaginary)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                result = <span class="string">"0.00-%.2fi"</span> % (abs(self.imaginary))</div><div class="line">        <span class="keyword">elif</span> self.imaginary &gt; <span class="number">0</span>:</div><div class="line">            result = <span class="string">"%.2f+%.2fi"</span> % (self.real, self.imaginary)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result = <span class="string">"%.2f-%.2fi"</span> % (self.real, abs(self.imaginary))</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    c = map(float, input().split())</div><div class="line">    d = map(float, input().split())</div><div class="line">    x = Complex(*c)</div><div class="line">    y = Complex(*d)</div><div class="line">    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=<span class="string">'\n'</span>)</div></pre></td></tr></table></figure><p>有个巨坑的地方：python3定义一般的除法要用<code>__truediv__</code> 而不是<code>__div__</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;自定义一个复数类，实现四则运算。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>虚函数</title>
    <link href="https://luxuantao.github.io/2018/02/13/%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <id>https://luxuantao.github.io/2018/02/13/虚函数/</id>
    <published>2018-02-13T06:13:31.000Z</published>
    <updated>2018-02-13T06:38:54.497Z</updated>
    
    <content type="html"><![CDATA[<hr><p>有点乱。。有点乱。。</p><a id="more"></a><p>两个类，B继承自A</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A::f() is called"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"B::f() is called"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>如果这样调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    B* b = <span class="keyword">new</span> B();</div><div class="line">    A* a = b;</div><div class="line">    a-&gt;f();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure><p>或者这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    B b;</div><div class="line">    A&amp; a = b;</div><div class="line">    a.f();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这两个结果都是：<code>A::f() is called</code></p><p>这件事看起来很不可思议，尤其是学过java的人可能会感到困惑。</p><p>但如果你用到了虚函数，结果就会不一样,像这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A::f() is called"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"B::f() is called"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这时你再用上面的两种调用方式，结果就会是：<code>B::f() is called</code></p><p>其实是这样：</p><p>c++为了提高效率，默认采用的是静态绑定，而其他的大部分OOP语言（例如java）默认采用的是动态绑定。在java里根本就没有virtual这回事，运行时会自动判断这个父类的变量里到底放的是父类的对象还是子类的对象。如果你想说java里有abstract啊！那也不对，java里的abstract更像是c++中的纯虚函数，而不是虚函数。在c++里，如果你想在子类中override一个父类的函数，那么这两个函数都要用virtual修饰，并且调用的时候必须用父类的指针<code>A* a = b;</code>或是引用<code>A&amp; a = b;</code>，如果单纯地像这样：<code>B b;</code> <code>A a = b;</code>那么就会发生切片，结果会是<code>A::f() is called</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;有点乱。。有点乱。。&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>博客更新说明</title>
    <link href="https://luxuantao.github.io/2018/01/19/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E8%AF%B4%E6%98%8E/"/>
    <id>https://luxuantao.github.io/2018/01/19/博客更新说明/</id>
    <published>2018-01-19T06:49:47.000Z</published>
    <updated>2018-01-19T07:20:04.795Z</updated>
    
    <content type="html"><![CDATA[<hr><p>忙活了两天，升级版的博客总算完成了。</p><a id="more"></a><p>更新内容说明：</p><p>1.评论区已经开放，支持QQ，微信登陆。说来惭愧，光这个评论区就搞了一天，我记得当初建这个博客都没花这么长的时间。一开始想用国内一位大神写的Gitment（花了我四五个小时，害得我放假第一天游戏都没有玩！！！），不知是哪儿出了问题用不了，后来还是决定用韩国人的来必力，在阅读了无数韩国鸟文后，艰难地搭建好了评论环境（其实就用了十五分钟）。</p><p>2.增强了与github的联系，新增两处github仓库链接。</p><p>3.新增RSS链接。</p><p>4.新增EOJ链接。</p><p>5.今后加载页面时，顶部会出现加载条。</p><p>6.网站底部增加本站访客数，博客全站总字数。</p><p>7.每篇文章都增设了热度（就是阅读次数），字数统计，阅读时长。</p><p>8.文章分享栏尝试了一下，觉得不美观就删了。</p><p>9.hexo对网易云音乐的支持不稳定，在打开网页的会有一定概率弹出js提示框，虽然歌曲能放，但影响用户体验总是不太好，就删了。</p><p>10.网站小图标，文章标签图标，页面底部的主人图标已全部更新。</p><p>PS：最气的是本地全部搞好了，想部署到github的时候hexo报错了，我当时就懵了，tmd关键时刻掉链子。研究了将近一个小时无果后，我把整个.deploy_git文件夹全删了，重新生成了一下，虽然好用了，但是github上之前的版本记录也就全没了，不过现在生成静态文件的速度反倒变快了，真是因祸得福。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;忙活了两天，升级版的博客总算完成了。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>图的应用</title>
    <link href="https://luxuantao.github.io/2018/01/06/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://luxuantao.github.io/2018/01/06/图的应用/</id>
    <published>2018-01-06T01:00:05.000Z</published>
    <updated>2018-01-25T09:03:16.243Z</updated>
    
    <content type="html"><![CDATA[<hr><p>数据结构最后一次补充作业。</p><a id="more"></a><p>图的各种应用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100+5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXINT 1e6+5</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="keyword">int</span> y;</div><div class="line"><span class="keyword">int</span> w;</div><div class="line">&#125; EDGE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">l_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> ver;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">l_node</span> *<span class="title">link</span>;</span></div><div class="line">&#125; L_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">e_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> ver1;</div><div class="line"><span class="keyword">int</span> ver2;</div><div class="line">&#125; E_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">queuetype</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> qa;</div><div class="line"><span class="keyword">int</span> qe;</div><div class="line"><span class="keyword">int</span> item[MAXN];</div><div class="line">&#125; QTYPE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vl_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> ver;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vl_node</span> *<span class="title">link</span>;</span></div><div class="line">&#125; VL_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ch_node</span> //头结点</span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> count;</div><div class="line">VL_NODE *head;</div><div class="line">&#125; CH_NODE;</div><div class="line"></div><div class="line"><span class="keyword">int</span> parent[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> cost[][MAXN], <span class="keyword">int</span> n, <span class="keyword">int</span> v, <span class="keyword">int</span> dist[], <span class="keyword">int</span> pre[])</span> <span class="comment">//Dijkstra算法</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> s[MAXN], i, j, k, min;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">&#123;</div><div class="line">    dist[i] = cost[v][i]; <span class="comment">//dist数组赋初值</span></div><div class="line">   s[i] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(dist[i] &lt; MAXINT) <span class="comment">//如果v和i中有一条边，则pre[i]=v</span></div><div class="line">        pre[i] = v;</div><div class="line">   <span class="keyword">else</span> pre[i] = <span class="number">0</span>; <span class="comment">//如果没有边，则pre[i]=0</span></div><div class="line">   &#125;</div><div class="line">    s[v] = <span class="number">1</span>; <span class="comment">//起始顶点</span></div><div class="line">    pre[v] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">    &#123;</div><div class="line">        min = MAXINT;</div><div class="line">        k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j ++) <span class="comment">//寻找 dist[j]的最小值</span></div><div class="line">        &#123;</div><div class="line">        <span class="keyword">if</span>(s[j] == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">             <span class="keyword">if</span>(dist[j] != <span class="number">0</span> &amp;&amp; dist[j] &lt; min)  <span class="comment">//dist[j]小于当前最小值且不等于0</span></div><div class="line">             &#123;</div><div class="line">                    min = dist[j]; <span class="comment">//最小值</span></div><div class="line">                    k = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//没有与出发点相连的点</span></div><div class="line">        s[k] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j ++) <span class="comment">//修改不在s中的顶点的距离</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[j] == <span class="number">0</span> &amp;&amp; cost[k][j] &lt; MAXINT) <span class="comment">//j不在s中并且k到j有边</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(dist[k] + cost[k][j] &lt; dist[j])  <span class="comment">//若找到更短的路径</span></div><div class="line">                &#123;</div><div class="line">                    dist[j] = dist[k] + cost[k][j]; <span class="comment">//修改最短路径</span></div><div class="line">                    pre[j] = k;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">(<span class="keyword">int</span> cost[][MAXN], <span class="keyword">int</span> n, <span class="keyword">int</span> path[][MAXN])</span> <span class="comment">//Floyd算法</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i,j,k;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//初始化数组</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">&#123;</div><div class="line">path[i][j] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;=n; k++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;=n; j++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(cost[i][k] + cost[k][j] &lt; cost[i][j]) <span class="comment">//若找到更短路径</span></div><div class="line">&#123;</div><div class="line">cost[i][j] = cost[i][k] + cost[k][j]; <span class="comment">//更新最短路径</span></div><div class="line">path[i][j] = k;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_path</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> path[][MAXN])</span> <span class="comment">//打印从i到j最短路径的所有中间顶点</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> k;</div><div class="line">k = path[i][j];</div><div class="line"><span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">//没有中间顶点，返回</span></div><div class="line">print_path(i,k,path); <span class="comment">//递归地打印顶点i到K的中间顶点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>,k); <span class="comment">//打印顶点K</span></div><div class="line">print_path(k,j,path); <span class="comment">//递归地打印顶点k到j的中间顶点</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_all_path</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> path[][MAXN], <span class="keyword">int</span> cost[][MAXN])</span> <span class="comment">//打印所有点之间的最短路径</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i,j;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(i != j)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"从%d到%d:"</span>,i,j);</div><div class="line"><span class="keyword">if</span>(cost[i][j] == MAXINT) <span class="comment">//顶点i、j之间没有路径</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"NO path!\n"</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"最短路径长度为：%d\n"</span>,cost[i][j]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"最短路径为："</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>,i);</div><div class="line">print_path(i,j,path); <span class="comment">//打印从i到j最短路径的所有中间顶点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,j);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(<span class="keyword">int</span> cost[][MAXN], <span class="keyword">int</span> n, <span class="keyword">int</span> u)</span> <span class="comment">//普里姆算法</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> lowcost[MAXN], min, allcost=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> closest[MAXN];</div><div class="line"><span class="keyword">int</span> i, j, k;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++) <span class="comment">//给lowcost[]和closest[]置初值</span></div><div class="line">&#123;</div><div class="line">lowcost[i] = cost[u][i];</div><div class="line">closest[i] = u;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i ++) <span class="comment">//找出n-1个顶点</span></div><div class="line">&#123;</div><div class="line">min = MAXINT;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span> ; j &lt;= n; j ++) <span class="comment">//在v-u中依次找出到u代价最小的顶点k放入U中</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(lowcost[j] != <span class="number">0</span> &amp;&amp; lowcost[j] &lt; min)</div><div class="line">&#123;</div><div class="line">min = lowcost[j]; <span class="comment">//min 为最小代价</span></div><div class="line">k = j; <span class="comment">//k 为最小代价的顶点</span></div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"&#123;连通%d--%d,代价%d&#125;\n"</span>, closest[k], k, min);</div><div class="line">allcost += min;</div><div class="line">lowcost[k] = <span class="number">0</span>; <span class="comment">//标记顶点k已加入U</span></div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j ++) <span class="comment">//修改数组lowcost和closest</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(cost[k][j] != <span class="number">0</span> &amp;&amp; cost[k][j] &lt; lowcost[j])</div><div class="line">&#123;</div><div class="line">lowcost[j] = cost[k][j];</div><div class="line">closest[j] = k;</div><div class="line">&#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"总花费：%d\n"</span>,allcost);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">edge_cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a,<span class="keyword">const</span> <span class="keyword">void</span> *b)</span> <span class="comment">//按边的权值从小到大排列</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">EDGE *p1 = (EDGE*)a;</div><div class="line">EDGE *p2 = (EDGE*)b;</div><div class="line"><span class="keyword">return</span> p1-&gt;w - p2-&gt;w;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(parent[x] == x) <span class="keyword">return</span> x;</div><div class="line">parent[x] = find(parent[x]); <span class="comment">//路径压缩</span></div><div class="line"><span class="keyword">return</span> parent[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(EDGE edge[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> <span class="comment">//Kruskal算法</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,a,b,w,pa,pb,allcost=<span class="number">0</span>,cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">    &#123;</div><div class="line">    parent[i] = i; <span class="comment">//初始化</span></div><div class="line">    &#125;</div><div class="line">    qsort(edge,m,<span class="keyword">sizeof</span>(edge[<span class="number">0</span>]),edge_cmp); <span class="comment">//从小到大排</span></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</div><div class="line">    &#123;</div><div class="line">        a = edge[i].x;</div><div class="line">        b = edge[i].y;</div><div class="line">        w = edge[i].w;</div><div class="line">        pa = find(a);</div><div class="line">        pb = find(b);</div><div class="line">        <span class="keyword">if</span>(pa != pb)</div><div class="line">        &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"&#123;连通%d--%d,代价%d&#125;\n"</span>,a,b,w);</div><div class="line">        allcost += w;</div><div class="line">        parent[a]=b; <span class="comment">//合并</span></div><div class="line">        cnt++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(cnt == n<span class="number">-1</span>) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(cnt &lt; n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"不存在最小生成树\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,allcost);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_adj_list</span><span class="params">(L_NODE *head[], <span class="keyword">int</span> n, E_NODE e[], <span class="keyword">int</span> m)</span> <span class="comment">//建立邻接表</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, u, v;</div><div class="line">L_NODE *p;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">head[i] = <span class="literal">NULL</span>; <span class="comment">//头指针初始化为空</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i ++)</div><div class="line">&#123;</div><div class="line">u = e[i].ver1; <span class="comment">//u、v保存边e[i]的两个顶点</span></div><div class="line">v = e[i].ver2;</div><div class="line">p = (L_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(L_NODE)); <span class="comment">//生成顶点结点</span></div><div class="line">p-&gt;ver = v; <span class="comment">//保存顶点编号</span></div><div class="line">p-&gt;link = head[u]; <span class="comment">//1ink指向顶点head[u]</span></div><div class="line">head[u] = p;</div><div class="line">p = (L_NODE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(L_NODE)); <span class="comment">//生成顶点结点</span></div><div class="line">p-&gt;ver = u; <span class="comment">//保存顶点编号</span></div><div class="line">p-&gt;link = head[v] ; <span class="comment">//1ink指向顶点head[v]</span></div><div class="line">head[v] = p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> visit[], L_NODE *head[])</span> <span class="comment">//深度优先搜索</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">L_NODE *t;</div><div class="line">visit[u] = <span class="number">1</span>; <span class="comment">//标记己访问</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,u);</div><div class="line">t = head[u];</div><div class="line"><span class="keyword">while</span>(t != <span class="literal">NULL</span>) <span class="comment">//顶点不为空</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(visit[t-&gt;ver] == <span class="number">0</span>) <span class="comment">//未被访问过</span></div><div class="line">dfs(t-&gt;ver, visit, head); <span class="comment">//递归访问该顶点</span></div><div class="line">t = t-&gt;link;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> visit[], L_NODE *head[])</span> <span class="comment">//广度优先搜索</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> v, w;</div><div class="line">L_NODE *t;</div><div class="line">QTYPE <span class="built_in">queue</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, u);</div><div class="line">visit[u] = <span class="number">1</span>; <span class="comment">//标记第一个已访问结点</span></div><div class="line"><span class="built_in">queue</span>.qa = <span class="number">0</span>; <span class="comment">//队首指针</span></div><div class="line"><span class="built_in">queue</span>.qe = <span class="number">0</span>; <span class="comment">//队尾指针</span></div><div class="line"><span class="built_in">queue</span>.item[<span class="number">0</span>] = u; <span class="comment">//第一个结点入队</span></div><div class="line"><span class="keyword">while</span>(<span class="built_in">queue</span>.qa &lt;= <span class="built_in">queue</span>.qe) <span class="comment">//队列不为空</span></div><div class="line">&#123;</div><div class="line">v = <span class="built_in">queue</span>.item[<span class="built_in">queue</span>.qa++]; <span class="comment">//取队首元素</span></div><div class="line">t = head[v];</div><div class="line"><span class="keyword">while</span>(t != <span class="literal">NULL</span>) <span class="comment">//结点t不为空</span></div><div class="line">&#123;</div><div class="line">w = t-&gt;ver;</div><div class="line"><span class="keyword">if</span>(visit[w] == <span class="number">0</span>) <span class="comment">//如果结点未被访过</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,w);</div><div class="line">visit[w] = <span class="number">1</span>;</div><div class="line"><span class="built_in">queue</span>.item[++<span class="built_in">queue</span>.qe] = w; <span class="comment">//结点进队</span></div><div class="line">&#125;</div><div class="line">t = t-&gt;link; <span class="comment">//下一个邻接顶点</span></div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_adj_list2</span><span class="params">(L_NODE *head[], <span class="keyword">int</span> n, E_NODE e[], <span class="keyword">int</span> m)</span> <span class="comment">//建立有向图的邻接链表</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, u, v;</div><div class="line">L_NODE *p;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">head[i] = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i ++)</div><div class="line">&#123;</div><div class="line">u = e[i].ver1;</div><div class="line">v = e[i].ver2;</div><div class="line">p = (L_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(L_NODE));  <span class="comment">//生成顶点结点</span></div><div class="line">p -&gt;ver = v;</div><div class="line">p -&gt;link = head[u];</div><div class="line">head[u] = p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*求强连通分量所要用到的全局变量*/</span></div><div class="line"><span class="keyword">int</span> DFN[MAXN]; <span class="comment">//记录在做dfs时节点的搜索次序</span></div><div class="line"><span class="keyword">int</span> low[MAXN]; <span class="comment">//记录节点能够找到的最先访问的祖先的记号</span></div><div class="line"><span class="keyword">int</span> count=<span class="number">1</span>; <span class="comment">//标记访问次序，时间戳</span></div><div class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[MAXN]; <span class="comment">//栈</span></div><div class="line"><span class="keyword">int</span> top=<span class="number">-1</span>; <span class="comment">//栈顶指针</span></div><div class="line"><span class="keyword">int</span> flag[MAXN]; <span class="comment">//标记节点是否已经在栈中</span></div><div class="line"><span class="keyword">int</span> number=<span class="number">0</span>; <span class="comment">//连通图的数量</span></div><div class="line"><span class="keyword">int</span> appear[MAXN]; <span class="comment">//当前点所在的连通分量是否已被找到</span></div><div class="line"><span class="comment">/********************************/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u, L_NODE *head[])</span> <span class="comment">//Tarjan算法求有向图的强连通分量</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> v,i;</div><div class="line">    DFN[u] = low[u] = count++; <span class="comment">//初始化两个值，自己为能找到的最先访问的祖先</span></div><div class="line">    <span class="built_in">stack</span>[++top]=u;</div><div class="line">    flag[u]=<span class="number">1</span>; <span class="comment">//标记为已经在栈中</span></div><div class="line">    L_NODE *p = head[u];</div><div class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">    v = p-&gt;ver;</div><div class="line">        <span class="keyword">if</span>(!DFN[v]) <span class="comment">//如果点i没有被访问过</span></div><div class="line">        &#123;</div><div class="line">            Tarjan(v,head); <span class="comment">//递归访问</span></div><div class="line">            <span class="keyword">if</span>(low[v] &lt; low[u])</div><div class="line">                low[u] = low[v]; <span class="comment">//更新能找到的祖先</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="comment">//如果访问过了，并且该点的DFN更小</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(DFN[v] &lt; low[u] &amp;&amp; flag[v])</div><div class="line">                low[u] = DFN[v];</div><div class="line">        &#125;</div><div class="line">        p = p-&gt;link;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(DFN[u] == low[u]) <span class="comment">//往后回溯的时候，如果发现DFN和low相同的节点，就可以把这个节点之后的节点全部弹栈，构成连通图</span></div><div class="line">    &#123;</div><div class="line">        number++; <span class="comment">//连通图的数量加一</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"&#123; "</span>);</div><div class="line">        <span class="keyword">do</span></div><div class="line">        &#123;</div><div class="line">            i = <span class="built_in">stack</span>[top--]; <span class="comment">//依次取出，直到u</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</div><div class="line">            flag[i] = <span class="number">0</span>; <span class="comment">//设置为不在栈中</span></div><div class="line">            appear[i] = <span class="number">1</span>; <span class="comment">//所在的强连通分量已被找到</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(i != u);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_adj_list3</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, E_NODE e[], CH_NODE ch[])</span> <span class="comment">//创建有向图的邻接链表，头指针蕴含入度信息</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, u, v;</div><div class="line">VL_NODE *p;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt;= n; i ++)  <span class="comment">//初始化n个表头结点</span></div><div class="line">&#123;</div><div class="line">ch[i].count = <span class="number">0</span>; <span class="comment">//顶点入度初始化为0</span></div><div class="line">ch[i].head = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">&#123;</div><div class="line">u = e[i].ver1;</div><div class="line">v = e[i].ver2;</div><div class="line">p = (VL_NODE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(VL_NODE));</div><div class="line">p-&gt;ver = v;</div><div class="line">p-&gt;link = ch[u].head;</div><div class="line">ch[u].head = p;</div><div class="line">(ch[v].count)++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Topol_order_AOV</span><span class="params">(CH_NODE ch[], <span class="keyword">int</span> n, <span class="keyword">int</span> tpv[])</span> <span class="comment">//拓扑排序AOV</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, k;</div><div class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line">VL_NODE *t;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt;= n; i ++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(ch[i].count == <span class="number">0</span>)  <span class="comment">//入度为0的结点入栈</span></div><div class="line">&#123;</div><div class="line">ch[i].count = top; <span class="comment">//用count存储上一入栈结点的编号</span></div><div class="line">top = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(top != <span class="number">0</span>) <span class="comment">//当栈不为空</span></div><div class="line">&#123;</div><div class="line">j = top; <span class="comment">//出栈</span></div><div class="line">top = ch[top].count; <span class="comment">//修改栈顶“指针”</span></div><div class="line">tpv[++i] = j;</div><div class="line">t = ch[j].head;</div><div class="line"><span class="keyword">while</span> (t != <span class="literal">NULL</span>)  <span class="comment">//遍历顶配的链表</span></div><div class="line">&#123;</div><div class="line">k = t-&gt;ver;</div><div class="line"><span class="keyword">if</span>(--(ch[k].count) == <span class="number">0</span>) <span class="comment">//顶点k的入度先-1再判断是否为0</span></div><div class="line">&#123;</div><div class="line">ch[k].count = top; <span class="comment">//顶点k入栈</span></div><div class="line">top= k; <span class="comment">//修改栈顶“指针”</span></div><div class="line">&#125;</div><div class="line">t = t-&gt;link;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Topol_order_AOE</span><span class="params">(CH_NODE ch[], <span class="keyword">int</span> n)</span> <span class="comment">//AOE网络,求最小学期数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, k;</div><div class="line"><span class="keyword">int</span> flag[MAXN];</div><div class="line"><span class="keyword">int</span> this_semester[MAXN];</div><div class="line"><span class="keyword">int</span> semester = <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">VL_NODE *t;</div><div class="line"><span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</div><div class="line"><span class="keyword">while</span>(num != n)</div><div class="line">&#123;</div><div class="line">j = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt;= n; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(ch[i].count == <span class="number">0</span> &amp;&amp; flag[i] == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">this_semester[j++] = i;</div><div class="line">flag[i] = <span class="number">1</span>;</div><div class="line">num++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(j == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"第%d学期学：\n"</span>,semester);</div><div class="line">semester++;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"&#123; "</span>);</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; j; i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,this_semester[i]);</div><div class="line">t = ch[this_semester[i]].head;</div><div class="line"><span class="keyword">while</span> (t != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">k = t-&gt;ver;</div><div class="line">--ch[k].count;</div><div class="line">t = t-&gt;link;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(num &lt; n) <span class="built_in">printf</span>(<span class="string">"无解\n"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"最少需要%d个学期\n"</span>,semester<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> result = <span class="number">0</span>; <span class="comment">//记录共有多少个</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Topol_order_AOV_recursion</span><span class="params">(CH_NODE ch[], <span class="keyword">int</span> n, <span class="keyword">int</span> tpv[], <span class="keyword">int</span> tag[], <span class="keyword">int</span> times)</span> <span class="comment">//回溯法求所有拓扑排序</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, k;</div><div class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> <span class="built_in">array</span>[MAXN];</div><div class="line">VL_NODE *t;</div><div class="line"><span class="keyword">if</span>(times == n)</div><div class="line">&#123;</div><div class="line">result++;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,tpv[i]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(ch[i].count == <span class="number">0</span> &amp;&amp; tag[i] == <span class="number">0</span>)  <span class="comment">//入度为0的结点入栈</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">array</span>[top++] = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; top; i++)</div><div class="line">&#123;</div><div class="line">tpv[times++] = <span class="built_in">array</span>[i];</div><div class="line">tag[<span class="built_in">array</span>[i]] = <span class="number">1</span>;</div><div class="line">t = ch[<span class="built_in">array</span>[i]].head;</div><div class="line"><span class="keyword">while</span> (t != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">k = t-&gt;ver;</div><div class="line">--ch[k].count;</div><div class="line">t = t-&gt;link;</div><div class="line">&#125;</div><div class="line">Topol_order_AOV_recursion(ch, n, tpv, tag, times); <span class="comment">//递归</span></div><div class="line">times--; <span class="comment">//复原</span></div><div class="line">tag[<span class="built_in">array</span>[i]] = <span class="number">0</span>;</div><div class="line">t = ch[<span class="built_in">array</span>[i]].head;</div><div class="line"><span class="keyword">while</span> (t != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">k = t-&gt;ver;</div><div class="line">++ch[k].count;</div><div class="line">t = t-&gt;link;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">/****************************图的遍历dfs****************************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int i,n,m,u;</span></div><div class="line"><span class="comment">E_NODE e[MAXN];</span></div><div class="line"><span class="comment">L_NODE *head[MAXN];</span></div><div class="line"><span class="comment">int visit[MAXN];</span></div><div class="line"><span class="comment">memset(visit,0,sizeof(visit));</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;e[i].ver1,&amp;e[i].ver2);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list(head, n, e, m);</span></div><div class="line"><span class="comment">printf("请输入出发点：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;u);</span></div><div class="line"><span class="comment">printf("深度优先遍历结果为：");</span></div><div class="line"><span class="comment">dfs(u, visit, head);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/****************************图的遍历bfs****************************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int i,n,m,u;</span></div><div class="line"><span class="comment">E_NODE e[MAXN];</span></div><div class="line"><span class="comment">L_NODE *head[MAXN];</span></div><div class="line"><span class="comment">int visit[MAXN];</span></div><div class="line"><span class="comment">memset(visit,0,sizeof(visit));</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;e[i].ver1,&amp;e[i].ver2);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list(head, n, e, m);</span></div><div class="line"><span class="comment">printf("请输入出发点：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;u);</span></div><div class="line"><span class="comment">printf("广度优先遍历结果为：");</span></div><div class="line"><span class="comment">bfs(u, visit, head);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">/********************图的遍历找出有向图的所有强连通分量***********************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int i,n,m;</span></div><div class="line"><span class="comment">E_NODE e[MAXN];</span></div><div class="line"><span class="comment">L_NODE *head[MAXN];</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：(节点编号只能在1到%d之间)\n",m,n);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;e[i].ver1,&amp;e[i].ver2);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list2(head, n, e, m); //建立邻接链表</span></div><div class="line"><span class="comment">memset(DFN,0,sizeof(DFN)); //数据的初始化</span></div><div class="line"><span class="comment">    memset(low,0,sizeof(low));</span></div><div class="line"><span class="comment">    memset(flag,0,sizeof(flag));</span></div><div class="line"><span class="comment">    memset(appear,0,sizeof(appear));</span></div><div class="line"><span class="comment">    for(i = 1; i &lt;= n; i++)</span></div><div class="line"><span class="comment">    &#123;</span></div><div class="line"><span class="comment">        if(!appear[i])</span></div><div class="line"><span class="comment">        Tarjan(i,head);</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">printf("共%d个强连通分量\n",number);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/****************************最小代价生成树Prim*********************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int cost[MAXN][MAXN];</span></div><div class="line"><span class="comment">int i,j,n,m,a,b,w;</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; MAXN; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">for(j = 0; j &lt; MAXN; j++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">cost[i][j] = MAXINT;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">for(i = 0; i &lt; MAXN; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">cost[i][i] = 0;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d%d",&amp;a,&amp;b,&amp;w);</span></div><div class="line"><span class="comment">cost[a][b] = w;</span></div><div class="line"><span class="comment">cost[b][a] = w;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">Prim(cost, n, 1);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*******************************最小代价生成树Kruskal****************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int i,n,m;</span></div><div class="line"><span class="comment">EDGE edge[MAXN];</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].w);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">Kruskal(edge, n, m);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*******************************最短路径Dijkstra*********************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int cost[MAXN][MAXN];</span></div><div class="line"><span class="comment">int dist[MAXN];</span></div><div class="line"><span class="comment">int pre[MAXN];</span></div><div class="line"><span class="comment">int stack[MAXN];</span></div><div class="line"><span class="comment">int n,m,start,end,a,b,w,i,j,top=0,temp;</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; MAXN; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">dist[i] = 0;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">for(i = 0; i &lt; MAXN; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">for(j = 0; j &lt; MAXN; j++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">cost[i][j] = MAXINT;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d%d",&amp;a,&amp;b,&amp;w);</span></div><div class="line"><span class="comment">cost[a][b] = w;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("请输入起点和终点：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;start,&amp;end);</span></div><div class="line"><span class="comment">Dijkstra(cost, n, start, dist, pre);</span></div><div class="line"><span class="comment">printf("最短路径长度为：%d\n",dist[end]);</span></div><div class="line"><span class="comment">printf("路径为:");</span></div><div class="line"><span class="comment">temp = end;</span></div><div class="line"><span class="comment">while(pre[end] != 0)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">stack[top++] = pre[end];</span></div><div class="line"><span class="comment">end = pre[end];</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">while(--top &gt;= 0)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">printf("%d-&gt;",stack[top]);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("%d\n",temp);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">/*******************************最短路径Floyd*********************************/</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int cost[MAXN][MAXN];</span></div><div class="line"><span class="comment">int path[MAXN][MAXN];</span></div><div class="line"><span class="comment">int n,m,a,b,w,i,j;</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; MAXN; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">for(j = 0; j &lt; MAXN; j++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">cost[i][j] = MAXINT;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 0; i &lt; m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d%d",&amp;a,&amp;b,&amp;w);</span></div><div class="line"><span class="comment">cost[a][b] = w;</span></div><div class="line"><span class="comment">cost[b][a] = w; //取消注释可作为无向图处理</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">Floyd(cost, n, path);</span></div><div class="line"><span class="comment">print_all_path(n, path, cost);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*********************************拓扑排序***************************************/</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">    int n,m,i;</span></div><div class="line"><span class="comment">E_NODE e[MAXN];</span></div><div class="line"><span class="comment">CH_NODE ch[MAXN];</span></div><div class="line"><span class="comment">int tpv[MAXN];</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 1; i &lt;= m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;e[i].ver1,&amp;e[i].ver2);  //输入边尾、头结点的序号</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list3(n, m, e, ch);  //建立邻接表</span></div><div class="line"><span class="comment">count = Topol_order_AOV(ch, n, tpv);</span></div><div class="line"><span class="comment">if(count &lt; n) //顶点没有全部输出</span></div><div class="line"><span class="comment">printf("图中存在有向环，故不存在拓扑序列！\n");</span></div><div class="line"><span class="comment">else</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">printf("拓扑序列为:\n");</span></div><div class="line"><span class="comment">for(i = 1; i &lt;= n; i++)  //打印结果</span></div><div class="line"><span class="comment">printf("%d ",tpv[i]);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="comment">/******************************选做题1,求最小学期数**************************/</span></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">int n,m,i;</span></div><div class="line"><span class="comment">E_NODE edge[MAXN];</span></div><div class="line"><span class="comment">CH_NODE ch[MAXN];</span></div><div class="line"><span class="comment">printf("请输入共有多少节课以及有多少对先导课程和进修课程（课程用数字表示）：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d对先导课程和进修课程：\n",m);</span></div><div class="line"><span class="comment">for(i = 1; i &lt;= m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;edge[i].ver1,&amp;edge[i].ver2);  //输入边尾、头结点的序号</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list3(n, m, edge, ch);  //建立邻接表</span></div><div class="line"><span class="comment">Topol_order_AOE(ch, n);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">/*********************选做题2,求一个有向图的所有拓扑序列************************/</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int n,m,i;</span></div><div class="line"><span class="comment">E_NODE e[MAXN];</span></div><div class="line"><span class="comment">CH_NODE ch[MAXN];</span></div><div class="line"><span class="comment">int tpv[MAXN];</span></div><div class="line"><span class="comment">int tag[MAXN];</span></div><div class="line"><span class="comment">memset(tag,0,sizeof(tag));</span></div><div class="line"><span class="comment">printf("请输入共有多少个点和多少条边：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;n,&amp;m);</span></div><div class="line"><span class="comment">printf("请依次输入%d条边：\n",m);</span></div><div class="line"><span class="comment">for(i = 1; i &lt;= m; i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;e[i].ver1,&amp;e[i].ver2);  //输入边尾、头结点的序号</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">create_adj_list3(n, m, e, ch);  //建立邻接表</span></div><div class="line"><span class="comment">printf("该有向图的拓扑序列有：\n");</span></div><div class="line"><span class="comment">Topol_order_AOV_recursion(ch, n, tpv, tag, 0);</span></div><div class="line"><span class="comment">printf("共%d个拓扑序列\n",result);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;数据结构最后一次补充作业。&lt;/p&gt;
    
    </summary>
    
      <category term="c" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="数据结构" scheme="https://luxuantao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>树的应用</title>
    <link href="https://luxuantao.github.io/2017/12/23/%E6%A0%91%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://luxuantao.github.io/2017/12/23/树的应用/</id>
    <published>2017-12-23T04:13:29.000Z</published>
    <updated>2018-01-25T09:03:04.309Z</updated>
    
    <content type="html"><![CDATA[<hr><p>又是六百多行。</p><a id="more"></a><p>数据结构课第三次补充作业，树的各种应用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 30</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></div><div class="line">&#125; NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVL_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="keyword">int</span> bel;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVL_node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></div><div class="line">&#125; AVL_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LRtag</span>// 左右标志表示树节点</span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">char</span> data;</div><div class="line"><span class="keyword">int</span> ltag;</div><div class="line"><span class="keyword">int</span> rtag;</div><div class="line">&#125; LRBTree;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">move</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> a;</div><div class="line"><span class="keyword">int</span> b;</div><div class="line">&#125; MOVE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="keyword">int</span> y;</div><div class="line"><span class="keyword">int</span> d;</div><div class="line">&#125; STACK;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">queen_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> r;</div><div class="line"><span class="keyword">int</span> c;</div><div class="line"><span class="keyword">int</span> tag;</div><div class="line">&#125; Q_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">huffman_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="keyword">int</span> num; <span class="comment">//节点个数</span></div><div class="line">    <span class="keyword">int</span> mindata; <span class="comment">//是序列中的第几个</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">huffman_node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></div><div class="line">&#125; HUFFMAN_NODE;</div><div class="line"></div><div class="line"><span class="keyword">char</span> preOrder[MAX];</div><div class="line"><span class="keyword">char</span> inOrder[MAX];</div><div class="line"><span class="keyword">char</span> postOrder[MAX];</div><div class="line"></div><div class="line">STACK s[MAXM * MAXM]; <span class="comment">//栈s</span></div><div class="line"><span class="keyword">int</span> top; <span class="comment">//top是栈 s 的栈顶指针</span></div><div class="line"><span class="keyword">int</span> maze[MAXM][MAXM];</div><div class="line"><span class="keyword">int</span> mark[MAXM][MAXM];</div><div class="line">MOVE mv[<span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(NODE *root, <span class="keyword">char</span> a, NODE **p_p, NODE **p_q)</span> <span class="comment">//在二叉查找树中查找键值为a的结点</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line">    *p_p = <span class="literal">NULL</span>;</div><div class="line">    *p_q = root;</div><div class="line">    <span class="keyword">while</span>(*p_q != <span class="literal">NULL</span>)   <span class="comment">//*p_q为空，算法结束</span></div><div class="line">    &#123;</div><div class="line">    times++;</div><div class="line">        <span class="keyword">if</span>((*p_q)-&gt;data == a) <span class="keyword">return</span> times;  <span class="comment">//查找成功</span></div><div class="line">        *p_p = *p_q;</div><div class="line">        <span class="keyword">if</span>(a &lt; (*p_q) -&gt;data)  <span class="comment">//a小于当前结点值</span></div><div class="line">            *p_q = (*p_q)-&gt;lchild;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        *p_q = (*p_q)-&gt;rchild;  <span class="comment">//a大于当前结点值</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> times;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(NODE **root, <span class="keyword">char</span> a)</span> <span class="comment">//插入键值为a的结点</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">NODE *p, *q, *r;</div><div class="line">search(*root, a, &amp;p, &amp;q);  <span class="comment">//查找键值为a的结点</span></div><div class="line"><span class="keyword">if</span>(q != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//已存在键值为a的结点，返回l</span></div><div class="line">r = (NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line">r-&gt;data = a;</div><div class="line">r-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">r-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="comment">//查找树为空</span></div><div class="line">    *root = r;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;data &gt; a) <span class="comment">//查找路径中最后一个结点的值大于a</span></div><div class="line">        p-&gt;lchild = r; <span class="comment">//将新节点插到左子树</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">    p-&gt;rchild = r; <span class="comment">//将新节点插到右子树</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//插入成功返回0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder_print</span><span class="params">(NODE *t)</span> <span class="comment">//递归中序遍历查找二叉树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        inorder_print(t-&gt;lchild);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);</div><div class="line">    inorder_print(t-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">avl_inorder_print</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//递归中序遍历平衡二叉树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        avl_inorder_print(t-&gt;lchild);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);</div><div class="line">    avl_inorder_print(t-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">avl_inorder_print_tostring</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//递归中序遍历平衡二叉树,输出到数组</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        avl_inorder_print_tostring(t-&gt;lchild);</div><div class="line">        inOrder[num++] = t-&gt;data; <span class="comment">//存下来，借此判断是否是查找树</span></div><div class="line">    avl_inorder_print_tostring(t-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">siftdown</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> <span class="comment">//堆调整</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> j,t,times=<span class="number">0</span>;</div><div class="line">t = a[i];</div><div class="line"><span class="keyword">while</span>((j = <span class="number">2</span>*i+<span class="number">1</span>) &lt; n) <span class="comment">//a[i]左子结点为a[2*i+1]</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(j &lt; n<span class="number">-1</span> &amp;&amp; a[j] &lt; a[j+<span class="number">1</span>]) <span class="comment">//j为左、右子结点较大值的下标</span></div><div class="line">j++;</div><div class="line"><span class="keyword">if</span>(t &lt; a[j]) <span class="comment">//若a[i]小于子结点的值，则交换</span></div><div class="line">&#123;</div><div class="line">times ++;</div><div class="line">a[i] = a[j];</div><div class="line">i = j;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">a[i] = t; <span class="comment">//将t放到正确位置</span></div><div class="line"><span class="keyword">return</span> times;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> <span class="comment">//堆排序</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i,t;</div><div class="line"><span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=(n<span class="number">-2</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--) <span class="comment">//初始建堆</span></div><div class="line">times += siftdown(a,i,n); <span class="comment">//堆调整</span></div><div class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</div><div class="line">&#123;</div><div class="line">times++;</div><div class="line">t = a[<span class="number">0</span>]; <span class="comment">//对调a[0]与a[i]</span></div><div class="line">a[<span class="number">0</span>] = a[i];</div><div class="line">a[i] = t;</div><div class="line">times += siftdown(a,<span class="number">0</span>,i); <span class="comment">//堆调整</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> times;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">least_num_of_h_height_AVL</span><span class="params">(<span class="keyword">int</span> h)</span> <span class="comment">//计算高度为h的AVL树的最小节点个数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(h == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(h == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> least_num_of_h_height_AVL(h<span class="number">-1</span>)+least_num_of_h_height_AVL(h<span class="number">-2</span>)+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">AVL_NODE* <span class="title">initial</span><span class="params">()</span><span class="comment">// 树节点初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">AVL_NODE* avl_node;</div><div class="line">avl_node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AVL_NODE));</div><div class="line">avl_node-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">avl_node-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">avl_node-&gt;bel = <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> avl_node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">AVL_NODE* <span class="title">BinaryTreeFromOrderings_Pre</span><span class="params">(<span class="keyword">char</span>* preorder, <span class="keyword">char</span>* inorder, <span class="keyword">int</span> length)</span><span class="comment">// 根据前序中序生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    AVL_NODE *p = initial();</div><div class="line">    p-&gt;data = *preorder;</div><div class="line">    <span class="keyword">for</span>(index=<span class="number">0</span>; index &lt; length; index++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(inorder[index] == *preorder) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    p-&gt;lchild = BinaryTreeFromOrderings_Pre(preorder+<span class="number">1</span>,inorder,index);<span class="comment">//递归调用</span></div><div class="line">    p-&gt;rchild = BinaryTreeFromOrderings_Pre(preorder+index+<span class="number">1</span>,inorder+index+<span class="number">1</span>,length-index<span class="number">-1</span>);<span class="comment">//递归调用</span></div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">AVL_NODE* <span class="title">BinaryTreeFromOrderings_Post</span><span class="params">(<span class="keyword">char</span>* inorder, <span class="keyword">char</span>* postorder, <span class="keyword">int</span> length)</span><span class="comment">// 根据中序后序生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    AVL_NODE *p = initial();</div><div class="line">    p-&gt;data = *(postorder+length<span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(index=<span class="number">0</span>; index &lt; length; index++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(inorder[index] == *(postorder+length<span class="number">-1</span>)) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    p-&gt;lchild = BinaryTreeFromOrderings_Post(inorder,postorder,index);<span class="comment">//递归调用</span></div><div class="line">    p-&gt;rchild = BinaryTreeFromOrderings_Post(inorder+index+<span class="number">1</span>,postorder+index,length-index<span class="number">-1</span>);<span class="comment">//递归调用</span></div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">AVL_NODE* <span class="title">BinaryTreeFromLRtag</span><span class="params">(LRBTree tree[],<span class="keyword">int</span> n)</span><span class="comment">//根据前序加附加两个标志位生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">AVL_NODE *<span class="built_in">stack</span>[MAX],*root,*p,*q;</div><div class="line"><span class="keyword">int</span> top,i;</div><div class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">root = initial();</div><div class="line">p = root;</div><div class="line">top = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)</div><div class="line">&#123;</div><div class="line">p-&gt;data = tree[i].data;</div><div class="line"><span class="keyword">if</span>(tree[i].rtag == <span class="number">0</span>)<span class="comment">//有右节点</span></div><div class="line"><span class="built_in">stack</span>[top++] = p;</div><div class="line"><span class="keyword">else</span></div><div class="line">p-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">q = initial();</div><div class="line"><span class="keyword">if</span>(tree[i].ltag == <span class="number">0</span>)<span class="comment">//有左节点</span></div><div class="line">p-&gt;lchild = q;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">p-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">p = <span class="built_in">stack</span>[--top];</div><div class="line">p-&gt;rchild = q;</div><div class="line">&#125;</div><div class="line">p = q;</div><div class="line">&#125;</div><div class="line">p-&gt;data = tree[n<span class="number">-1</span>].data;</div><div class="line">p-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">p-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//获取高度</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> max=<span class="number">-1</span>,temp; <span class="comment">//tag用来标记该节点有没有子节点</span></div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//为空，高度为-1</span></div><div class="line">    <span class="keyword">if</span>(t-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; t-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    temp = height(t-&gt;lchild);</div><div class="line">    max = temp &gt; max ? temp : max; <span class="comment">//max是子树中的最大高度</span></div><div class="line">    temp = height(t-&gt;rchild);</div><div class="line">    max = temp &gt; max ? temp : max; <span class="comment">//max是子树中的最大高度</span></div><div class="line">    <span class="keyword">return</span> max+<span class="number">1</span>; <span class="comment">//子树的最大高度再加一就是目前的最大高度</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">height_by_leaf</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//仅“跟踪”到叶子结点的一条路径，而不查看树中所有的结点，返回AVL树的高度</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> h = <span class="number">-1</span>;</div><div class="line"><span class="keyword">while</span>(t != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">h++;</div><div class="line"><span class="keyword">if</span>(t-&gt;bel &gt;= <span class="number">0</span>) t = t-&gt;lchild;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;bel &lt; <span class="number">0</span>) t = t-&gt;rchild;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> h;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal_bel</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//计算每个点的平衡度</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">t-&gt;bel = height(t-&gt;rchild) - height(t-&gt;lchild);</div><div class="line"><span class="keyword">if</span>(t-&gt;lchild != <span class="literal">NULL</span>) cal_bel(t-&gt;lchild);</div><div class="line"><span class="keyword">if</span>(t-&gt;rchild != <span class="literal">NULL</span>) cal_bel(t-&gt;rchild);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_bel</span><span class="params">(AVL_NODE *t)</span> <span class="comment">//判断这棵树是不是平衡树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(t-&gt;bel&gt;<span class="number">1</span> || t-&gt;bel&lt;<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(t-&gt;lchild != <span class="literal">NULL</span> &amp;&amp; t-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> judge_bel(t-&gt;lchild) &amp;&amp; judge_bel(t-&gt;rchild);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;lchild != <span class="literal">NULL</span> &amp;&amp; t-&gt;rchild == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> judge_bel(t-&gt;lchild);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; t-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> judge_bel(t-&gt;rchild);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_search</span><span class="params">(AVL_NODE *root)</span> <span class="comment">//判断这棵树是不是查找树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">avl_inorder_print_tostring(root);</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num<span class="number">-1</span>;i++) <span class="comment">//看中序遍历是不是升序</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(inOrder[i]-inOrder[i+<span class="number">1</span>] &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setmove</span><span class="params">()</span> <span class="comment">//移动的八个方向的mv数组初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">mv[<span class="number">0</span>].a = <span class="number">-1</span>;  mv[<span class="number">0</span>].b =  <span class="number">0</span>;</div><div class="line">mv[<span class="number">1</span>].a = <span class="number">-1</span>;  mv[<span class="number">1</span>].b =  <span class="number">1</span>;</div><div class="line">mv[<span class="number">2</span>].a =  <span class="number">0</span>;  mv[<span class="number">2</span>].b =  <span class="number">1</span>;</div><div class="line">mv[<span class="number">3</span>].a =  <span class="number">1</span>;  mv[<span class="number">3</span>].b =  <span class="number">1</span>;</div><div class="line">mv[<span class="number">4</span>].a =  <span class="number">1</span>;  mv[<span class="number">4</span>].b =  <span class="number">0</span>;</div><div class="line">mv[<span class="number">5</span>].a =  <span class="number">1</span>;  mv[<span class="number">5</span>].b = <span class="number">-1</span>;</div><div class="line">mv[<span class="number">6</span>].a =  <span class="number">0</span>;  mv[<span class="number">6</span>].b = <span class="number">-1</span>;</div><div class="line">mv[<span class="number">7</span>].a = <span class="number">-1</span>;  mv[<span class="number">7</span>].b = <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputmaze</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> <span class="comment">// 输入迷宫</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"请输入迷宫:\n"</span>);</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=m+<span class="number">1</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;=n+<span class="number">1</span>; j++)</div><div class="line">&#123;</div><div class="line">maze[i][j] = <span class="number">1</span>; <span class="comment">//初始化迷宫</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n; j++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;maze[i][j]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setmark</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> <span class="comment">//防止重复移动的mark数组初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=m+<span class="number">1</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;=n+<span class="number">1</span>; j++)</div><div class="line">&#123;</div><div class="line">mark[i][j]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmazepath</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> <span class="comment">//迷宫求解</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">setmove();</div><div class="line">setmark(m,n);</div><div class="line"><span class="keyword">int</span> i, j, k, g, h, t;</div><div class="line"><span class="keyword">if</span>(maze[<span class="number">1</span>][<span class="number">1</span>] != <span class="number">0</span> || maze[m][n] != <span class="number">0</span>) <span class="comment">//如果入口或出口不能通过</span></div><div class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//无解，返回1</span></div><div class="line">s[<span class="number">0</span>].x = <span class="number">1</span>; <span class="comment">//入口结点（1，1）入栈</span></div><div class="line">s[<span class="number">0</span>].y = <span class="number">1</span>;</div><div class="line">s[<span class="number">0</span>].d = <span class="number">1</span>;</div><div class="line">top = <span class="number">1</span>; <span class="comment">//修改栈顶指针</span></div><div class="line">mark[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">//（1，1）点标记为已到达过</span></div><div class="line"><span class="keyword">while</span>(top &gt; <span class="number">0</span>) <span class="comment">//当栈不为空</span></div><div class="line">&#123;</div><div class="line">i = s[--top].x; <span class="comment">//取栈顶元素</span></div><div class="line">j = s[top].y;</div><div class="line">k = s[top].d;</div><div class="line"><span class="keyword">while</span>(k &lt; <span class="number">7</span>)</div><div class="line">&#123;</div><div class="line">            g = i+mv[++k].a; <span class="comment">//下一个位置的横坐标</span></div><div class="line">            h = j+mv[k].b; <span class="comment">//下一个位置的纵坐标</span></div><div class="line"><span class="keyword">if</span>(g == m &amp;&amp; h == n) <span class="comment">//到达出口</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"走出迷宫的方法为：\n"</span>);</div><div class="line"><span class="keyword">for</span>(t=<span class="number">0</span>; t&lt;top; t++) <span class="comment">//依次打印所通过的路径各顶点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%3d%3d-&gt;"</span>,s[t].x, s[t].y);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%3d%3d-&gt;"</span>,i, j);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%3d%3d\n"</span>,m,n);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//寻找成功，返回0</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (maze[g][h] ==<span class="number">0</span> &amp;&amp; mark[g][h] == <span class="number">0</span>) <span class="comment">//下一位置可通过且未到达过</span></div><div class="line">&#123;</div><div class="line">mark[g][h] = <span class="number">1</span>; <span class="comment">//下一位置标记已到达过</span></div><div class="line">s[top].x = i; <span class="comment">//当前结点入栈</span></div><div class="line">s[top].y = j;</div><div class="line">s[top++].d = k;</div><div class="line">i = g; <span class="comment">//前进到下一位置</span></div><div class="line">j = h;</div><div class="line">k = <span class="number">-1</span>; <span class="comment">//k重新初始化</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//找不到路径，返回1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">queens</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">//皇后问题</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">Q_NODE <span class="built_in">stack</span>[MAXM*MAXM];</div><div class="line"><span class="keyword">int</span> top;</div><div class="line"><span class="keyword">int</span> col[MAXM],md[<span class="number">2</span>*MAXM<span class="number">-1</span>],sd[<span class="number">2</span>*MAXM<span class="number">-1</span>]; <span class="comment">//列，主对角线，副对角线数组</span></div><div class="line"><span class="keyword">int</span> str, stc, i;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++)</div><div class="line">col[i] = <span class="number">0</span>; <span class="comment">//初始化列标记数组</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>*n<span class="number">-1</span>; i ++)</div><div class="line">&#123;</div><div class="line">md[i] = <span class="number">0</span>; <span class="comment">//初始化主对角线标记数组</span></div><div class="line">sd[i] = <span class="number">0</span>; <span class="comment">//初始化副对角线标记数组</span></div><div class="line">&#125;</div><div class="line">top = <span class="number">-1</span>; <span class="comment">//栈顶指针初始化为-1</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++) <span class="comment">//第一行结点入栈</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">stack</span>[++top].r = <span class="number">0</span>;</div><div class="line"><span class="built_in">stack</span>[top].c = n<span class="number">-1</span>-i;</div><div class="line"><span class="built_in">stack</span>[top].tag = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(top &gt;= <span class="number">0</span>) <span class="comment">//当栈不为空</span></div><div class="line">&#123;</div><div class="line">str = <span class="built_in">stack</span>[top].r; <span class="comment">//行号</span></div><div class="line">stc = <span class="built_in">stack</span>[top].c; <span class="comment">//列号</span></div><div class="line"><span class="keyword">if</span>(<span class="built_in">stack</span>[top].tag == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(col[stc] || md[str-stc+n<span class="number">-1</span>] || sd[str+stc]) <span class="comment">//如果当前位置所在列或主对角线或副对角线上已经有皇后</span></div><div class="line">top--; <span class="comment">//结点出栈</span></div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    col[stc] = <span class="number">1</span>; <span class="comment">//标记到列数组中</span></div><div class="line">md[str-stc+n<span class="number">-1</span>] = <span class="number">1</span>; <span class="comment">//标记到主对角线数组中</span></div><div class="line">sd[str+stc] = <span class="number">1</span>; <span class="comment">//标记到副对角线数组中</span></div><div class="line"><span class="built_in">stack</span>[top].tag = <span class="number">1</span>; <span class="comment">//该位置可能成为布局中的一个位置，tag域置1</span></div><div class="line"><span class="keyword">if</span>(str == n<span class="number">-1</span>) <span class="comment">//该位置已是最后一行</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"可以这样放:\n"</span>);</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=top ;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">stack</span>[i].tag) <span class="comment">//如果结点i的tag域为1</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%4d%3d\n"</span>,<span class="built_in">stack</span>[i].r,<span class="built_in">stack</span>[i].c); <span class="comment">//打印位置</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//成功返回0</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) <span class="comment">//将下一行结点入栈</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">stack</span>[++top].r = str+<span class="number">1</span>;</div><div class="line"><span class="built_in">stack</span>[top].c = n<span class="number">-1</span>-i;</div><div class="line"><span class="built_in">stack</span>[top].tag = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">col[stc] = <span class="number">0</span>; <span class="comment">//如果当前位置tag域为1，列标记数组置0</span></div><div class="line">md[str-stc+n<span class="number">-1</span>] = <span class="number">0</span>; <span class="comment">//主对角线标记数组置0</span></div><div class="line">sd[str+stc] = <span class="number">0</span>; <span class="comment">//副对角线标记数组置0</span></div><div class="line">top--; <span class="comment">//结点出栈</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//不成功返回1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">HUFFMAN_NODE *<span class="title">create_huffman_tree</span><span class="params">(<span class="keyword">char</span> a[], <span class="keyword">double</span> w[], <span class="keyword">int</span> n)</span> <span class="comment">//建立哈夫曼树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HUFFMAN_NODE *addr[<span class="number">2</span>*MAXM<span class="number">-1</span>];</div><div class="line"><span class="keyword">int</span> n1, n2, i, j;</div><div class="line"><span class="keyword">double</span> u, v, min1, min2;</div><div class="line"><span class="keyword">int</span> minnum1, minnum2, minmindata1, minmindata2;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; n; i++) <span class="comment">//初始化所有结点</span></div><div class="line">&#123;</div><div class="line">addr[i] = (HUFFMAN_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HUFFMAN_NODE));</div><div class="line">addr[i]-&gt;data = a[i];</div><div class="line">addr[i]-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">addr[i]-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">addr[i]-&gt;num = <span class="number">1</span>;</div><div class="line">addr[i]-&gt;mindata = i;</div><div class="line">w[i] = -w[i]; <span class="comment">//可供选择的结点权值设为负</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = n; i &lt; <span class="number">2</span>*n<span class="number">-1</span>; i++)</div><div class="line">&#123;</div><div class="line">n1 = <span class="number">-1</span>; min1 = <span class="number">9999</span>; minnum1 = <span class="number">9999</span>; minmindata1 = <span class="number">9999</span>;</div><div class="line">n2 = <span class="number">-1</span>; min2 = <span class="number">9999</span>; minnum2 = <span class="number">9999</span>; minmindata2 = <span class="number">9999</span>;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i; j ++)</div><div class="line">&#123;</div><div class="line">v = w[j];</div><div class="line">u = -v;</div><div class="line"><span class="keyword">if</span>(u &gt; <span class="number">0</span>) <span class="comment">//结点j为可供选择结点</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>( u&lt;min1 || (<span class="built_in">fabs</span>(u-min1)&lt;<span class="number">1e-6</span> &amp;&amp; addr[j]-&gt;num&lt;minnum1) || (<span class="built_in">fabs</span>(u-min1)&lt;<span class="number">1e-6</span> &amp;&amp; addr[j]-&gt;num==minnum1 &amp;&amp; addr[j]-&gt;mindata&lt;minmindata1) )</div><div class="line">&#123;</div><div class="line"><span class="comment">//标记当前权值最小结点</span></div><div class="line">min2 = min1; n2 = n1; minnum2 = minnum1; minmindata2 = minmindata1;</div><div class="line">min1 = u; n1 = j; minnum1 = addr[j]-&gt;num; minmindata1 = addr[j]-&gt;mindata;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>( u&lt;min2 || (<span class="built_in">fabs</span>(u-min2)&lt;<span class="number">1e-6</span> &amp;&amp; addr[j]-&gt;num&lt;minnum2) || (<span class="built_in">fabs</span>(u-min2)&lt;<span class="number">1e-6</span> &amp;&amp; addr[j]-&gt;num==minnum2 &amp;&amp; addr[j]-&gt;mindata&lt;minmindata2) )</div><div class="line">&#123;</div><div class="line"><span class="comment">//标记当前权值第二小结点</span></div><div class="line">min2 = u; n2 = j; minnum2 = addr[j]-&gt;num; minmindata2 = addr[j]-&gt;mindata;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">addr[i] = (HUFFMAN_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HUFFMAN_NODE));</div><div class="line">addr[i]-&gt;data = <span class="string">'*'</span>; <span class="comment">//合并两棵权值最小的子树</span></div><div class="line">addr[i]-&gt;lchild = addr[n1];</div><div class="line">addr[i]-&gt;rchild = addr[n2];</div><div class="line">addr[i]-&gt;num = addr[n1]-&gt;num+addr[n2]-&gt;num+<span class="number">1</span>;</div><div class="line">addr[i]-&gt;mindata = addr[n1]-&gt;mindata&lt;addr[n2]-&gt;mindata ? addr[n1]-&gt;mindata : addr[n2]-&gt;mindata;</div><div class="line">w[i] = w[n1]+w[n2]; <span class="comment">//计算根结点权值（为负）</span></div><div class="line">w[n1] = -w[n1]; <span class="comment">//子结点权值恢复正值</span></div><div class="line">w[n2] = -w[n2];</div><div class="line">&#125;</div><div class="line">w[<span class="number">2</span>*n<span class="number">-2</span>] = -w[<span class="number">2</span>*n<span class="number">-2</span>]; <span class="comment">//修改根结点权值</span></div><div class="line"><span class="keyword">return</span> (addr[<span class="number">2</span>*n<span class="number">-2</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(HUFFMAN_NODE *root, <span class="keyword">char</span> s[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HUFFMAN_NODE *p;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(s[i] != <span class="string">'\0'</span>)</div><div class="line">&#123;</div><div class="line">p = root;</div><div class="line"><span class="keyword">while</span>(p-&gt;lchild != <span class="literal">NULL</span> || p-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(s[i] == <span class="string">'0'</span>)</div><div class="line">p = p-&gt;lchild;</div><div class="line"><span class="keyword">else</span></div><div class="line">p = p-&gt;rchild;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">//二叉查找树的操作</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int n,i,sum=0;</span></div><div class="line"><span class="comment">char ch[MAX];</span></div><div class="line"><span class="comment">NODE *root = NULL, *p = NULL, *q = NULL;</span></div><div class="line"><span class="comment">printf("请输入这棵二叉树共有多少个节点：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">getchar();</span></div><div class="line"><span class="comment">printf("请依次输入%d个键值:\n",n);</span></div><div class="line"><span class="comment">for(i=0;i&lt;n;i++) //依次插入</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%c",&amp;ch[i]);</span></div><div class="line"><span class="comment">getchar();</span></div><div class="line"><span class="comment">insert(&amp;root,ch[i]);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("中序输出为：\n");</span></div><div class="line"><span class="comment">inorder_print(root);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">for(i=0;i&lt;n;i++) //计算查找结点的平均比较次数</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">p = NULL;</span></div><div class="line"><span class="comment">q = NULL;</span></div><div class="line"><span class="comment">sum += search(root,ch[i],&amp;p,&amp;q);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printf("查找结点的平均比较次数为：\n");</span></div><div class="line"><span class="comment">printf("%.3lf\n",sum*1.0/n);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">//堆排序的操作</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int n,i,times;</span></div><div class="line"><span class="comment">int a[MAX];</span></div><div class="line"><span class="comment">printf("请输入共有多少个数需要排序：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">printf("请依次输入%d个键值:\n",n);</span></div><div class="line"><span class="comment">for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">scanf("%d",&amp;a[i]);</span></div><div class="line"><span class="comment">times = heap_sort(a,n); //堆排序</span></div><div class="line"><span class="comment">printf("排序后的结果为：\n");</span></div><div class="line"><span class="comment">for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">printf("%d ",a[i]);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">printf("共交换了%d次\n",times);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">//平衡查找树的操作</span></div><div class="line"><span class="comment">//AVL_NODE *root;</span></div><div class="line"><span class="comment">//三种顺序输入法</span></div><div class="line"><span class="comment">//1.前序加附加两个标志位</span></div><div class="line"><span class="comment">// int n,i; //节点个数</span></div><div class="line"><span class="comment">// LRBTree lrbarray[MAX];</span></div><div class="line"><span class="comment">// printf("请输入这棵树共有多少个节点：\n");</span></div><div class="line"><span class="comment">// scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">// printf("请依次输入%d个左标签的值，键值，右标签的值：\n",n);</span></div><div class="line"><span class="comment">// for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// scanf("%d %c %d",&amp;lrbarray[i].ltag,&amp;lrbarray[i].data,&amp;lrbarray[i].rtag);</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// root = BinaryTreeFromLRtag(lrbarray,n);</span></div><div class="line"><span class="comment">//2.前序加中序</span></div><div class="line"><span class="comment">// printf("请输入前序和中序：\n");</span></div><div class="line"><span class="comment">// scanf("%s%s",preOrder,inOrder);</span></div><div class="line"><span class="comment">// root = BinaryTreeFromOrderings_Pre(preOrder,inOrder,strlen(preOrder));</span></div><div class="line"><span class="comment">//3.中序加后序</span></div><div class="line"><span class="comment">// printf("请输入中序和后序：\n");</span></div><div class="line"><span class="comment">// scanf("%s%s",inOrder,postOrder);</span></div><div class="line"><span class="comment">// root = BinaryTreeFromOrderings_Post(inOrder,postOrder,strlen(inOrder));</span></div><div class="line"></div><div class="line"><span class="comment">// printf("是否为平衡查找树:");</span></div><div class="line"><span class="comment">// cal_bel(root);//计算每个节点的平衡度</span></div><div class="line"><span class="comment">// if(judge_bel(root) &amp;&amp; judge_search(root)) printf("是\n"); //既是平衡树又是查找树</span></div><div class="line"><span class="comment">// else printf("否\n");</span></div><div class="line"><span class="comment">// printf("这棵平衡查找树的高度为：%d\n",height_by_leaf(root));</span></div><div class="line"><span class="comment">// printf("请输入想要查询的AVL树的最小节点个数的高度：\n");</span></div><div class="line"><span class="comment">// int h;</span></div><div class="line"><span class="comment">// scanf("%d",&amp;h);</span></div><div class="line"><span class="comment">// printf("高度为%d的AVL树的最小节点个数为:%d\n",h,least_num_of_h_height_AVL(h));</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Huffman树的操作</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int n,i;</span></div><div class="line"><span class="comment">char a[MAXM];</span></div><div class="line"><span class="comment">double w[2*MAXM-1];</span></div><div class="line"><span class="comment">HUFFMAN_NODE *root;</span></div><div class="line"><span class="comment">printf("请输入要用多少字符构造huffman树：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">getchar();</span></div><div class="line"><span class="comment">printf("请输入%d个字符和对应的权值：\n",n);</span></div><div class="line"><span class="comment">for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">scanf("%c%lf",&amp;a[i],&amp;w[i]);</span></div><div class="line"><span class="comment">getchar();</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">root = create_huffman_tree(a,w,n);</span></div><div class="line"><span class="comment">printf("Huffman树创建完成\n");</span></div><div class="line"><span class="comment">//解码</span></div><div class="line"><span class="comment">printf("请输入想要解码的01字符串：");//001101001110010101011110110</span></div><div class="line"><span class="comment">char s[MAXM];</span></div><div class="line"><span class="comment">scanf("%s",s);</span></div><div class="line"><span class="comment">printf("解码结果为：\n");</span></div><div class="line"><span class="comment">decode(root,s);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">//皇后问题</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int n;</span></div><div class="line"><span class="comment">printf("请输入皇后的数量：\n");</span></div><div class="line"><span class="comment">scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">if(queens(n)) printf("无解\n");</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">//迷宫求解问题</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">int m,n;</span></div><div class="line"><span class="comment">printf("请输入迷宫的终点位置：\n");</span></div><div class="line"><span class="comment">scanf("%d%d",&amp;m,&amp;n);</span></div><div class="line"><span class="comment">inputmaze(m,n);</span></div><div class="line"><span class="comment">if(getmazepath(m,n)) printf("无解\n");</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;又是六百多行。&lt;/p&gt;
    
    </summary>
    
      <category term="c" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="数据结构" scheme="https://luxuantao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>二叉树多功能实现</title>
    <link href="https://luxuantao.github.io/2017/12/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://luxuantao.github.io/2017/12/08/二叉树多功能实现/</id>
    <published>2017-12-08T12:38:27.000Z</published>
    <updated>2018-02-28T13:40:14.025Z</updated>
    
    <content type="html"><![CDATA[<hr><p>二叉树的常用知识点。</p><a id="more"></a><p>数据结构课第二次补充作业，二叉树的各种功能实现，这次比上次更恶心。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 10</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">binaryTreeNode</span>// 二叉树数据结构</span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">char</span> data;<span class="comment">// 节点值</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binaryTreeNode</span> *<span class="title">lchild</span>;</span><span class="comment">// 左子节点</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binaryTreeNode</span> *<span class="title">rchild</span>;</span><span class="comment">// 右子节点</span></div><div class="line">&#125; BiTreeNode; <span class="comment">// 树的结构</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LRtagBiTree</span>// 左右标志表示树节点</span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">char</span> data;</div><div class="line"><span class="keyword">int</span> ltag;</div><div class="line"><span class="keyword">int</span> rtag;</div><div class="line">&#125; LRBTree;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_parent</span>//双亲数组</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="keyword">int</span> parent;</div><div class="line">&#125; NODE_PARENT;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>//<span class="title">m</span>次树的数据结构</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">child</span>[<span class="title">MAXM</span>];</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">parent</span>;</span></div><div class="line">&#125; LINK_NODE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">mixture</span>//二叉树转化为森林时要用到，作用是把二叉树的一个节点和它对应的<span class="title">m</span>次树上的节点捆绑起来</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">BiTreeNode *bnode;</div><div class="line">LINK_NODE *mnode;</div><div class="line">&#125; MIXTURE;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cue_node</span> //穿线树的数据结构</span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> data;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cue_node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></div><div class="line"><span class="keyword">int</span> ltag, rtag;</div><div class="line">&#125; CUE_NODE;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">13</span></div><div class="line"><span class="comment">0 A 0</span></div><div class="line"><span class="comment">0 B 0</span></div><div class="line"><span class="comment">1 C 1</span></div><div class="line"><span class="comment">0 D 0</span></div><div class="line"><span class="comment">1 E 1</span></div><div class="line"><span class="comment">1 F 0</span></div><div class="line"><span class="comment">1 G 1</span></div><div class="line"><span class="comment">0 H 1</span></div><div class="line"><span class="comment">0 I 0</span></div><div class="line"><span class="comment">0 J 0</span></div><div class="line"><span class="comment">1 K 1</span></div><div class="line"><span class="comment">1 L 1</span></div><div class="line"><span class="comment">1 M 1</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">char</span> preOrder[MAX];<span class="comment">//"ABDECGHI" 示例 1 的前序： “ABCDEFSGHIJKLMNO”</span></div><div class="line"><span class="keyword">char</span> inOrder[MAX];<span class="comment">//"DBEACHGI" 示例 1 的中序： “BCDASFHIJGEMNOLK”</span></div><div class="line"><span class="keyword">char</span> postOrder[MAX];<span class="comment">//"DEBHIGCA"</span></div><div class="line"></div><div class="line">LINK_NODE *addr_NODE[MAX];<span class="comment">//存放每个节点的地址,建m次树要用到</span></div><div class="line">LINK_NODE *m_root_addr[MAXM];<span class="comment">//存放每棵m次树的根节点</span></div><div class="line">BiTreeNode *b_root_addr[MAXM];<span class="comment">//存放每棵m次树转化为二叉树后的根节点</span></div><div class="line"></div><div class="line"><span class="comment">/*********************以下是m次树的操作*********************************/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add_Child</span><span class="params">(LINK_NODE *parent,LINK_NODE *child,<span class="keyword">int</span> m)</span> <span class="comment">//m次树中，parent下插入一个新的子结child</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> j=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (parent==<span class="literal">NULL</span> || child== <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (parent-&gt;child[++j]!=<span class="literal">NULL</span> &amp;&amp; j&lt;m); <span class="comment">//确定是第几个孩子</span></div><div class="line">    <span class="keyword">if</span> (j==m) <span class="comment">//满了返回-1</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        parent-&gt;child[j] = child;</div><div class="line">        child-&gt;parent = parent;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE *<span class="title">Node_initail</span><span class="params">(<span class="keyword">int</span> m)</span> <span class="comment">//m次树结点初始化，根据结点类型，完成结点的初始化操作</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    LINK_NODE *t = (LINK_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LINK_NODE));</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++) <span class="comment">//初始化</span></div><div class="line">    &#123;</div><div class="line">        t-&gt;child[i] = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    t-&gt;parent = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE *<span class="title">creat_tree_fromParent</span><span class="params">(NODE_PARENT inputTree[],<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> <span class="comment">//用双亲数组建m次树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    LINK_NODE *root,*p,*q;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    root = Node_initail(m); <span class="comment">//生成根节点</span></div><div class="line">    root-&gt;data = inputTree[<span class="number">0</span>].data; <span class="comment">//根节点赋值</span></div><div class="line">    addr_NODE[<span class="number">0</span>] = root;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;n; i++)</div><div class="line">    &#123;</div><div class="line">        q = Node_initail(m); <span class="comment">//生成新节点</span></div><div class="line">        addr_NODE[i] = q;</div><div class="line">        q-&gt;data = inputTree[i].data;</div><div class="line">        p = addr_NODE[inputTree[i].parent]; <span class="comment">//p为当前结点的父节点</span></div><div class="line">        <span class="keyword">if</span>(Add_Child(p,q,m) == <span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"子节点已满，无法插入!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">r_preorder</span><span class="params">(LINK_NODE *t, <span class="keyword">int</span> m)</span> <span class="comment">//递归前序遍历，t:根，m次数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++)</div><div class="line">        &#123;</div><div class="line">            r_preorder(t-&gt;child[i],m);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/********************以上是m次树的操作************************/</span></div><div class="line"></div><div class="line"><span class="comment">/*******************以下是二叉树的操作****************************/</span></div><div class="line"><span class="function">BiTreeNode * <span class="title">initial</span><span class="params">()</span><span class="comment">// 树节点初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BiTreeNode* node;</div><div class="line">node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTreeNode));</div><div class="line">node-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">node-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line"><span class="comment">//node-&gt;level = 0;</span></div><div class="line"><span class="comment">//node-&gt;parent = '\0';</span></div><div class="line">node-&gt;data = <span class="string">'\0'</span>;</div><div class="line"><span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BiTreeNode* <span class="title">BinaryTreeFromOrderings_Pre</span><span class="params">(<span class="keyword">char</span>* preorder, <span class="keyword">char</span>* inorder, <span class="keyword">int</span> length)</span><span class="comment">// 根据前序中序生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    BiTreeNode *p = initial();</div><div class="line">    p-&gt;data = *preorder;</div><div class="line">    <span class="keyword">for</span>(index=<span class="number">0</span>; index &lt; length; index++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(inorder[index] == *preorder) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    p-&gt;lchild = BinaryTreeFromOrderings_Pre(preorder+<span class="number">1</span>,inorder,index);<span class="comment">//递归调用</span></div><div class="line">    p-&gt;rchild = BinaryTreeFromOrderings_Pre(preorder+index+<span class="number">1</span>,inorder+index+<span class="number">1</span>,length-index<span class="number">-1</span>);<span class="comment">//递归调用</span></div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BiTreeNode* <span class="title">BinaryTreeFromOrderings_Post</span><span class="params">(<span class="keyword">char</span>* inorder, <span class="keyword">char</span>* postorder, <span class="keyword">int</span> length)</span><span class="comment">// 根据中序后序生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    BiTreeNode *p = initial();</div><div class="line">    p-&gt;data = *(postorder+length<span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(index=<span class="number">0</span>; index &lt; length; index++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(inorder[index] == *(postorder+length<span class="number">-1</span>)) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    p-&gt;lchild = BinaryTreeFromOrderings_Post(inorder,postorder,index);<span class="comment">//递归调用</span></div><div class="line">    p-&gt;rchild = BinaryTreeFromOrderings_Post(inorder+index+<span class="number">1</span>,postorder+index,length-index<span class="number">-1</span>);<span class="comment">//递归调用</span></div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BiTreeNode* <span class="title">BinaryTreeFromLRtag</span><span class="params">(LRBTree tree[],<span class="keyword">int</span> n)</span><span class="comment">//根据前序加附加两个标志位生成子树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BiTreeNode *<span class="built_in">stack</span>[MAX],*root,*p,*q;</div><div class="line"><span class="keyword">int</span> top,i;</div><div class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">root = initial();</div><div class="line">p = root;</div><div class="line">top = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)</div><div class="line">&#123;</div><div class="line">p-&gt;data = tree[i].data;</div><div class="line"><span class="keyword">if</span>(tree[i].rtag == <span class="number">0</span>)<span class="comment">//有右节点</span></div><div class="line"><span class="built_in">stack</span>[top++] = p;</div><div class="line"><span class="keyword">else</span></div><div class="line">p-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">q = initial();</div><div class="line"><span class="keyword">if</span>(tree[i].ltag == <span class="number">0</span>)<span class="comment">//有左节点</span></div><div class="line">p-&gt;lchild = q;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">p-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">p = <span class="built_in">stack</span>[--top];</div><div class="line">p-&gt;rchild = q;</div><div class="line">&#125;</div><div class="line">p = q;</div><div class="line">&#125;</div><div class="line">p-&gt;data = tree[n<span class="number">-1</span>].data;</div><div class="line">p-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">p-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preprint</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//递归前序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">        preprint(t-&gt;lchild);</div><div class="line">    preprint(t-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inprint</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//递归中序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        inprint(t-&gt;lchild);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">    inprint(t-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postprint</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//递归后序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        postprint(t-&gt;lchild);</div><div class="line">    postprint(t-&gt;rchild);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preprint_without_recursion</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//非递归前序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    BiTreeNode *<span class="built_in">stack</span>[<span class="number">100</span>]; <span class="comment">//定义栈</span></div><div class="line">    <span class="keyword">int</span> top;</div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">stack</span>[<span class="number">0</span>] = t; <span class="comment">//根节点入栈</span></div><div class="line">    top =<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(top &gt; <span class="number">0</span>) <span class="comment">//当栈不为空</span></div><div class="line">    &#123;</div><div class="line">        t = <span class="built_in">stack</span>[--top]; <span class="comment">//栈顶结点出栈</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">        <span class="keyword">if</span>(t-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">            <span class="built_in">stack</span>[top++] = t-&gt;rchild;</div><div class="line">        <span class="keyword">if</span>(t-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">            <span class="built_in">stack</span>[top++] = t-&gt;lchild;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inprint_without_recursion</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//非递归中序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    BiTreeNode *<span class="built_in">stack</span>[<span class="number">100</span>]; <span class="comment">//定义栈</span></div><div class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">while</span>(top &gt; <span class="number">0</span> || t) <span class="comment">//当栈不为空</span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">while</span>(t)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">stack</span>[top++] = t;</div><div class="line">    t = t-&gt;lchild;</div><div class="line">    &#125;</div><div class="line">        t = <span class="built_in">stack</span>[--top]; <span class="comment">//栈顶结点出栈</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">        t = t-&gt;rchild;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inprint_without_recursion_tostring</span><span class="params">(BiTreeNode *t,<span class="keyword">char</span> *s)</span> <span class="comment">//非递归中序遍历,输出到一个数组中，返回数组大小</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    BiTreeNode *<span class="built_in">stack</span>[<span class="number">100</span>]; <span class="comment">//定义栈</span></div><div class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(top &gt; <span class="number">0</span> || t) <span class="comment">//当栈不为空</span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">while</span>(t)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">stack</span>[top++] = t;</div><div class="line">    t = t-&gt;lchild;</div><div class="line">    &#125;</div><div class="line">        t = <span class="built_in">stack</span>[--top]; <span class="comment">//栈顶结点出栈</span></div><div class="line">        s[i++] = t-&gt;data;</div><div class="line">        t = t-&gt;rchild;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postprint_without_recursion</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//非递归后序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;<span class="comment">//top可以同步操作两个栈</span></div><div class="line">    <span class="keyword">int</span> stack_tag[MAX];</div><div class="line">    BiTreeNode *stack_node[MAX];</div><div class="line">    <span class="comment">//先把根结点放进栈</span></div><div class="line">    BiTreeNode *p = t;</div><div class="line">    stack_node[top] = t;</div><div class="line">    stack_tag[top] = <span class="number">0</span>;</div><div class="line">    top++;</div><div class="line">    <span class="keyword">while</span>(top&gt;<span class="number">0</span>)<span class="comment">//只要栈里还有东西就继续</span></div><div class="line">    &#123;</div><div class="line">        top--;<span class="comment">//top指向的是最上面一个元素的上一个位置，所以先减一</span></div><div class="line">        <span class="keyword">if</span>(stack_tag[top] == <span class="number">0</span>)<span class="comment">//当前结点的子节点还没放进来</span></div><div class="line">        &#123;</div><div class="line">            p = stack_node[top];</div><div class="line">            stack_tag[top] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(p-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                stack_node[++top] = p-&gt;rchild;</div><div class="line">                stack_tag[top] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(p-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                stack_node[++top] = p-&gt;lchild;</div><div class="line">                stack_tag[top] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            top++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span><span class="comment">//当前结点的子节点都放进来了</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,stack_node[top]-&gt;data);<span class="comment">//输出当前结点</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hierachicalorder_without_recursion</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//非递归层序遍历</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    BiTreeNode *q[MAX],*p; <span class="comment">//用队列实现</span></div><div class="line">    <span class="keyword">int</span> head,tail;</div><div class="line">    q[<span class="number">0</span>] = t;</div><div class="line">    head = <span class="number">0</span>;</div><div class="line">    tail = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(head &lt; tail)</div><div class="line">    &#123;</div><div class="line">        p = q[head++];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data);</div><div class="line">        <span class="keyword">if</span>(p-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            q[tail++] = p-&gt;lchild;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(p-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            q[tail++] = p-&gt;rchild;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(BiTreeNode *t)</span><span class="comment">//获取高度</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> max=<span class="number">-1</span>,temp; <span class="comment">//tag用来标记该节点有没有子节点</span></div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//为空，高度为-1</span></div><div class="line">    <span class="keyword">if</span>(t-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; t-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    temp = height(t-&gt;lchild);</div><div class="line">    max = temp &gt; max ? temp : max; <span class="comment">//max是子树中的最大高度</span></div><div class="line">    temp = height(t-&gt;rchild);</div><div class="line">    max = temp &gt; max ? temp : max; <span class="comment">//max是子树中的最大高度</span></div><div class="line">    <span class="keyword">return</span> max+<span class="number">1</span>; <span class="comment">//子树的最大高度再加一就是目前的最大高度</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_nodes</span><span class="params">(BiTreeNode *t)</span> <span class="comment">//获取结点个数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        sum++;</div><div class="line">        sum += count_nodes(t-&gt;lchild); <span class="comment">//递归调用</span></div><div class="line">        sum += count_nodes(t-&gt;rchild); <span class="comment">//递归调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_full</span><span class="params">(BiTreeNode *t)</span> <span class="comment">// 判断是否为满树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i,temp=<span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> sum = count_nodes(t);</div><div class="line"><span class="keyword">int</span> depth = height(t) + <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=depth;i++)</div><div class="line">&#123;</div><div class="line">temp *= <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(sum == temp<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_complete</span><span class="params">(BiTreeNode *t)</span> <span class="comment">// 判断是否为完全二叉树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BiTreeNode *<span class="built_in">queue</span>[MAX];</div><div class="line">BiTreeNode *temp = t;</div><div class="line"><span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>;</div><div class="line"><span class="built_in">queue</span>[tail++] = t;</div><div class="line"><span class="keyword">while</span>(head != tail)</div><div class="line">&#123;</div><div class="line">temp = <span class="built_in">queue</span>[head++];</div><div class="line"><span class="keyword">if</span>(temp == <span class="literal">NULL</span>) <span class="keyword">break</span>;</div><div class="line"><span class="built_in">queue</span>[tail++] = temp-&gt;lchild;</div><div class="line"><span class="built_in">queue</span>[tail++] = temp-&gt;rchild;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(head != tail)</div><div class="line">&#123;</div><div class="line">temp = <span class="built_in">queue</span>[head++];</div><div class="line"><span class="keyword">if</span>(temp != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//没把所有节点读完就读到了空指针，说明不是完全二叉树</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BiTreeNode *<span class="title">convert2bitree</span><span class="params">(LINK_NODE *root,<span class="keyword">int</span> m)</span><span class="comment">//把一棵m次树转化为二叉树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">BiTreeNode *binaryRoot = initial();</div><div class="line">binaryRoot-&gt;data = root-&gt;data;</div><div class="line">binaryRoot-&gt;lchild = convert2bitree(root-&gt;child[<span class="number">0</span>],m);<span class="comment">//递归调用</span></div><div class="line">BiTreeNode *brother = binaryRoot-&gt;lchild;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;m &amp;&amp; root-&gt;child[i]!=<span class="literal">NULL</span>; i++)</div><div class="line">&#123;</div><div class="line">brother-&gt;rchild = convert2bitree(root-&gt;child[i],m);<span class="comment">//递归调用</span></div><div class="line">brother = brother-&gt;rchild;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> binaryRoot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE* <span class="title">convert2forest</span><span class="params">(BiTreeNode *r,<span class="keyword">int</span> m)</span><span class="comment">//二叉树转化为森林</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>;</div><div class="line">MIXTURE <span class="built_in">queue</span>[MAX],father;</div><div class="line"><span class="built_in">queue</span>[tail].mnode = Node_initail(m);</div><div class="line"><span class="built_in">queue</span>[tail].mnode-&gt;data = r-&gt;data;</div><div class="line"><span class="built_in">queue</span>[tail++].bnode = r;</div><div class="line">LINK_NODE *child, *root = <span class="built_in">queue</span>[<span class="number">0</span>].mnode;</div><div class="line">BiTreeNode *temp;</div><div class="line"><span class="keyword">while</span>(head != tail)</div><div class="line">&#123;</div><div class="line">father = <span class="built_in">queue</span>[head++];</div><div class="line">temp = father.bnode;</div><div class="line"><span class="keyword">if</span>(temp-&gt;lchild != <span class="literal">NULL</span>)<span class="comment">//先看有没有左节点</span></div><div class="line">&#123;</div><div class="line">child = Node_initail(m);</div><div class="line">child-&gt;data = temp-&gt;lchild-&gt;data;</div><div class="line">Add_Child(father.mnode,child,m);</div><div class="line"><span class="built_in">queue</span>[tail].mnode = child;</div><div class="line"><span class="built_in">queue</span>[tail++].bnode = temp-&gt;lchild;</div><div class="line">temp = temp-&gt;lchild;</div><div class="line"><span class="keyword">while</span>(temp-&gt;rchild != <span class="literal">NULL</span>)<span class="comment">//把当前结点所有的孩子全部接进来</span></div><div class="line">&#123;</div><div class="line">child = Node_initail(m);</div><div class="line">child-&gt;data = temp-&gt;rchild-&gt;data;</div><div class="line">Add_Child(father.mnode,child,m);</div><div class="line"><span class="built_in">queue</span>[tail].mnode = child;</div><div class="line"><span class="built_in">queue</span>[tail++].bnode = temp-&gt;rchild;</div><div class="line">temp = temp-&gt;rchild;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/***********************以上是二叉树的操作****************************/</span></div><div class="line"></div><div class="line"><span class="comment">/***********************以下是穿线树的操作****************************/</span></div><div class="line"></div><div class="line"><span class="function">CUE_NODE* <span class="title">pred</span><span class="params">(CUE_NODE *t)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(t-&gt;ltag == <span class="number">1</span> || t-&gt;lchild == <span class="literal">NULL</span>) <span class="keyword">return</span> t-&gt;lchild;<span class="comment">//若t所指节点没有左孩子,返回其直接前驱</span></div><div class="line">t = t-&gt;lchild;<span class="comment">//t指向其左子节点</span></div><div class="line"><span class="keyword">while</span>(t-&gt;rtag == <span class="number">0</span>) t = t-&gt;rchild;<span class="comment">//在左子树中找最右的节点</span></div><div class="line"><span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">CUE_NODE* <span class="title">succ</span><span class="params">(CUE_NODE *t)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(t-&gt;rtag == <span class="number">1</span> || t-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> t-&gt;rchild;<span class="comment">//若t所指节点没有右孩子,返回其直接后继</span></div><div class="line">t = t-&gt;rchild;<span class="comment">//t指向其右子节点</span></div><div class="line"><span class="keyword">while</span>(t-&gt;ltag == <span class="number">0</span>) t = t-&gt;lchild;<span class="comment">//在右子树中找最左的节点</span></div><div class="line"><span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">midorder</span><span class="params">(CUE_NODE *head)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">while</span>(head != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,head-&gt;data);</div><div class="line">head = succ(head);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">left_insert</span><span class="params">(CUE_NODE *p,CUE_NODE *q,CUE_NODE **p_head)</span><span class="comment">//把q所指的节点插在p所指的节点的按中序的前面</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CUE_NODE *r;</div><div class="line"><span class="keyword">if</span>(p-&gt;ltag == <span class="number">1</span> || p-&gt;lchild == <span class="literal">NULL</span>)<span class="comment">//若p没有左孩子</span></div><div class="line">&#123;</div><div class="line">q-&gt;lchild = p-&gt;lchild;<span class="comment">//将p所指节点插入</span></div><div class="line">q-&gt;ltag = p-&gt;ltag;</div><div class="line">q-&gt;rchild = p;<span class="comment">//令q所指节点的右指针指向p所指节点</span></div><div class="line">q-&gt;rtag = <span class="number">1</span>;</div><div class="line">p-&gt;lchild = q;<span class="comment">//p所指节点的左指针指向q</span></div><div class="line">p-&gt;ltag = <span class="number">0</span>;<span class="comment">//修改ltag，p所指节点的左指针已指向其左孩子</span></div><div class="line"><span class="keyword">if</span>(q-&gt;lchild == <span class="literal">NULL</span>) *p_head = q;<span class="comment">//若p所指节点的左指针为空，修改中序首节点地址</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">r = pred(p);<span class="comment">//找到p所指节点按中序的前驱结点</span></div><div class="line">q-&gt;rchild = r-&gt;rchild;<span class="comment">//将q所指节点插入</span></div><div class="line">q-&gt;rtag = r-&gt;rtag;</div><div class="line">q-&gt;lchild = r;<span class="comment">//令q所指节点的左指针指向r所指节点</span></div><div class="line">q-&gt;ltag = <span class="number">1</span>;</div><div class="line">r-&gt;rchild = q;<span class="comment">//r所指节点的右指针指向q</span></div><div class="line">r-&gt;rtag = <span class="number">0</span>;<span class="comment">//修改rtag</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">right_insert</span><span class="params">(CUE_NODE *p,CUE_NODE *q)</span><span class="comment">//把q所指的节点插在p所指的节点的按中序的后面</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CUE_NODE *r;</div><div class="line"><span class="keyword">if</span>(p-&gt;rtag == <span class="number">1</span> || p-&gt;rchild == <span class="literal">NULL</span>)<span class="comment">//若p没有右孩子</span></div><div class="line">&#123;</div><div class="line">q-&gt;rchild = p-&gt;rchild;<span class="comment">//将p所指节点插入</span></div><div class="line">q-&gt;rtag = p-&gt;rtag;</div><div class="line">q-&gt;lchild = p;<span class="comment">//令q所指节点的左指针指向p所指节点</span></div><div class="line">q-&gt;ltag = <span class="number">1</span>;</div><div class="line">p-&gt;rchild = q;<span class="comment">//p所指节点的右指针指向q</span></div><div class="line">p-&gt;rtag = <span class="number">0</span>;<span class="comment">//修改rtag</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">r = succ(p);<span class="comment">//找到p所指节点按中序的后继结点</span></div><div class="line">q-&gt;lchild = r-&gt;lchild;<span class="comment">//将q所指节点插入</span></div><div class="line">q-&gt;ltag = r-&gt;ltag;</div><div class="line">q-&gt;rchild = r;<span class="comment">//令p所指节点的左指针指向r所指节点</span></div><div class="line">q-&gt;rtag = <span class="number">1</span>;</div><div class="line">r-&gt;lchild = q;<span class="comment">//r所指节点的右指针指向q</span></div><div class="line">r-&gt;ltag = <span class="number">0</span>;<span class="comment">//修改rtag</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">CUE_NODE* <span class="title">thread_sort_tree</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CUE_NODE *root, *head, *p, *r;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">root = (CUE_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CUE_NODE));</div><div class="line">root-&gt;data = a[<span class="number">0</span>];</div><div class="line">root-&gt;lchild = <span class="literal">NULL</span>;</div><div class="line">root-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">root-&gt;ltag = <span class="number">0</span>;</div><div class="line">root-&gt;rtag = <span class="number">0</span>;</div><div class="line">head = root;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">&#123;</div><div class="line">r = (CUE_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CUE_NODE));</div><div class="line">r-&gt;data = a[i];</div><div class="line">p = root;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(r-&gt;data &lt;= p-&gt;data)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(p-&gt;ltag == <span class="number">0</span> &amp;&amp; p-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">p = p-&gt;lchild;</div><div class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(p-&gt;rtag == <span class="number">0</span> &amp;&amp; p-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">p = p-&gt;rchild;</div><div class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(r-&gt;data &lt; p-&gt;data)</div><div class="line">&#123;</div><div class="line">r-&gt;lchild = p-&gt;lchild;</div><div class="line">r-&gt;ltag = p-&gt;ltag;</div><div class="line">r-&gt;rchild = p;</div><div class="line">r-&gt;rtag = <span class="number">1</span>;</div><div class="line">p-&gt;lchild = r;</div><div class="line">p-&gt;ltag = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(r-&gt;lchild == <span class="literal">NULL</span>) head = r;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(r-&gt;data &gt; p-&gt;data)</div><div class="line">&#123;</div><div class="line">r-&gt;rchild = p-&gt;rchild;</div><div class="line">r-&gt;rtag = p-&gt;rtag;</div><div class="line">r-&gt;lchild = p;</div><div class="line">r-&gt;ltag = <span class="number">1</span>;</div><div class="line">p-&gt;rchild = r;</div><div class="line">p-&gt;rtag = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> head;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CUE_NODE *head;</div><div class="line">head = thread_sort_tree(a,n);<span class="comment">//建立穿线排序树</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"穿线树的中序输出为：\n"</span>);</div><div class="line">midorder(head);<span class="comment">//按中序输出全部节点</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*****************************以上是穿线树的操作***************************/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isascending</span><span class="params">(<span class="keyword">char</span> a[],<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BiTreeNode *root;</div><div class="line"></div><div class="line"><span class="comment">//前序加附加两个标志位</span></div><div class="line"><span class="comment">// int n,i; //节点个数</span></div><div class="line"><span class="comment">// LRBTree lrbarray[MAX];</span></div><div class="line"><span class="comment">// scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">// for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// scanf("%d %c %d",&amp;lrbarray[i].ltag,&amp;lrbarray[i].data,&amp;lrbarray[i].rtag);</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// root = BinaryTreeFromLRtag(lrbarray,n);</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//前序加中序</span></div><div class="line"><span class="comment">// scanf("%s%s",preOrder,inOrder);</span></div><div class="line"><span class="comment">// root = BinaryTreeFromOrderings_Pre(preOrder,inOrder,strlen(preOrder));</span></div><div class="line"></div><div class="line"><span class="comment">//中序加后序</span></div><div class="line"><span class="comment">// scanf("%s%s",inOrder,postOrder);</span></div><div class="line"><span class="comment">// root = BinaryTreeFromOrderings_Post(inOrder,postOrder,strlen(inOrder));</span></div><div class="line"></div><div class="line"><span class="comment">//建立m次树以及m次树转化为二叉树</span></div><div class="line"><span class="keyword">int</span> mtree_num,node_num,m,i,j;</div><div class="line">NODE_PARENT inputTree[MAX]; <span class="comment">//双亲输入需要用到的数组</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"请输入你想建多少棵m次树以及m的大小\n"</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;mtree_num,&amp;m);<span class="comment">//mtree_num表示有几棵m次树</span></div><div class="line">getchar();</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mtree_num;i++)<span class="comment">//建mtree_num棵m次树</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请问这棵m次树有多少个节点？\n"</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;node_num);<span class="comment">//当前的m次树有node_num个节点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"请输入这棵m次树每个节点的数据以及它的父亲是谁\n"</span>);</div><div class="line">getchar();</div><div class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;node_num; j++)</div><div class="line">   &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%c %d"</span>,&amp;inputTree[j].data,&amp;inputTree[j].parent);</div><div class="line">        getchar();</div><div class="line">    &#125;</div><div class="line">    m_root_addr[i] = creat_tree_fromParent(inputTree,m,node_num);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mtree_num;i++)<span class="comment">//依次将mtree_num棵m次树分别转化为二叉树</span></div><div class="line">&#123;</div><div class="line">b_root_addr[i] = convert2bitree(m_root_addr[i],m);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mtree_num<span class="number">-1</span>;i++)<span class="comment">//将mtree_num棵m次树连成一棵二叉树</span></div><div class="line">&#123;</div><div class="line">b_root_addr[i]-&gt;rchild = b_root_addr[i+<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">root = b_root_addr[<span class="number">0</span>];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//二叉树转化为森林</span></div><div class="line"><span class="comment">// int num = 0, j;</span></div><div class="line"><span class="comment">// b_root_addr[num++] = root;</span></div><div class="line"><span class="comment">// BiTreeNode *p = root, *q = NULL;</span></div><div class="line"><span class="comment">// while(p-&gt;rchild != NULL)//可以分解成num棵m次树</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// b_root_addr[num++] = p-&gt;rchild;</span></div><div class="line"><span class="comment">// q = p;</span></div><div class="line"><span class="comment">// p = p-&gt;rchild;</span></div><div class="line"><span class="comment">// q-&gt;rchild = NULL;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// printf("每棵树的前序遍历依次为:\n");</span></div><div class="line"><span class="comment">// for(j=0;j&lt;num;j++)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// m_root_addr[j] = convert2forest(b_root_addr[j],10);//这里我把m设为10</span></div><div class="line"><span class="comment">// r_preorder(m_root_addr[j],10);</span></div><div class="line"><span class="comment">// printf("\n");</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"><span class="comment">//递归前序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"递归前序遍历为:"</span>);</div><div class="line">    preprint(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//递归中序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"递归中序遍历为:"</span>);</div><div class="line">    inprint(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//递归后序遍历</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"递归后序遍历为:"</span>);</div><div class="line">    postprint(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line"><span class="comment">//非递归前序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"非递归前序遍历为:"</span>);</div><div class="line">preprint_without_recursion(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line"><span class="comment">//非递归中序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"非递归中序遍历为:"</span>);</div><div class="line">inprint_without_recursion(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line"><span class="comment">//非递归后序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"非递归后序遍历为:"</span>);</div><div class="line">postprint_without_recursion(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line"><span class="comment">//非递归层序遍历</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"非递归层序遍历为:"</span>);</div><div class="line">hierachicalorder_without_recursion(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//获取高度</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"高度为:%d\n"</span>,height(root));</div><div class="line"></div><div class="line">    <span class="comment">//获取节点个数</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"节点个数为:%d\n"</span>,count_nodes(root));</div><div class="line"></div><div class="line">    <span class="comment">//判断是否是满树</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"是否是满树:"</span>);</div><div class="line">    <span class="keyword">if</span>(judge_full(root)) <span class="built_in">printf</span>(<span class="string">"是\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"否\n"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//判断是否是完全二叉树</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"是否是完全二叉树:"</span>);</div><div class="line">    <span class="keyword">if</span>(judge_complete(root)) <span class="built_in">printf</span>(<span class="string">"是\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"否\n"</span>);</div><div class="line"></div><div class="line"><span class="comment">//穿线排序</span></div><div class="line"><span class="comment">// int n,a[MAX],i;</span></div><div class="line"><span class="comment">// printf("请输入你要排序的数字个数:\n");</span></div><div class="line"><span class="comment">// scanf("%d",&amp;n);</span></div><div class="line"><span class="comment">// printf("请输入%d个数字\n",n);</span></div><div class="line"><span class="comment">// for(i=0;i&lt;n;i++)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// scanf("%d",&amp;a[i]);</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// thread_sort(a,n);</span></div><div class="line"></div><div class="line">    <span class="comment">//判断是否左子树上的结点的值都小于根，右子树上的结点的值都大于根</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"是否左子树上的结点的值都小于根，右子树上的结点的值都大于根:"</span>);</div><div class="line">    <span class="keyword">char</span> s[MAX];</div><div class="line">    <span class="keyword">int</span> n = inprint_without_recursion_tostring(root,s);</div><div class="line">    <span class="keyword">if</span>(isascending(s,n)) <span class="built_in">printf</span>(<span class="string">"是\n"</span>);<span class="comment">//只要看中序遍历是不是升序就行</span></div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"不是\n"</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再这样下去身体都要被掏空了。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;二叉树的常用知识点。&lt;/p&gt;
    
    </summary>
    
      <category term="c" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="数据结构" scheme="https://luxuantao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>新手法则</title>
    <link href="https://luxuantao.github.io/2017/12/01/%E6%96%B0%E6%89%8B%E6%B3%95%E5%88%99/"/>
    <id>https://luxuantao.github.io/2017/12/01/新手法则/</id>
    <published>2017-12-01T13:42:23.000Z</published>
    <updated>2017-12-01T14:05:06.218Z</updated>
    
    <content type="html"><![CDATA[<hr><p>这两周总结出一样东西：“新手法则“。</p><a id="more"></a><p>这不是一个已有的法则，而是我自己想出来的。什么意思呢？</p><p>是这样：在一个充满竞争的环境中，里面的每一个人都会学着去拉拢人脉。而当一位智商和情商都很高的陌生人到访时，几乎所有的人都愿意去试着认识他。原因很简单：1.这个人的智商和情商都很高，将来定有可用之处。 2.这个人在这个领域还什么都不懂，对自己没有威胁。渐渐的，所有的人都把自己的所学所想分享给他，想和他打好关系。可他们没有想到，他们正在培养着一个可怕的”怪物“，一个什么都了解的”怪物“，一个将来可能超过他们所有人的”怪物“。</p><p>题外话：</p><p>1.每一个人总有需要他人帮助的时候，我也是经过大家的帮助才一步步走到现在，滴水之恩当涌泉相报，我绝不做过河拆桥之人，但当别人这样对我时。我会告诉他：“你比我强可以，但你别惹我，否则我会尽全力超过你。”</p><p>2.金牛座好人多。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;这两周总结出一样东西：“新手法则“。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>m次树多功能实现</title>
    <link href="https://luxuantao.github.io/2017/12/01/m%E6%AC%A1%E6%A0%91%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://luxuantao.github.io/2017/12/01/m次树多功能实现/</id>
    <published>2017-12-01T13:33:46.000Z</published>
    <updated>2018-02-28T13:39:30.046Z</updated>
    
    <content type="html"><![CDATA[<hr><p>累到不想说话。</p><a id="more"></a><p>数据结构课第一次补充作业，m次树的很多很多很多功能都要实现，写了一个下午加一个晚上。纯C代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 树的次树：最大MAXM次，最多MAXN个结点</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 10</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_parent</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="keyword">int</span> parent;</div><div class="line">&#125; NODE_PARENT;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_lev</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="keyword">int</span> lev;</div><div class="line">&#125; NODE_LEV;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> data;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">child</span>[<span class="title">MAXM</span>];</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">parent</span>;</span></div><div class="line">    <span class="keyword">int</span> lev;</div><div class="line">    <span class="comment">//根据应用的需要添加字段，例如可以添加结点的层次，子结点的个数等。</span></div><div class="line">&#125; LINK_NODE;</div><div class="line"></div><div class="line">LINK_NODE *addr_NODE[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add_Child</span><span class="params">(LINK_NODE *parent,LINK_NODE *child,<span class="keyword">int</span> m)</span> <span class="comment">//m次树中，parent下插入一个新的子结child</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> j=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (parent==<span class="literal">NULL</span> || child== <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (parent-&gt;child[++j]!=<span class="literal">NULL</span> &amp;&amp; j&lt;m); <span class="comment">//确定是第几个孩子</span></div><div class="line">    <span class="keyword">if</span> (j==m) <span class="comment">//满了返回-1</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        parent-&gt;child[j] = child;</div><div class="line">        child-&gt;parent = parent;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE *<span class="title">Node_initail</span><span class="params">(<span class="keyword">int</span> m)</span> <span class="comment">//m次树结点初始化，根据结点类型，完成结点的初始化操作</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    LINK_NODE *t = (LINK_NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LINK_NODE));</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++) <span class="comment">//初始化</span></div><div class="line">    &#123;</div><div class="line">        t-&gt;child[i] = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    t-&gt;lev = <span class="number">0</span>;</div><div class="line">    t-&gt;parent = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE *<span class="title">creat_tree_fromParent1</span><span class="params">(NODE_PARENT inputTree[],<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> <span class="comment">//用一个数组addr_NODE来记录每个结点的指针</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,j=<span class="number">0</span>,last=<span class="number">-1</span>; <span class="comment">//i为节点下标，j为孩子下标，last为上一个节点的父节点下标</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) <span class="comment">//创建所有节点</span></div><div class="line">    &#123;</div><div class="line">        addr_NODE[i] = Node_initail(m);</div><div class="line">        addr_NODE[i]-&gt;data = inputTree[i].data; <span class="comment">//顺序存入值</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(last != inputTree[i].parent) j=<span class="number">0</span>; <span class="comment">//如果当前节点和上一个节点的父节点不相同，孩子下标置为0</span></div><div class="line">        <span class="keyword">else</span> j++; <span class="comment">//若相同孩子下标+1</span></div><div class="line">        addr_NODE[inputTree[i].parent]-&gt;child[j] = addr_NODE[i]; <span class="comment">//建立父子关系</span></div><div class="line">        last = inputTree[i].parent; <span class="comment">//更新last</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> addr_NODE[<span class="number">0</span>]; <span class="comment">//返回根节点</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE *<span class="title">creat_tree_fromParent</span><span class="params">(NODE_PARENT inputTree[],<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> <span class="comment">//用一个数组addr_NODE来记录每个结点的指针</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    LINK_NODE *root,*p,*q;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    root = Node_initail(m); <span class="comment">//生成根节点</span></div><div class="line">    root-&gt;data = inputTree[<span class="number">0</span>].data; <span class="comment">//根节点赋值</span></div><div class="line">    addr_NODE[<span class="number">0</span>] = root;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;n; i++)</div><div class="line">    &#123;</div><div class="line">        q = Node_initail(m); <span class="comment">//生成新节点</span></div><div class="line">        addr_NODE[i] = q;</div><div class="line">        q-&gt;data = inputTree[i].data;</div><div class="line">        p = addr_NODE[inputTree[i].parent]; <span class="comment">//p为当前结点的父节点</span></div><div class="line">        <span class="keyword">if</span>(Add_Child(p,q,m) == <span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"子节点已满，无法插入!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE *<span class="title">creat_tree_fromlev</span><span class="params">(NODE_LEV inputTree2[],<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> <span class="comment">//层号建树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    LINK_NODE *root,*p,*q;</div><div class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    root = Node_initail(m);<span class="comment">//申请根节点</span></div><div class="line">    root-&gt;lev = inputTree2[<span class="number">0</span>].lev;</div><div class="line">    root-&gt;data = inputTree2[<span class="number">0</span>].data;</div><div class="line"></div><div class="line">    p = root;<span class="comment">//p为上一个操作的节点</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        q = Node_initail(m);<span class="comment">//q为当前的工作指针</span></div><div class="line">        q-&gt;lev = inputTree2[i].lev;</div><div class="line">        q-&gt;data = inputTree2[i].data;</div><div class="line">        <span class="keyword">while</span>(q-&gt;lev &lt;= p-&gt;lev)<span class="comment">//找到当前节点应该是哪个节点的子节点</span></div><div class="line">        &#123;</div><div class="line">            p = p-&gt;parent;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(Add_Child(p,q,m) == <span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"子节点已满，无法插入!"</span>);</div><div class="line">        &#125;</div><div class="line">        p=q;<span class="comment">//当前结点作为下一次操作的上一个节点</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LINK_NODE *<span class="title">creat_tree_fromkh</span><span class="params">(<span class="keyword">char</span> inputTree3[],<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> <span class="comment">//括号建树</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    LINK_NODE *<span class="built_in">stack</span>[MAXN],*p=<span class="literal">NULL</span>,*q;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    <span class="keyword">int</span> k=<span class="number">0</span>,top=<span class="number">0</span>;</div><div class="line">    ch=inputTree3[<span class="number">0</span>];</div><div class="line">    <span class="keyword">while</span>(ch != <span class="string">'\0'</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(ch))</div><div class="line">        &#123;</div><div class="line">            p=Node_initail(m);</div><div class="line">            p-&gt;data = ch;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">switch</span>(ch)</div><div class="line">            &#123;</div><div class="line">                case'(':stack[top++] = p; //父节点入栈</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                case',':q = stack[top-1];</div><div class="line">                        <span class="keyword">if</span>(Add_Child(q,p,m) == <span class="number">-1</span>) <span class="comment">//建立父子关系</span></div><div class="line">                        &#123;</div><div class="line">                            <span class="built_in">printf</span>(<span class="string">"子节点已满，无法插入!"</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                case')':q = stack[--top]; //父节点出栈</div><div class="line">                        <span class="keyword">if</span>(Add_Child(q,p,m) == <span class="number">-1</span>) <span class="comment">//建立父子关系</span></div><div class="line">                        &#123;</div><div class="line">                            <span class="built_in">printf</span>(<span class="string">"子节点已满，无法插入!"</span>);</div><div class="line">                        &#125;</div><div class="line">                        p=q;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ch = inputTree3[++k]; <span class="comment">//取下一个字符</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//分别 加入 前序，后序，层次遍历的函数， 前序和后续分别有递归实现和非递归实现</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">r_preorder</span><span class="params">(LINK_NODE *t, <span class="keyword">int</span> m)</span> <span class="comment">//递归前序遍历，t:根，m次数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++)</div><div class="line">        &#123;</div><div class="line">            r_preorder(t-&gt;child[i],m);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">r_postorder</span><span class="params">(LINK_NODE *t, <span class="keyword">int</span> m)</span> <span class="comment">//递归后序遍历，t:根，m次数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++)</div><div class="line">        &#123;</div><div class="line">            r_postorder(t-&gt;child[i],m);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hierachicalorder</span><span class="params">(LINK_NODE *t, <span class="keyword">int</span> m)</span> <span class="comment">//非递归层序遍历，t:根，m次数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    LINK_NODE *q[MAXN],*p; <span class="comment">//用队列实现</span></div><div class="line">    <span class="keyword">int</span> head,tail,i;</div><div class="line">    q[<span class="number">0</span>] = t;</div><div class="line">    head = <span class="number">0</span>;</div><div class="line">    tail = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(head &lt; tail)</div><div class="line">    &#123;</div><div class="line">        p = q[head++];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(p-&gt;child[i] != <span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                q[tail++] = p-&gt;child[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder_without_recursion</span><span class="params">(LINK_NODE *t, <span class="keyword">int</span> m)</span> <span class="comment">//非递归前序遍历，t:根，m次数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    LINK_NODE *s[<span class="number">100</span>]; <span class="comment">//定义栈</span></div><div class="line">    <span class="keyword">int</span> top,i;</div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    s[<span class="number">0</span>] = t; <span class="comment">//根节点入栈</span></div><div class="line">    top =<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(top &gt; <span class="number">0</span>) <span class="comment">//当栈不为空</span></div><div class="line">    &#123;</div><div class="line">        t = s[--top]; <span class="comment">//栈顶结点出栈</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t-&gt;data);</div><div class="line">        <span class="keyword">for</span>(i=m<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) <span class="comment">//从右向左将子节点入栈</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(t-&gt;child[i] != <span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                s[top++] = t-&gt;child[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder_without_recursion</span><span class="params">(LINK_NODE *t, <span class="keyword">int</span> m)</span> <span class="comment">//非递归后序遍历，t:根，m次数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,top=<span class="number">0</span>;<span class="comment">//top可以同步操作两个栈</span></div><div class="line">    <span class="keyword">int</span> stack_tag[MAXN];</div><div class="line">    LINK_NODE *stack_node[MAXN];</div><div class="line">    <span class="comment">//先把根结点放进栈</span></div><div class="line">    LINK_NODE *p = t;</div><div class="line">    stack_node[top] = t;</div><div class="line">    stack_tag[top] = <span class="number">0</span>;</div><div class="line">    top++;</div><div class="line">    <span class="keyword">while</span>(top&gt;<span class="number">0</span>)<span class="comment">//只要栈里还有东西就继续</span></div><div class="line">    &#123;</div><div class="line">        top--;<span class="comment">//top指向的是最上面一个元素的上一个位置，所以先减一</span></div><div class="line">        <span class="keyword">if</span>(stack_tag[top] == <span class="number">0</span>)<span class="comment">//当前结点的子节点还没放进来</span></div><div class="line">        &#123;</div><div class="line">            p = stack_node[top];</div><div class="line">            stack_tag[top] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(i=m<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(p-&gt;child[i] != <span class="literal">NULL</span>)</div><div class="line">                &#123;</div><div class="line">                    stack_node[++top] = p-&gt;child[i];</div><div class="line">                    stack_tag[top] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            top++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span><span class="comment">//当前结点的子节点都放进来了</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,stack_node[top]-&gt;data);<span class="comment">//输出当前结点</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">parent_input</span><span class="params">(NODE_PARENT inputTree[],<span class="keyword">int</span> n)</span> <span class="comment">//将输入数据读入到双亲表示法的inputTree数组</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%c %d"</span>,&amp;inputTree[i].data,&amp;inputTree[i].parent);</div><div class="line">        getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">lev_input</span><span class="params">(NODE_LEV inputTree2[],<span class="keyword">int</span> n)</span><span class="comment">//将输入数据读入到层号表示法的inputTree2数组</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"(%d,%c)"</span>,&amp;inputTree2[i].lev,&amp;inputTree2[i].data);</div><div class="line">        getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">kh_input</span><span class="params">(<span class="keyword">char</span> inputTree3[])</span><span class="comment">//将输入数据读入到括号表示法的inputTree3数组</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,inputTree3);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_all</span><span class="params">(LINK_NODE *t,<span class="keyword">int</span> m)</span> <span class="comment">//获取总结点个数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>,i;</div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">    &#123;</div><div class="line">        sum += count_all(t-&gt;child[i],m); <span class="comment">//递归各个子树</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_leaves</span><span class="params">(LINK_NODE *t,<span class="keyword">int</span> m)</span> <span class="comment">//获取叶子结点个数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,tag=<span class="number">0</span>,sum=<span class="number">0</span>;<span class="comment">//tag用来标记该节点有没有子节点</span></div><div class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(t-&gt;child[i] != <span class="literal">NULL</span>) tag = <span class="number">1</span>; <span class="comment">//有子节点</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!tag) <span class="comment">//没有子节点，自己就是叶子结点</span></div><div class="line">        &#123;</div><div class="line">            sum++;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);</div><div class="line">            <span class="keyword">return</span> sum;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            sum += count_leaves(t-&gt;child[i],m); <span class="comment">//递归调用</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(LINK_NODE *t,<span class="keyword">int</span> m)</span><span class="comment">//获取高度</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,tag=<span class="number">0</span>,max=<span class="number">-1</span>,temp; <span class="comment">//tag用来标记该节点有没有子节点</span></div><div class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//为空，高度为-1</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(t-&gt;child[i] != <span class="literal">NULL</span>) tag = <span class="number">1</span>; <span class="comment">//有子节点</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!tag) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//没有子节点，高度为0</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">    &#123;</div><div class="line">        temp = height(t-&gt;child[i],m);</div><div class="line">        max = temp &gt; max ? temp : max; <span class="comment">//max是子树中的最大高度</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max+<span class="number">1</span>; <span class="comment">//子树的最大高度再加一就是目前的最大高度</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    LINK_NODE *root;</div><div class="line">    NODE_PARENT inputTree[MAXN]; <span class="comment">//双亲输入需要用到的数组</span></div><div class="line">    NODE_LEV inputTree2[MAXN]; <span class="comment">//层号输入需要用到的数组</span></div><div class="line">    <span class="keyword">char</span> inputTree3[MAXN]; <span class="comment">//括号输入需要用到的数组</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> m,n;<span class="comment">//m次数，n节点个数</span></div><div class="line"></div><div class="line">    <span class="comment">//freopen("input.txt","r",stdin);</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d\n"</span>,&amp;m,&amp;n);<span class="comment">//要求三种输入法都必须先输入m,n</span></div><div class="line"></div><div class="line">    <span class="comment">//选择用哪种形式输入数据</span></div><div class="line">    <span class="comment">//parent_input(inputTree,n); //双亲输入</span></div><div class="line">    <span class="comment">//lev_input(inputTree2,n);//层号输入</span></div><div class="line">    kh_input(inputTree3);<span class="comment">//括号输入</span></div><div class="line"></div><div class="line">    <span class="comment">//选择用哪种形式建树</span></div><div class="line">    <span class="comment">//root = creat_tree_fromParent(inputTree,m,n);</span></div><div class="line">    <span class="comment">//root = creat_tree_fromParent1(inputTree,m,n);</span></div><div class="line">    <span class="comment">//root = creat_tree_fromlev(inputTree2,m,n);</span></div><div class="line">    root = creat_tree_fromkh(inputTree3,m,n);</div><div class="line"></div><div class="line">    <span class="comment">//选择用哪种形式遍历</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"前序遍历："</span>);r_preorder(root,m);<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"后序遍历："</span>);r_postorder(root,m);<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"层序遍历："</span>);hierachicalorder(root,m);<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="comment">//printf("前序遍历：");preorder_without_recursion(root,m);printf("\n");</span></div><div class="line">    <span class="comment">//printf("后序遍历：");postorder_without_recursion(root,m);printf("\n");</span></div><div class="line"></div><div class="line">    <span class="comment">//获取总结点个数</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"总节点个数为：%d\n"</span>,count_all(root,m));</div><div class="line">    <span class="comment">//获取叶子结点</span></div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"叶子结点有:"</span>);</div><div class="line">    sum = count_leaves(root,m);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n叶子节点个数为:%d\n"</span>,sum);</div><div class="line">    <span class="comment">//获取高度</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"高度为:%d"</span>,height(root,m));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PS：不久我会把第二次补充作业的代码放上来。本以为第一次补充作业390行已经很多了，结果第二次补充作业我写了760行。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;累到不想说话。&lt;/p&gt;
    
    </summary>
    
      <category term="c" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="数据结构" scheme="https://luxuantao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>seamCarving</title>
    <link href="https://luxuantao.github.io/2017/11/17/seamCarving/"/>
    <id>https://luxuantao.github.io/2017/11/17/seamCarving/</id>
    <published>2017-11-17T14:36:51.000Z</published>
    <updated>2018-01-25T09:03:43.060Z</updated>
    
    <content type="html"><![CDATA[<hr><p>其实吧，问题求解课还是有点意思的。。</p><a id="more"></a><p>Seam Carving：以水平和垂直两种方式简单地压缩和拉伸图片，常用于一些图像处理软件，能够做到主要目标不失真。结果肖老师二话不多说就让我们自己写一个。。我哪会写什么图像压缩，网上一查全是java的代码，可我已经忘得差不多了。再查c++，结果c++要用到openCV，呵呵，我还是用java吧。可毕竟菜得扣脚（其实是懒），就拿来了同学的代码看了看，其实并不难，我就顺手补充了点注释。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Picture;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">seamCarving</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] colors;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">seamCarving</span><span class="params">(Picture picture)</span> </span>&#123;</div><div class="line">        width=picture.width();</div><div class="line">        height=picture.height();</div><div class="line">        colors = <span class="keyword">new</span> <span class="keyword">int</span>[height][width];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++) &#123;</div><div class="line">                colors[i][j] = picture.get(j, i).getRGB(); <span class="comment">//普林斯顿大学把这个函数的参数定为先写col，后写row</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Picture <span class="title">picture</span><span class="params">()</span> </span>&#123;</div><div class="line">        Picture picture = <span class="keyword">new</span> Picture(width,height);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;height; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;width; j++) &#123;</div><div class="line">                Color color = <span class="keyword">new</span> Color(colors[i][j]);</div><div class="line">                picture.set(j, i, color);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> picture;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="comment">//能量函数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">energy</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (x==<span class="number">0</span>||x==height-<span class="number">1</span>||y==<span class="number">0</span>||y==width-<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1000.0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> dxRed = red(colors[x - <span class="number">1</span>][y]) -red(colors[x + <span class="number">1</span>][y]);</div><div class="line">            <span class="keyword">int</span> dxGreen = green(colors[x - <span class="number">1</span>][y]) -green(colors[x + <span class="number">1</span>][y]);</div><div class="line">            <span class="keyword">int</span> dxBlue = blue(colors[x - <span class="number">1</span>][y]) -blue(colors[x + <span class="number">1</span>][y]);</div><div class="line">            <span class="keyword">int</span> dyRed = red(colors[x][y - <span class="number">1</span>]) - red(colors[x][y + <span class="number">1</span>]);</div><div class="line">            <span class="keyword">int</span> dyGreen = green(colors[x][y - <span class="number">1</span>]) - green(colors[x][y + <span class="number">1</span>]);</div><div class="line">            <span class="keyword">int</span> dyBlue = blue(colors[x][y - <span class="number">1</span>]) - blue(colors[x][y + <span class="number">1</span>]);</div><div class="line">            <span class="keyword">return</span> Math.sqrt(Math.pow(dxRed, <span class="number">2</span>) + Math.pow(dxBlue, <span class="number">2</span>) + Math.pow(dxGreen, <span class="number">2</span>) + Math.pow(dyRed, <span class="number">2</span>) + Math.pow(dyBlue, <span class="number">2</span>) + Math.pow(dyGreen, <span class="number">2</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findVerticalSeam() &#123;</div><div class="line">        <span class="keyword">double</span>[][] dist=<span class="keyword">new</span> <span class="keyword">double</span>[height][width];</div><div class="line">        <span class="keyword">int</span>[][] node=<span class="keyword">new</span> <span class="keyword">int</span>[height][width];</div><div class="line">        <span class="keyword">int</span>[] seam=<span class="keyword">new</span> <span class="keyword">int</span>[height];</div><div class="line">        <span class="comment">//初始化</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;height;i++) &#123; </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;width;j++) &#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</div><div class="line">        dist[i][j]=<span class="number">0.0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        dist[i][j]=Double.POSITIVE_INFINITY;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;height;i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;width;j++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=-<span class="number">1</span>;k&lt;=<span class="number">1</span>;k++) &#123;</div><div class="line">        <span class="keyword">if</span>(j+k&lt;<span class="number">0</span>||j+k&gt;=width) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(dist[i][j]&gt;(dist[i-<span class="number">1</span>][j+k]+energy(i,j))) &#123;</div><div class="line">        dist[i][j]=(dist[i-<span class="number">1</span>][j+k]+energy(i,j));</div><div class="line">        node[i][j]=j+k; <span class="comment">//记录是从哪个点过来的</span></div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line">        <span class="comment">//找到最后一行中路径总和最短的那一个点</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;width;j++) &#123;</div><div class="line">        <span class="keyword">if</span>(dist[height-<span class="number">1</span>][j]&lt;dist[height-<span class="number">1</span>][index])&#123;</div><div class="line">        index=j;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//向上回溯</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=height-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</div><div class="line">        seam[i]=index;</div><div class="line">        index=node[i][index];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> seam; <span class="comment">//返回这条路径的下标数组</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeVerticalSeam</span><span class="params">(<span class="keyword">int</span>[] seam)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[height][width-<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;height; i++) &#123;</div><div class="line">            System.arraycopy(colors[i],<span class="number">0</span>,a[i],<span class="number">0</span>,seam[i]);<span class="comment">//参数说明：原数组，原数组起始点，目标数组，目标数组起始点，长度</span></div><div class="line">            System.arraycopy(colors[i],seam[i]+<span class="number">1</span>,a[i],seam[i],width-seam[i]-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        width--;</div><div class="line">        colors = a;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tailor</span><span class="params">(<span class="keyword">int</span> tx,<span class="keyword">int</span> ty)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;tx;i++) &#123;</div><div class="line">    removeVerticalSeam(findVerticalSeam());</div><div class="line">    &#125;</div><div class="line">    colors=transpose(colors); <span class="comment">//矩阵转置，这样可以用同样 的函数处理高度上的缩减</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ty;i++) &#123;</div><div class="line">    removeVerticalSeam(findVerticalSeam());</div><div class="line">    &#125;</div><div class="line">    colors=transpose(colors); <span class="comment">//再转置回来</span></div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] transpose(<span class="keyword">int</span>[][] origin) &#123;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        temp=width;</div><div class="line">        width=height;</div><div class="line">        height=temp;</div><div class="line">    <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[height][width];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++) &#123;</div><div class="line">                result[i][j] = origin[j][i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">red</span><span class="params">(<span class="keyword">int</span> rgb)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (rgb &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">green</span><span class="params">(<span class="keyword">int</span> rgb)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (rgb &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">blue</span><span class="params">(<span class="keyword">int</span> rgb)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (rgb &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Picture picture = <span class="keyword">new</span> Picture(<span class="string">"seamCarving.jpg"</span>);</div><div class="line">        <span class="keyword">int</span> dx=<span class="number">0</span>,dy=<span class="number">0</span>;</div><div class="line">        Scanner in=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">        dx=in.nextInt();</div><div class="line">        dy=in.nextInt();</div><div class="line">        in.close();</div><div class="line">        seamCarving sc = <span class="keyword">new</span> seamCarving(picture);</div><div class="line">        sc.tailor(dx,dy);</div><div class="line">        picture.show(); <span class="comment">//显示原图像</span></div><div class="line">        Picture newpicture = sc.picture();</div><div class="line">        newpicture.show(); <span class="comment">//把sc的colors数组包装为picture对象，再调用picture的show显示修改后的样子</span></div><div class="line">        newpicture.save(<span class="string">"swamCarving_result.jpg"</span>);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>要用到普林斯顿大学的包文件。核心算法就是个dp，没什么大花头，能量函数什么的就不多说了，这么用就行了，原理就说不清了。</p><p>知识点补充：</p><p>颜色方面的小知识，以白色为例：0xFFFFFFFF 前两个F是透明度的大小，然后是红色的，绿色的，蓝色的亮度。因为是十六进制，所以一个F占四位二进制数，两个占八位，也就是一个byte，代码中要取到红色的值怎么办，很简单，用<code>(rgb &gt;&gt; 16) &amp; 0xFF;</code>,后面十六位舍弃，再和0xFF，（也就是二进制11111111） 位与一下，就截取下来了，绿色蓝色同理。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;其实吧，问题求解课还是有点意思的。。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
      <category term="算法" scheme="https://luxuantao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vjudge一百题留念</title>
    <link href="https://luxuantao.github.io/2017/11/05/vjudge%E4%B8%80%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/"/>
    <id>https://luxuantao.github.io/2017/11/05/vjudge一百题留念/</id>
    <published>2017-11-05T06:47:20.000Z</published>
    <updated>2017-11-05T07:14:57.180Z</updated>
    
    <content type="html"><![CDATA[<hr><p>今天完成vjudge第一百题，mark一下。</p><a id="more"></a><p><img src="/images/vjudge.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;今天完成vjudge第一百题，mark一下。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Arduino和processing实现串口通信</title>
    <link href="https://luxuantao.github.io/2017/10/29/Arduino%E5%92%8Cprocessing%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
    <id>https://luxuantao.github.io/2017/10/29/Arduino和processing实现串口通信/</id>
    <published>2017-10-29T03:31:24.000Z</published>
    <updated>2018-01-25T09:02:13.559Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Arduino和processing是一对好基友。。。</p><a id="more"></a><p>1.通过串口将Arduino的输出传递给Processing进行输出。</p><p>Arduino代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> data=<span class="number">12345</span>; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  Serial.begin(<span class="number">9600</span>);<span class="comment">//rate</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  Serial.println(data); <span class="comment">//send data, end up with '\n'</span></div><div class="line">  delay(<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Processing代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> processing.serial.*;</div><div class="line"></div><div class="line">String message;</div><div class="line">String temp;</div><div class="line">Serial myPort;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</div><div class="line">  myPort = <span class="keyword">new</span> Serial(<span class="keyword">this</span>,<span class="string">"COM3"</span>,<span class="number">9600</span>); <span class="comment">//Set Serial Port</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(myPort.available()&gt;<span class="number">0</span>)&#123;</div><div class="line">    temp = myPort.readString(); <span class="comment">//temp for read bytes</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length(); i++)&#123;</div><div class="line">      <span class="comment">//if meet the end mark</span></div><div class="line">      <span class="keyword">if</span>(temp.charAt(i) == <span class="string">'\n'</span>)&#123;</div><div class="line">        println(message);</div><div class="line">        message = <span class="string">""</span>;  <span class="comment">//clean string</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span></div><div class="line">        message += temp.charAt(i);  <span class="comment">//store byte</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意：</p><p>由于串口流通的数据都是bytes而没有字符串概念，所有发送数据都会按一个byte一个byte缓存，不论是否是连续字符串；而读取时会取走所有缓存bytes，不论它们是否是一个、半个还是多个字符串。</p><p>Arduino和Processing的数据收发速度是不一样的。如果用Arduino延时较长时间，Processing可能读取一个字符串或字符串的一部分。如果Arduino延时较短，Processing可能读取多个字符串，但不一定完整。在读取字符串的时候，无法确定上一个字符串是否被读取了，当前字符串是否缓存完毕，因为字符串都已经切成了bytes，连成一串。这个问题是串口通信本身造成的，一定会出现。</p><p>一种解决方法是，通过在接收端缓存数据来解决这个问题。为传输数据设置一个结束标记，如’\n’（换行符），就能在接收到的数据流中识别到一个字符串的结尾。当未遇到结束标记，就一直将串口数据保存在一个buffer变量中，继续接收，当遇到结束标记，即完成缓存。</p><p>2.通过串口将rotation sensor的转动角度发送给Processing，并绘制出可视化的图形。</p><p>Arduino代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> potPin = <span class="number">0</span>; <span class="comment">// 电位器第二针脚接在模拟口0上</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 启动串口，波特率为9600</span></div><div class="line">  Serial.begin(<span class="number">9600</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 读取电位器电压</span></div><div class="line">  <span class="keyword">int</span> sensorValue = analogRead(potPin);</div><div class="line">  </div><div class="line">  <span class="comment">// 因为processing的serial.read()只支持0-255之间的数值，所以需要把0-1023数值除以4，缩放到0-255之间</span></div><div class="line">  Serial.write(sensorValue/<span class="number">4</span>); </div><div class="line">  </div><div class="line">  delay(<span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Processing代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> processing.serial.*;</div><div class="line"></div><div class="line">Serial serial;  </div><div class="line"><span class="keyword">int</span> sensorValue;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 设置画布大小为 305 x 200 </span></div><div class="line">  size(<span class="number">305</span>, <span class="number">200</span>);  <span class="comment">//设置305的原因是arduino ADC口输入过来的数值是0-255，加上圆形半径50，刚好305.</span></div><div class="line">  </div><div class="line">  <span class="comment">// 打开串口，设置波特率为9600</span></div><div class="line">  serial = <span class="keyword">new</span> Serial(<span class="keyword">this</span>, <span class="string">"COM3"</span>, <span class="number">9600</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( serial.available() &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// 读取从串口产过来的Sensor数值。</span></div><div class="line">    sensorValue = serial.read()+<span class="number">25</span>;  <span class="comment">//+25的原因是后面设置圆形半径为50，为了让圆形起点与重点贴边，就需要+25半径。</span></div><div class="line">    println(sensorValue);</div><div class="line">    </div><div class="line">    <span class="comment">// 在画布内画一个</span></div><div class="line">    background(<span class="number">255</span>); <span class="comment">// 背景为白色</span></div><div class="line">    fill(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);   <span class="comment">// 圆形内填充为红色</span></div><div class="line">    ellipse(sensorValue, <span class="number">100</span>, <span class="number">50</span>, <span class="number">50</span>);</div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>知识点补充：</p><p><strong>ellipse：（圆形）</strong></p><p>ellipse(x,y,width,height)<br>x,y是圆形坐标点，指的是圆心。<br>width是圆的水平直径<br>height是圆的垂直直径<br>比如120,60这样画出来的就是一个椭圆了。</p><p><strong>rect：（矩形）</strong><br>rect(x,y,width,height)<br>x,y指的是矩形坐标点，是左上角那个点。<br>width是矩形宽度<br>height是矩形高度<br>默认模式是CORNER。<br>画矩形有三种模式：<br>1、CORNER：rect(左上x,左上y,宽,高)<br>2、CENTER：rect(中心x,中心y,宽,高)<br>3、CORNERS：rect(左上x,左上y,右下x,右下y)</p><p>例子：<br>rectMode(CENTER);<br>rect(150,150,200,200)</p><p>PS:貌似还是把代码当作Java显示高亮效果更好。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Arduino和processing是一对好基友。。。&lt;/p&gt;
    
    </summary>
    
      <category term="Arduino" scheme="https://luxuantao.github.io/categories/Arduino/"/>
    
    
  </entry>
  
  <entry>
    <title>Arduino初体验</title>
    <link href="https://luxuantao.github.io/2017/10/28/Arduino%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://luxuantao.github.io/2017/10/28/Arduino初体验/</id>
    <published>2017-10-28T01:06:23.000Z</published>
    <updated>2018-01-25T09:02:02.697Z</updated>
    
    <content type="html"><![CDATA[<hr><p>自从退了问题求解之后，感觉一身轻松，每天只有一个字：“闲”。这两天大佬们都走上了ACM远征的道路，留下我们这批小佬暗自神伤。不过还算好，Arduino这个新伙伴让我开心了几天。</p><a id="more"></a><p>小灯+蜂鸣器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// initialize digital pin LED_BUILTIN as an output.</span></div><div class="line">  Serial.begin(<span class="number">9600</span>);</div><div class="line">  pinMode(<span class="number">13</span>, OUTPUT);</div><div class="line">  pinMode(<span class="number">3</span>, OUTPUT);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">  digitalWrite(<span class="number">13</span>, HIGH);   <span class="comment">// turn the LED on (HIGH is the voltage level)</span></div><div class="line">  delay(<span class="number">1000</span>);                       <span class="comment">// wait for a second</span></div><div class="line">  Serial.println(<span class="string">"ok"</span>);</div><div class="line">  digitalWrite(<span class="number">13</span>, LOW);    <span class="comment">// turn the LED off by making the voltage LOW</span></div><div class="line">  delay(<span class="number">1000</span>);                       <span class="comment">// wait for a second</span></div><div class="line">  </div><div class="line">  <span class="keyword">long</span> frequency = <span class="number">300</span>; <span class="comment">//频率, 单位Hz  </span></div><div class="line">   <span class="comment">//用tone()函数发出频率为frequency的波形  </span></div><div class="line">   tone(<span class="number">3</span>, frequency );  </div><div class="line">   delay(<span class="number">1000</span>); <span class="comment">//等待1000毫秒  </span></div><div class="line">   noTone(<span class="number">3</span>);<span class="comment">//停止发声  </span></div><div class="line">   delay(<span class="number">2000</span>); <span class="comment">//等待2000毫秒  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>舵机自动旋转</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt; </span></span></div><div class="line">Servo myservo;  <span class="comment">// create servo object to control a servo </span></div><div class="line">                <span class="comment">// a maximum of eight servo objects can be created </span></div><div class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;    <span class="comment">// variable to store the servo position </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span></div><div class="line"><span class="function"></span>&#123; </div><div class="line">  myservo.attach(<span class="number">9</span>);  <span class="comment">// attaches the servo on pin 9 to the servo object </span></div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span></div><div class="line"><span class="function"></span>&#123; </div><div class="line">  <span class="keyword">for</span>(pos = <span class="number">0</span>; pos &lt; <span class="number">180</span>; pos += <span class="number">1</span>)  <span class="comment">// goes from 0 degrees to 180 degrees </span></div><div class="line">  &#123;                                  <span class="comment">// in steps of 1 degree </span></div><div class="line">    myservo.write(pos);              <span class="comment">// tell servo to go to position in variable 'pos' </span></div><div class="line">    delay(<span class="number">15</span>);                       <span class="comment">// waits 15ms for the servo to reach the position </span></div><div class="line">  &#125; </div><div class="line">  <span class="keyword">for</span>(pos = <span class="number">180</span>; pos&gt;=<span class="number">1</span>; pos-=<span class="number">1</span>)     <span class="comment">// goes from 180 degrees to 0 degrees </span></div><div class="line">  &#123;                                </div><div class="line">    myservo.write(pos);              <span class="comment">// tell servo to go to position in variable 'pos' </span></div><div class="line">    delay(<span class="number">15</span>);                       <span class="comment">// waits 15ms for the servo to reach the position </span></div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>rotation sensor控制舵机</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt; // 声明调用Servo.h库</span></span></div><div class="line">Servo myservo; <span class="comment">// 创建一个舵机对象</span></div><div class="line"><span class="keyword">int</span> potpin = <span class="number">0</span>; <span class="comment">// 连接到模拟口0</span></div><div class="line"><span class="keyword">int</span> val; <span class="comment">//变量val用来存储从模拟口0读到的值</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">Serial.begin(<span class="number">9600</span>);</div><div class="line"> myservo.attach(<span class="number">9</span>); <span class="comment">//将引脚9上的舵机与声明的舵机对象连接起来</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line"> val = analogRead(potpin); <span class="comment">//从模拟口0读值，并通过val记录</span></div><div class="line"> val = <span class="built_in">map</span>(val, <span class="number">0</span>, <span class="number">1023</span>, <span class="number">0</span>, <span class="number">179</span>); <span class="comment">//通过map函数进行数值转换</span></div><div class="line"> myservo.write(val); <span class="comment">// 给舵机写入角度</span></div><div class="line"> Serial.println(<span class="string">"OK"</span>);</div><div class="line"> delay(<span class="number">15</span>); <span class="comment">// 延时15ms让舵机转到指定位置</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PS：md竟然不支持Arduino语法。。我用的c++实现高亮。。</p><p>​    在此特别鸣谢两位白羊座小朋友提供的技术支持！</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;自从退了问题求解之后，感觉一身轻松，每天只有一个字：“闲”。这两天大佬们都走上了ACM远征的道路，留下我们这批小佬暗自神伤。不过还算好，Arduino这个新伙伴让我开心了几天。&lt;/p&gt;
    
    </summary>
    
      <category term="Arduino" scheme="https://luxuantao.github.io/categories/Arduino/"/>
    
    
  </entry>
  
  <entry>
    <title>第一道交互题</title>
    <link href="https://luxuantao.github.io/2017/09/15/%E7%AC%AC%E4%B8%80%E9%81%93%E4%BA%A4%E4%BA%92%E9%A2%98/"/>
    <id>https://luxuantao.github.io/2017/09/15/第一道交互题/</id>
    <published>2017-09-15T10:05:22.000Z</published>
    <updated>2018-01-25T09:01:35.732Z</updated>
    
    <content type="html"><![CDATA[<hr><p>EOJ被我刷屏了。。。满屏的<code>Idleness Limit Exceeded</code>。。。直到ZZW给了答案才知道怎么写。</p><a id="more"></a><p>原题链接：<a href="http://acm.ecnu.edu.cn/problem/3342/" target="_blank" rel="external">经典的猜数游戏</a></p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> low=<span class="number">-1e9</span>;</div><div class="line"><span class="keyword">int</span> up=<span class="number">1e9</span>;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> mid=(low+up)&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;mid&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"><span class="comment">//printf("%d\n",mid);</span></div><div class="line"><span class="comment">//fflush(stdout);</span></div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;s;</div><div class="line"><span class="keyword">if</span>(s==<span class="string">"equal"</span>) <span class="keyword">break</span>;</div><div class="line"><span class="keyword">if</span>(s==<span class="string">"small"</span>) low=mid+<span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">"big"</span>) up=mid<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>题目很简单，关键是你怎么清空缓存。</p><p>两种方法：</p><p>1.<code>cout&lt;&lt;endl</code>直接清空缓存。</p><p>2.如果你用了<code>printf</code>，那么后面就要加<code>fflush(stdout);</code>。</p><p>另附java代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"><span class="keyword">int</span> low=-<span class="number">1000000000</span>;</div><div class="line"><span class="keyword">int</span> up=<span class="number">1000000000</span>;</div><div class="line">String s;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line"><span class="keyword">int</span> mid=(low+up)&gt;&gt;<span class="number">1</span>;</div><div class="line">System.out.println(mid);</div><div class="line">System.out.flush();</div><div class="line">s=in.nextLine();</div><div class="line"><span class="keyword">switch</span>(s) &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"big"</span>:</div><div class="line">up=mid-<span class="number">1</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="string">"small"</span>:</div><div class="line">low=mid+<span class="number">1</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="string">"equal"</span>:</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">while</span>(!s.equals(<span class="string">"equal"</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意用法:<code>System.out.flush();</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;EOJ被我刷屏了。。。满屏的&lt;code&gt;Idleness Limit Exceeded&lt;/code&gt;。。。直到ZZW给了答案才知道怎么写。&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="OJ" scheme="https://luxuantao.github.io/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>用归并排序求逆序对个数</title>
    <link href="https://luxuantao.github.io/2017/09/15/%E7%94%A8%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%B1%82%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B0/"/>
    <id>https://luxuantao.github.io/2017/09/15/用归并排序求逆序对个数/</id>
    <published>2017-09-15T10:04:00.000Z</published>
    <updated>2018-01-25T09:01:55.313Z</updated>
    
    <content type="html"><![CDATA[<p>之前接触过归并排序，不以为然，没想到今天这题就用上了。</p><a id="more"></a><p>原题链接：<a href="http://acm.ecnu.edu.cn/problem/3234/" target="_blank" rel="external">Sort</a></p><p>给你一个序列，可以交换相邻两个数，用最小的交换次数使它成为非递减序列。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>+<span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> a[N],tmp[N];</div><div class="line">ll ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> i = l;</div><div class="line">    <span class="keyword">int</span> j = m + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> k = l;  <span class="comment">//特别注意，k是从l（字母）开始而不是0；</span></div><div class="line">    <span class="keyword">while</span>(i &lt;= m &amp;&amp; j &lt;= r)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(a[i] &gt; a[j])</div><div class="line">        &#123;</div><div class="line">            tmp[k++] = a[j++];</div><div class="line">            ans += m - i + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            tmp[k++] = a[i++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(i &lt;= m) tmp[k++] = a[i++];</div><div class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k++] = a[j++];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</div><div class="line">        a[i] = tmp[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l &lt; r)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        Merge_sort(l,m);</div><div class="line">        Merge_sort(m+<span class="number">1</span>,r);</div><div class="line">        Merge(l,r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">    ans = <span class="number">0</span>;</div><div class="line">    Merge_sort(<span class="number">0</span>,n<span class="number">-1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">&#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实际上归并排序的交换次数就是这个数组的逆序对个数。</p><p>我们可以这样考虑：</p><p>归并排序是将数列a[l,h]分成两半a[l,mid]和a[mid+1,h]分别进行归并排序，然后再将这两半合并起来。</p><p>在合并的过程中（设l&lt;=i&lt;=mid，mid+1&lt;=j&lt;=h），当a[i]&lt;=a[j]时，并不产生逆序数；当a[i]&gt;a[j]时，在</p><p>前半部分中比a[i]大的数都比a[j]大，将a[j]放在a[i]前面的话，逆序数要加上mid+1-i。因此，可以在归并</p><p>排序中的合并过程中计算逆序数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前接触过归并排序，不以为然，没想到今天这题就用上了。&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="OJ" scheme="https://luxuantao.github.io/tags/OJ/"/>
    
      <category term="算法" scheme="https://luxuantao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算程序运行时间</title>
    <link href="https://luxuantao.github.io/2017/09/15/%E8%AE%A1%E7%AE%97%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
    <id>https://luxuantao.github.io/2017/09/15/计算程序运行时间/</id>
    <published>2017-09-15T10:02:38.000Z</published>
    <updated>2018-01-25T09:01:22.279Z</updated>
    
    <content type="html"><![CDATA[<hr><p>计算程序运行的时间。</p><a id="more"></a><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">double</span> start_time=clock();</div><div class="line">    <span class="comment">//运行过程</span></div><div class="line">    <span class="keyword">double</span> end_time=clock();</div><div class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"Running time is: "</span>&lt;&lt;(end_time-start_time)/CLOCKS_PER_SEC&lt;&lt;<span class="string">"s"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;计算程序运行的时间。&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>java-大整数</title>
    <link href="https://luxuantao.github.io/2017/09/15/java-%E5%A4%A7%E6%95%B4%E6%95%B0/"/>
    <id>https://luxuantao.github.io/2017/09/15/java-大整数/</id>
    <published>2017-09-15T10:01:37.000Z</published>
    <updated>2018-01-25T09:01:15.632Z</updated>
    
    <content type="html"><![CDATA[<hr><p>java中大整数的应用，感觉挺强大的。</p><a id="more"></a><p>原题链接：<a href="https://www.hackerrank.com/challenges/java-biginteger" target="_blank" rel="external">Java BigInteger</a></p><p>In this problem, you have to add and multiply huge numbers! These numbers are so big that you can’t contain them in any ordinary data types like a long integer.</p><p>Use the power of Java’s BigInteger class and solve this problem.</p><p><strong>Input Format</strong></p><p>There will be two lines containing two numbers,  and .</p><p><strong>Constraints</strong></p><p> and  are non-negative integers and can have maximum  digits.</p><p><strong>Output Format</strong></p><p>Output two lines. The first line should contain , and the second line should contain . Don’t print any leading zeros.</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1234</div><div class="line">20</div></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1254</div><div class="line">24680</div></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.math.BigInteger;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">BigInteger a=in.nextBigInteger();</div><div class="line">BigInteger b=in.nextBigInteger();</div><div class="line">        System.out.println(a.add(b));</div><div class="line">        System.out.println(a.multiply(b));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>原题链接：<a href="https://www.hackerrank.com/challenges/java-bigdecimal" target="_blank" rel="external">Java BigDecimal</a> </p><p>Java’s BigDecimal class can handle arbitrary-precision signed decimal numbers. Let’s test your knowledge of them!</p><p>Given an array, , of  real number strings, sort them in descending order — but wait, there’s more! Each number must be printed in the exact same format as it was read from stdin, meaning that  is printed as , and  is printed as . If two numbers represent numerically equivalent values (e.g., ), then they must be listed in the same order as they were received as input).</p><p>Complete the code in the unlocked section of the editor below. You must rearrange array ‘s elements according to the instructions above.</p><p><strong>Input Format</strong></p><p>The first line consists of a single integer, , denoting the number of integer strings.<br>Each line  of the  subsequent lines contains a real number denoting the value of .</p><p><strong>Constraints</strong></p><ul><li>Each  has <em>at most</em>  300 digits.</li></ul><p><strong>Output Format</strong></p><p>Locked stub code in the editor will print the contents of array  to stdout. You are only responsible for reordering the array’s elements.</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">9</div><div class="line">-100</div><div class="line">50</div><div class="line">0</div><div class="line">56.6</div><div class="line">90</div><div class="line">0.12</div><div class="line">.12</div><div class="line">02.34</div><div class="line">000.000</div></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">90</div><div class="line">56.6</div><div class="line">50</div><div class="line">02.34</div><div class="line">0.12</div><div class="line">.12</div><div class="line">0</div><div class="line">000.000</div><div class="line">-100</div></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.math.BigDecimal;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> n = sc.nextInt();</div><div class="line">        String []s = <span class="keyword">new</span> String[n+<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</div><div class="line">            s[i] = sc.next();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">            BigDecimal max = <span class="keyword">new</span> BigDecimal(s[i]);</div><div class="line">            <span class="keyword">int</span> idx = i;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                BigDecimal curr = <span class="keyword">new</span> BigDecimal(s[j]);</div><div class="line">                <span class="keyword">if</span>(curr.compareTo(max) == <span class="number">1</span>)&#123;</div><div class="line">                    max=curr;</div><div class="line">                    idx=j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            String temp = s[i];</div><div class="line">            s[i] = s[idx];</div><div class="line">            s[idx] = temp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">            System.out.println(s[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>原题链接：<a href="https://www.hackerrank.com/challenges/java-primality-test" target="_blank" rel="external">Java Primality Test</a></p><p>A prime number is a natural number greater than  whose only positive divisors are  and itself. For example, the first six prime numbers are , , , , , and .</p><p>Given a large integer, , use the Java <em>BigInteger</em> class’ <a href="https://www.hackerrank.com/external_redirect?to=https://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html#isProbablePrime%28int%29" target="_blank" rel="external"><em>isProbablePrime</em></a> method to determine and print whether it’s <code>prime</code> or <code>not prime</code>.</p><p><strong>Input Format</strong></p><p>A single line containing an integer,  (the number to be checked).</p><p><strong>Constraints</strong></p><ul><li>contains at most 100 digits.</li></ul><p><strong>Output Format</strong></p><p>If  is a prime number, print <code>prime</code>; otherwise, print <code>not prime</code>.</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">13</div></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prime</div></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.text.*;</div><div class="line"><span class="keyword">import</span> java.math.*;</div><div class="line"><span class="keyword">import</span> java.util.regex.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">      BigInteger n = in.nextBigInteger();</div><div class="line">      in.close();</div><div class="line">      System.out.println(n.isProbablePrime(<span class="number">10</span>) ? <span class="string">"prime"</span> : <span class="string">"not prime"</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>知识点补充：</p><p>JAVA BigInteger 成员函数： isProbablePrime</p><p>public boolean isProbablePrime(int certainty)</p><p>如果此 BigInteger 可能为素数，则返回 true，如果它一定为合数，则返回 false。如果 certainty &lt;= 0，则返回 true。</p><p>参数：</p><p>certainty - 调用方允许的不确定性的度量。如果该调用返回 true，则此 BigInteger 是素数的概率超出 (1 - 1/(2*certainty))。此方法的执行时间与此参数的值是成比例的。</p><p>返回：</p><p>如果此 BigInteger 可能为素数，则返回 true，如果它一定为合数，则返回 false。</p><p><a href="http://lib.csdn.net/base/java" target="_blank" rel="external">Java</a>中的isProbablePrime函数是针对BigInteger类的一个素数判断函数，它的实现原理其实并不复杂，只是要分许多情况讨论，要用到Miller-Rabin素数<a href="http://lib.csdn.net/base/softwaretest" target="_blank" rel="external">测试</a>和Lucas-Lehmer测试，它是一个概率<a href="http://lib.csdn.net/base/datastructure" target="_blank" rel="external">算法</a>，返回的结果：一个数不是素数或者一个数可能是素数。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;java中大整数的应用，感觉挺强大的。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>java-字符串处理</title>
    <link href="https://luxuantao.github.io/2017/09/15/java-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <id>https://luxuantao.github.io/2017/09/15/java-字符串处理/</id>
    <published>2017-09-15T10:00:31.000Z</published>
    <updated>2018-01-25T09:01:09.444Z</updated>
    
    <content type="html"><![CDATA[<hr><p>java的字符串处理，有涉及到HushMap和其他一些零散知识点的应用，作为初学者，这题就作为范例供来日所需。</p><a id="more"></a><p>原题链接：<a href="https://www.hackerrank.com/challenges/java-anagrams/problem" target="_blank" rel="external">Java Anagrams</a></p><p>Two strings,  and , are called anagrams if they contain all the same characters in the same frequencies. For example, the anagrams of <code>CAT</code> are <code>CAT</code>, <code>ACT</code>, <code>TAC</code>, <code>TCA</code>, <code>ATC</code>, and <code>CTA</code>.</p><p>Complete the function in the editor. If  and  are case-insensitive anagrams, print “Anagrams”; otherwise, print “Not Anagrams” instead.</p><p><strong>Input Format</strong></p><p>The first line contains a string denoting .<br>The second line contains a string denoting .</p><p><strong>Constraints</strong></p><ul><li>Strings  and  consist of English alphabetic characters.</li><li>The comparison should NOT be case sensitive.</li></ul><p><strong>Output Format</strong></p><p>Print “Anagrams” if  and  are case-insensitive anagrams of each other; otherwise, print “Not Anagrams” instead.</p><p><strong>Sample Input 0</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">anagram</div><div class="line">margana</div></pre></td></tr></table></figure><p><strong>Sample Output 0</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Anagrams</div></pre></td></tr></table></figure><p><strong>Explanation 0</strong></p><table><thead><tr><th>Character</th><th>Frequency: <code>anagram</code></th><th>Frequency: <code>margana</code></th></tr></thead><tbody><tr><td><code>A</code> or <code>a</code></td><td>3</td><td>3</td></tr><tr><td><code>G</code> or <code>g</code></td><td>1</td><td>1</td></tr><tr><td><code>N</code> or <code>n</code></td><td>1</td><td>1</td></tr><tr><td><code>M</code> or <code>m</code></td><td>1</td><td>1</td></tr><tr><td><code>R</code> or <code>r</code></td><td>1</td><td>1</td></tr></tbody></table><p>The two strings contain all the same letters in the same frequencies, so we print “Anagrams”.</p><p><strong>Sample Input 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">anagramm</div><div class="line">marganaa</div></pre></td></tr></table></figure><p><strong>Sample Output 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Not Anagrams</div></pre></td></tr></table></figure><p><strong>Explanation 1</strong></p><table><thead><tr><th>Character</th><th>Frequency: <code>anagramm</code></th><th>Frequency: <code>marganaa</code></th></tr></thead><tbody><tr><td><code>A</code> or <code>a</code></td><td>3</td><td>4</td></tr><tr><td><code>G</code> or <code>g</code></td><td>1</td><td>1</td></tr><tr><td><code>N</code> or <code>n</code></td><td>1</td><td>1</td></tr><tr><td><code>M</code> or <code>m</code></td><td>2</td><td>1</td></tr><tr><td><code>R</code> or <code>r</code></td><td>1</td><td>1</td></tr></tbody></table><p>The two strings don’t contain the same number of <code>a</code>‘s and <code>m</code>‘s, so we print “Not Anagrams”.</p><p><strong>Sample Input 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hello</div><div class="line">hello</div></pre></td></tr></table></figure><p><strong>Sample Output 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Anagrams</div></pre></td></tr></table></figure><p><strong>Explanation 2</strong></p><table><thead><tr><th>Character</th><th>Frequency: <code>Hello</code></th><th>Frequency: <code>hello</code></th></tr></thead><tbody><tr><td><code>E</code> or <code>e</code></td><td>1</td><td>1</td></tr><tr><td><code>H</code> or <code>h</code></td><td>1</td><td>1</td></tr><tr><td><code>L</code> or <code>l</code></td><td>2</td><td>2</td></tr><tr><td><code>O</code> or <code>o</code></td><td>1</td><td>1</td></tr></tbody></table><p>The two strings contain all the same letters in the same frequencies, so we print “Anagrams”.</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String a, String b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (a.length()!=b.length())</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        a=a.toLowerCase();</div><div class="line">        b=b.toLowerCase();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length();i++) &#123;</div><div class="line">            <span class="keyword">char</span> ch=a.charAt(i);</div><div class="line">            <span class="keyword">if</span>(!map.containsKey(ch)) &#123;</div><div class="line">                map.put(ch,<span class="number">1</span>);</div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                Integer frequency = map.get(ch);</div><div class="line">                map.put(ch,++frequency);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length();i++) &#123;</div><div class="line">            <span class="keyword">char</span> ch=b.charAt(i);</div><div class="line">            <span class="keyword">if</span>(!map.containsKey(ch)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125; </div><div class="line">            Integer frequency = map.get(ch);</div><div class="line">            <span class="keyword">if</span>(frequency==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                map.put(ch,--frequency);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        String a = scan.next();</div><div class="line">        String b = scan.next();</div><div class="line">        scan.close();</div><div class="line">        <span class="keyword">boolean</span> ret = isAnagram(a, b);</div><div class="line">        System.out.println( (ret) ? <span class="string">"Anagrams"</span> : <span class="string">"Not Anagrams"</span> );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (s1.length() != s2.length()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">char</span>[] a = s1.toLowerCase().toCharArray();</div><div class="line">        <span class="keyword">char</span>[] b = s2.toLowerCase().toCharArray();</div><div class="line">        <span class="keyword">boolean</span> anagram = <span class="keyword">true</span>;</div><div class="line">        Arrays.sort(a);</div><div class="line">        Arrays.sort(b);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i] != b[i]) &#123;</div><div class="line">                anagram = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> anagram;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    </div><div class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        String a = scan.next();</div><div class="line">        String b = scan.next();</div><div class="line">        scan.close();</div><div class="line">        <span class="keyword">boolean</span> ret = isAnagram(a, b);</div><div class="line">        System.out.println( (ret) ? <span class="string">"Anagrams"</span> : <span class="string">"Not Anagrams"</span> );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;java的字符串处理，有涉及到HushMap和其他一些零散知识点的应用，作为初学者，这题就作为范例供来日所需。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>java-comparator</title>
    <link href="https://luxuantao.github.io/2017/09/15/java-comparator/"/>
    <id>https://luxuantao.github.io/2017/09/15/java-comparator/</id>
    <published>2017-09-15T09:57:05.000Z</published>
    <updated>2018-01-25T09:01:03.149Z</updated>
    
    <content type="html"><![CDATA[<hr><p>要使自己的类拥有排序功能，就要实现comparator接口,重写compare方法。</p><a id="more"></a><p>原题链接：<a href="https://www.hackerrank.com/challenges/java-comparator/problem" target="_blank" rel="external">Java Comparator</a></p><p>Comparators are used to compare two objects. In this challenge, you’ll create a comparator and use it to sort an array.</p><p>The <em>Player</em> class is provided for you in your editor. It has  fields: a  String and a  integer.</p><p>Given an array of  <em>Player</em> objects, write a comparator that sorts them in order of decreasing score; if  or more players have the same score, sort those players alphabetically by name. To do this, you must create a <em>Checker</em> class that implements the <em>Comparator</em> interface, then write an <em>int compare(Player a, Player b)</em> method implementing the <a href="https://www.hackerrank.com/external_redirect?to=https://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html#compare%28T,%20T%29" target="_blank" rel="external">Comparator.compare(T o1, T o2)</a> method.</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">5</div><div class="line">amy 100</div><div class="line">david 100</div><div class="line">heraldo 50</div><div class="line">aakansha 75</div><div class="line">aleksa 150</div></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">aleksa 150</div><div class="line">amy 100</div><div class="line">david 100</div><div class="line">aakansha 75</div><div class="line">heraldo 50</div></pre></td></tr></table></figure><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Checker</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Player</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Player p1, Player p2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (p2.score == p1.score) &#123;</div><div class="line">            <span class="keyword">return</span> p1.name.compareTo(p2.name);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> p1.score &gt; p2.score ? -<span class="number">1</span> : <span class="number">1</span>;    </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">int</span> score;</div><div class="line">    </div><div class="line">    Player(String name, <span class="keyword">int</span> score) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.score = score;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> n = scan.nextInt();</div><div class="line">        Player[] player = <span class="keyword">new</span> Player[n];</div><div class="line">        Checker checker = <span class="keyword">new</span> Checker();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            player[i] = <span class="keyword">new</span> Player(scan.next(), scan.nextInt());</div><div class="line">        &#125;</div><div class="line">        scan.close();  </div><div class="line">        Arrays.sort(player, checker);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; player.length; i++) &#123;</div><div class="line">            System.out.printf(<span class="string">"%s %s\n"</span>, player[i].name, player[i].score);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>知识点补充：</p><ol><li>String类有个compareTo()函数，前者比后者小时返回负数。</li><li><code>public int compare(Player p1, Player p2)</code>返回负数时，不换位置。</li><li>注意用法：<code>Arrays.sort(player, checker);</code></li></ol><hr><p>原题链接：<a href="https://www.hackerrank.com/challenges/java-sort/problem" target="_blank" rel="external">Java Sort</a></p><p>You are given a list of student information: ID, FirstName, and CGPA. Your task is to rearrange them according to their CGPA in decreasing order. If two student have the same CGPA, then arrange them according to their first name in alphabetical order. If those two students also have the same first name, then order them according to their ID. No two students have the same ID.</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">5</div><div class="line">33 Rumpa 3.68</div><div class="line">85 Ashis 3.85</div><div class="line">56 Samiha 3.75</div><div class="line">19 Samara 3.75</div><div class="line">22 Fahim 3.76</div></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Ashis</div><div class="line">Fahim</div><div class="line">Samara</div><div class="line">Samiha</div><div class="line">Rumpa</div></pre></td></tr></table></figure><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">   <span class="keyword">private</span> String fname;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">double</span> cgpa;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String fname, <span class="keyword">double</span> cgpa)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>();</div><div class="line">      <span class="keyword">this</span>.id = id;</div><div class="line">      <span class="keyword">this</span>.fname = fname;</div><div class="line">      <span class="keyword">this</span>.cgpa = cgpa;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> id;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFname</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> fname;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCgpa</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> cgpa;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</div><div class="line"><span class="keyword">double</span> cgpa1 = s1.getCgpa();</div><div class="line"><span class="keyword">double</span> cgpa2 = s2.getCgpa();</div><div class="line"><span class="keyword">if</span>(Math.abs(cgpa1 - cgpa2)&lt;<span class="number">0.00000001</span>)&#123;</div><div class="line"><span class="keyword">int</span> fnameCom = s1.getFname().compareTo(s2.getFname());</div><div class="line"><span class="keyword">if</span>(fnameCom==<span class="number">0</span>)<span class="keyword">return</span> s1.getId()-s2.getId(); </div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> fnameCom;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> (cgpa1&lt;cgpa2)?<span class="number">1</span>:-<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"><span class="keyword">int</span> testCases = Integer.parseInt(in.nextLine());</div><div class="line">List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</div><div class="line"><span class="keyword">while</span>(testCases&gt;<span class="number">0</span>)&#123;</div><div class="line"><span class="keyword">int</span> id = in.nextInt();</div><div class="line">String fname = in.next();</div><div class="line"><span class="keyword">double</span> cgpa = in.nextDouble();</div><div class="line">Student st = <span class="keyword">new</span> Student(id, fname, cgpa);</div><div class="line">studentList.add(st);</div><div class="line">testCases--;</div><div class="line">&#125;</div><div class="line">Collections.sort(studentList, <span class="keyword">new</span> StudentComparator());</div><div class="line"><span class="keyword">for</span>(Student st: studentList)&#123;</div><div class="line">System.out.println(st.getFname());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>知识点补充：</p><p>这题用了容器ArrayList，所以重写好Comparator接口后，排序时要用<code>Collections.sort(studentList, new StudentComparator());</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;要使自己的类拥有排序功能，就要实现comparator接口,重写compare方法。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>图+dfs+gcd</title>
    <link href="https://luxuantao.github.io/2017/09/15/%E5%9B%BE-dfs-gcd/"/>
    <id>https://luxuantao.github.io/2017/09/15/图-dfs-gcd/</id>
    <published>2017-09-15T09:55:11.000Z</published>
    <updated>2018-01-25T09:00:54.285Z</updated>
    
    <content type="html"><![CDATA[<hr><p>最近在做codeforces上面的题，感觉质量挺高的，而且区分难易，便于入手。今天做到的这题考察的东西不少，由于本人水平不济（其实是懒），只能看看别人写的代码，找到一个写的挺好的，多多学习。</p><a id="more"></a><p>原题链接：<a href="http://codeforces.com/problemset/problem/842/C" target="_blank" rel="external">Ilya And The Tree</a></p><p>Ilya is very fond of graphs, especially trees. During his last trip to the forest Ilya found a very interesting tree rooted at vertex 1. There is an integer number written on each vertex of the tree; the number written on vertex <em>i</em> is equal to <em>ai</em>.</p><p>Ilya believes that the beauty of the vertex <em>x</em> is the greatest common divisor of all numbers written on the vertices on the path from the root to <em>x</em>, including this vertex itself. In addition, Ilya can change the number in one arbitrary vertex to 0 or leave all vertices unchanged. Now for each vertex Ilya wants to know the maximum possible beauty it can have.</p><p>For each vertex the answer must be considered independently.</p><p>The beauty of the root equals to number written on it.</p><p>Input</p><p>First line contains one integer number <em>n</em> — the number of vertices in tree (1 ≤ <em>n</em> ≤ 2·105).</p><p>Next line contains <em>n</em> integer numbers <em>ai</em> (1 ≤ <em>i</em> ≤ <em>n</em>, 1 ≤ <em>ai</em> ≤ 2·105).</p><p>Each of next <em>n</em> - 1 lines contains two integer numbers <em>x</em> and <em>y</em> (1 ≤ <em>x</em>, <em>y</em> ≤ <em>n</em>, <em>x</em> ≠ <em>y</em>), which means that there is an edge (<em>x</em>, <em>y</em>) in the tree.</p><p>Output</p><p>Output <em>n</em> numbers separated by spaces, where <em>i</em>-th number equals to maximum possible beauty of vertex <em>i</em>.</p><p>Examples</p><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">6 2</div><div class="line">1 2</div></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6 6</div></pre></td></tr></table></figure><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">6 2 3</div><div class="line">1 2</div><div class="line">1 3</div></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6 6 6</div></pre></td></tr></table></figure><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">10</div></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10</div></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV=<span class="number">500000</span>+<span class="number">3</span>;</div><div class="line"><span class="keyword">int</span> V, a[MAXV];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXV];<span class="comment">//图的邻接矩阵表示</span></div><div class="line"><span class="keyword">int</span> path[MAXV];<span class="comment">//从根节点到当前结点路径的gcd，没用0</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp[MAXV];<span class="comment">//从根节点到当前结点所有可以得到的gcd，用了0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(~fa)<span class="comment">//非根节点</span></div><div class="line">    &#123;</div><div class="line">        path[u]=__gcd(path[fa], a[u]);</div><div class="line">        dp[u].push_back(path[fa]);<span class="comment">//把当前结点的权值变成0</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dp[fa].size();++i)</div><div class="line">            dp[u].push_back(__gcd(dp[fa][i], a[u]));</div><div class="line">        sort(dp[u].begin(), dp[u].end());</div><div class="line">        dp[u].erase(unique(dp[u].begin(), dp[u].end()), dp[u].end());<span class="comment">//去重</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span><span class="comment">//根节点</span></div><div class="line">    &#123;</div><div class="line">        path[u]=a[u];</div><div class="line">        dp[u].push_back(<span class="number">0</span>);</div><div class="line">        dp[u].push_back(a[u]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[u].size();++i)</div><div class="line">        <span class="keyword">if</span>(G[u][i]!=fa)</div><div class="line">            dfs(G[u][i], u);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;V);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=V;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;V;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=V;++i)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, dp[i].back(), i==V?<span class="string">'\n'</span>:<span class="string">' '</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>转自：<a href="http://blog.csdn.net/yasola/article/details/77711827" target="_blank" rel="external">http://blog.csdn.net/yasola/article/details/77711827</a></p><p>知识点补充：</p><ol><li><p><code>~-1</code>的结果是0。</p></li><li><p>if(一个负数) 是会运行后面的语句的。</p></li><li><p><code>__gcd(a,b)</code>今后直接拿来用，省得自己写了。</p></li><li><p><code>sort(dp[u].begin(), dp[u].end());</code></p><p><code>dp[u].erase(unique(dp[u].begin(), dp[u].end()), dp[u].end());//去重</code> </p><p>注意unique的用法，使用前要先排序，配合erase使用效果很好。</p><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;最近在做codeforces上面的题，感觉质量挺高的，而且区分难易，便于入手。今天做到的这题考察的东西不少，由于本人水平不济（其实是懒），只能看看别人写的代码，找到一个写的挺好的，多多学习。&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="OJ" scheme="https://luxuantao.github.io/tags/OJ/"/>
    
      <category term="算法" scheme="https://luxuantao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
