<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Luson&#39;s home</title>
  
  <subtitle>就怕你宁愿流泪望天却不昂首向前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luxuantao.github.io/"/>
  <updated>2019-03-28T11:40:30.432Z</updated>
  <id>https://luxuantao.github.io/</id>
  
  <author>
    <name>陆轩韬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++查缺补漏</title>
    <link href="https://luxuantao.github.io/2019/03/28/C-%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F/"/>
    <id>https://luxuantao.github.io/2019/03/28/C-查缺补漏/</id>
    <published>2019-03-28T11:33:29.000Z</published>
    <updated>2019-03-28T11:40:30.432Z</updated>
    
    <content type="html"><![CDATA[<p>这是本博客有史以来最长的一篇文章，总结了我从大一至今，遇到的几乎所有不易理解或是容易忘记的C++知识，可作为手册查阅，内容参考自清华大学郑莉教授的C++课程。</p><hr><a id="more"></a><h1 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h1><p>声明时使用关键字 inline</p><p>编译时在调用处用函数体进行替换，节省了参数传递、控制转移等开销</p><p>注意：</p><p>内联函数体内不能有循环语句和switch语句</p><p>内联函数的定义必须出现在内联函数第一次被调用之前</p><p>对内联函数不能进行异常接口声明</p><p>定义内联函数，可以显式用inline声明，也可以直接在类内定义好实现</p><p>编译器并不一定遵从我们的inline</p><h1 id="constexpr函数"><a href="#constexpr函数" class="headerlink" title="constexpr函数"></a>constexpr函数</h1><p>constexpr修饰的函数在其所有参数都是constexpr时，一定返回constexpr</p><p>函数体中必须有且仅有一条return语句</p><p>constexpr的变量的值必须是编译器在编译的时候就可以确定的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">get_size</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">20</span>; &#125;</div><div class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> foo = get_size();  <span class="comment">//正确：foo是一个常量表达式</span></div></pre></td></tr></table></figure><h1 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h1><p>通过形参的个数不同或者类型不同进行区分</p><p>无法通过返回值区分</p><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面两个都是默认构造函数，如在类中同时出现，将产生编译错误：</span></div><div class="line">Clock();</div><div class="line">Clock(<span class="keyword">int</span> newH=<span class="number">0</span>,<span class="keyword">int</span> newM=<span class="number">0</span>,<span class="keyword">int</span> newS=<span class="number">0</span>);</div></pre></td></tr></table></figure><h2 id="隐含生成的构造函数"><a href="#隐含生成的构造函数" class="headerlink" title="隐含生成的构造函数"></a>隐含生成的构造函数</h2><p>如果程序中未定义构造函数，编译器将在需要时自动生成一个默认构造函数</p><p>参数列表为空，不为数据成员设置初始值</p><p>如果类内定义了成员的初始值，则使用类内定义的初始值</p><p>如果没有定义类内的初始值，则以默认方式初始化</p><p>基本类型的数据默认初始化的值是不确定的</p><h2 id="default"><a href="#default" class="headerlink" title="=default"></a>=default</h2><p>如果程序中已定义构造函数，默认情况下编译器就不再隐含生成默认构造函数。如果此时依然希望编译器隐含生成默认构造函数，可以使用<code>=default</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">   Clock() =<span class="keyword">default</span>; <span class="comment">//指示编译器提供默认构造函数</span></div><div class="line">   Clock(<span class="keyword">int</span> newH, <span class="keyword">int</span> newM, <span class="keyword">int</span> newS);     <span class="comment">//构造函数</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">   <span class="keyword">int</span> hour, minute, second;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="委托构造函数"><a href="#委托构造函数" class="headerlink" title="委托构造函数"></a>委托构造函数</h2><p>类中往往有多个构造函数，只是参数表和初始化列表不同，其初始化算法都是相同的，这时，为了避免代码重复，可以使用委托构造函数</p><p>不使用委托构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数</span></div><div class="line">Clock(<span class="keyword">int</span> newH, <span class="keyword">int</span> newM, <span class="keyword">int</span> newS) : hour(newH),minute(newM),second(newS) &#123;&#125;</div><div class="line"><span class="comment">//默认构造函数</span></div><div class="line">Clock() : hour(<span class="number">0</span>),minute(<span class="number">0</span>),second(<span class="number">0</span>) &#123;&#125;</div></pre></td></tr></table></figure><p>使用委托构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Clock(<span class="keyword">int</span> newH, <span class="keyword">int</span> newM, <span class="keyword">int</span> newS) : hour(newH),minute(newM),second(newS) &#123;&#125;</div><div class="line">Clock(): Clock(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &#123;&#125;</div></pre></td></tr></table></figure><h2 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h2><p>复制构造函数是一种特殊的构造函数，其形参为本类的对象引用，作用是用一个已存在的对象去初始化同类型的新对象</p><p>定义一个对象时，以本类另一个对象作为初始值，发生复制构造</p><p>如果函数的形参是类的对象，调用函数时，将使用实参对象初始化形参对象，发生复制构造</p><p>如果函数的返回值是类的对象，函数执行完成返回主调函数时，将使用return语句中的对象初始化一个临时无名对象，传递给主调函数，此时发生复制构造</p><h2 id="隐含的复制构造函数"><a href="#隐含的复制构造函数" class="headerlink" title="隐含的复制构造函数"></a>隐含的复制构造函数</h2><p>如果程序员没有为类声明拷贝初始化构造函数，则编译器自己生成一个隐含的复制构造函数</p><p>这个构造函数执行的功能是：用作为初始值的对象的每个数据成员的值，初始化将要建立的对象的对应数据成员（浅拷贝）</p><h2 id="delete"><a href="#delete" class="headerlink" title="=delete"></a>=delete</h2><p>C++11做法：用<code>=delete</code>指示编译器不生成默认复制构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span>   <span class="comment">//Point 类的定义</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Point(<span class="keyword">int</span> xx=<span class="number">0</span>, <span class="keyword">int</span> yy=<span class="number">0</span>) &#123; x = xx; y = yy; &#125;    <span class="comment">//构造函数，内联</span></div><div class="line">    Point(<span class="keyword">const</span> Point&amp; p) =<span class="keyword">delete</span>;  <span class="comment">//指示编译器不生成默认复制构造函数</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> x, y; <span class="comment">//私有数据</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a>类的组合</h1><h2 id="构造组合类对象时的初始化次序"><a href="#构造组合类对象时的初始化次序" class="headerlink" title="构造组合类对象时的初始化次序"></a>构造组合类对象时的初始化次序</h2><p>首先对构造函数初始化列表中列出的成员（包括基本类型成员和对象成员）进行初始化，初始化次序是成员在类体中定义的次序</p><p>成员对象构造函数调用顺序：按对象成员的声明顺序，先声明者先构造</p><p>初始化列表中未出现的成员对象：调用用默认构造函数（即无形参的）初始化</p><p>处理完初始化列表之后，再执行构造函数的函数体</p><h2 id="前向引用声明"><a href="#前向引用声明" class="headerlink" title="前向引用声明"></a>前向引用声明</h2><p>如果需要在某个类的声明之前，引用该类，则应进行前向引用声明</p><p>前向引用声明只为程序引入一个标识符，但具体声明在其他地方</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span>  <span class="comment">//前向引用声明</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(B b)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(A a)</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>使用前向引用声明虽然可以解决一些问题，但它并不是万能的</p><p>在提供一个完整的类声明之前，不能声明该类的对象，也不能在内联成员函数中使用该类的对象</p><p>当使用前向引用声明时，只能使用被声明的符号，而不能涉及类的任何细节</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fred</span>;</span> <span class="comment">//前向引用声明</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Barney</span> &#123;</span></div><div class="line">   Fred x; <span class="comment">//错误：类Fred的声明尚不完善</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fred</span> &#123;</span></div><div class="line">   Barney y;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="联合体"><a href="#联合体" class="headerlink" title="联合体"></a>联合体</h1><p>成员共用同一组内存单元</p><p>任何两个成员不会同时有效</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExamInfo</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="built_in">string</span> name;<span class="comment">//课程名称</span></div><div class="line"><span class="keyword">enum</span> &#123; GRADE, PASS, PERCENTAGE &#125; mode;<span class="comment">//计分方式</span></div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">char</span> grade;<span class="comment">//等级制的成绩</span></div><div class="line"><span class="keyword">bool</span> pass;<span class="comment">//只记是否通过课程的成绩</span></div><div class="line"><span class="keyword">int</span> percent;<span class="comment">//百分制的成绩</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="comment">//三种构造函数，分别用等级、是否通过和百分初始化</span></div><div class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">char</span> grade)</div><div class="line">: name(name), mode(GRADE), grade(grade) &#123; &#125;</div><div class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">bool</span> pass)</div><div class="line">: name(name), mode(PASS), pass(pass) &#123; &#125;</div><div class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">int</span> percent)</div><div class="line">: name(name), mode(PERCENTAGE), percent(percent) &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> ExamInfo::show() &#123;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">": "</span>;</div><div class="line"><span class="keyword">switch</span> (mode) &#123;</div><div class="line">  <span class="keyword">case</span> GRADE: <span class="built_in">cout</span> &lt;&lt; grade;  <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> PASS: <span class="built_in">cout</span> &lt;&lt; (pass ? <span class="string">"PASS"</span> : <span class="string">"FAIL"</span>); <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> PERCENTAGE: <span class="built_in">cout</span> &lt;&lt; percent; <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="function">ExamInfo <span class="title">course1</span><span class="params">(<span class="string">"English"</span>, <span class="string">'B'</span>)</span></span>;</div><div class="line"><span class="function">ExamInfo <span class="title">course2</span><span class="params">(<span class="string">"Calculus"</span>, <span class="literal">true</span>)</span></span>;</div><div class="line"><span class="function">ExamInfo <span class="title">course3</span><span class="params">(<span class="string">"C++ Programming"</span>, <span class="number">85</span>)</span></span>;</div><div class="line">course1.show();</div><div class="line">course2.show();</div><div class="line">course3.show();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//运行结果：</span></div><div class="line"><span class="comment">//English: B</span></div><div class="line"><span class="comment">//Calculus: PASS</span></div><div class="line"><span class="comment">//C++ Programming: 85</span></div></pre></td></tr></table></figure><h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//enum class 枚举类型名: 底层类型 &#123;枚举值列表&#125;;</span></div><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> &#123;</span> General, Light, Medium, Heavy&#125;;</div><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span>:</span> <span class="keyword">char</span> &#123; General, Light, Medium, Heavy&#125;;</div><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> &#123;</span> General=<span class="number">1</span>, Pistol, MachineGun, Cannon&#125;;</div></pre></td></tr></table></figure><p>枚举类的优势</p><p>强作用域，其作用域限制在枚举类中</p><p>转换限制，枚举类对象不可以与整型隐式地互相转换。</p><p>可以指定底层类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Side</span>&#123;</span> Right, Left &#125;;</div><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Thing</span>&#123;</span> Wrong, Right &#125;;  <span class="comment">//不冲突</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Side s = Side::Right;</div><div class="line">    Thing w = Thing::Wrong;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; (s == w) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//编译错误，无法直接比较不同枚举类</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="类的友元"><a href="#类的友元" class="headerlink" title="类的友元"></a>类的友元</h1><p>友元是C++提供的一种破坏数据封装和数据隐藏的机制</p><p>通过将一个模块声明为另一个模块的友元，一个模块能够引用到另一个模块中本是被隐藏的信息</p><p>为了确保数据的完整性，及数据封装与隐藏的原则，建议尽量不使用或少使用友元</p><h2 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h2><p>友元函数是在类声明中由关键字friend修饰说明的非成员函数，在它的函数体中能够通过对象名访问 private 和protected成员</p><p>作用：增加灵活性，使程序员可以在封装和快速性方面做合理选择</p><p>访问对象中的成员必须通过对象名</p><h2 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h2><p>若一个类为另一个类的友元，则此类的所有成员都能访问对方类的私有成员</p><p>声明语法：将友元类名在另一个类中使用friend修饰说明</p><h2 id="类的友元关系是单向的"><a href="#类的友元关系是单向的" class="headerlink" title="类的友元关系是单向的"></a>类的友元关系是单向的</h2><p>如果声明B类是A类的友元，B类的成员函数就可以访问A类的私有和保护数据，但A类的成员函数却不能访问B类的私有、保护数据</p><h1 id="常类型"><a href="#常类型" class="headerlink" title="常类型"></a>常类型</h1><p>对于既需要共享、又需要防止改变的数据应该声明为<strong>常类型</strong>（用const进行修饰）</p><p>const关键字可以被用于参与对重载函数的区分</p><p>通过常对象只能调用它的常成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  R(<span class="keyword">int</span> r1, <span class="keyword">int</span> r2) : r1(r1), r2(r2) &#123; &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">int</span> r1, r2;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> R::print() &#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; r1 &lt;&lt; <span class="string">":"</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> R::print() <span class="keyword">const</span> &#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; r1 &lt;&lt; <span class="string">";"</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">R <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">4</span>)</span></span>;</div><div class="line">  a.print(); <span class="comment">//调用void print()</span></div><div class="line">  <span class="function"><span class="keyword">const</span> R <span class="title">b</span><span class="params">(<span class="number">20</span>,<span class="number">52</span>)</span></span>; </div><div class="line">  b.print(); <span class="comment">//调用void print() const</span></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 常成员函数可以被非常对象调用，但常对象不可调用非常成员函数</p><h1 id="多文件结构"><a href="#多文件结构" class="headerlink" title="多文件结构"></a>多文件结构</h1><h2 id="外部变量"><a href="#外部变量" class="headerlink" title="外部变量"></a>外部变量</h2><p>如果一个变量除了在定义它的源文件中可以使用外，还能被其它文件使用，那么就称这个变量是外部变量</p><p>文件作用域中定义的变量，默认情况下都是外部变量，但在其它文件中如果需要使用这一变量，需要用extern关键字加以声明</p><h2 id="外部函数"><a href="#外部函数" class="headerlink" title="外部函数"></a>外部函数</h2><p>在所有类之外声明的函数（也就是非成员函数），都是具有文件作用域的</p><p>这样的函数都可以在不同的编译单元中被调用，只要在调用之前进行引用性声明（即声明函数原型）即可。也可以在声明函数原型或定义函数时用extern修饰，其效果与不加修饰的默认状态是一样的</p><h1 id="编译预处理指令"><a href="#编译预处理指令" class="headerlink" title="编译预处理指令"></a>编译预处理指令</h1><p>预处理在编译前进行</p><p>每条预处理指令必须单独占用一行</p><p>预处理指令可以出现在程序的任何位置</p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="空值nullptr"><a href="#空值nullptr" class="headerlink" title="空值nullptr"></a>空值nullptr</h2><ul><li><p>以往用0或者NULL去表达空指针的问题：</p><p>C/C++的NULL宏是个被有很多潜在BUG的宏。因为有的库把其定义成整数0，有的定义成 (void*)0。在C的时代还好。但是在C++的时代，这就会引发很多问题</p></li><li><p>C++11使用nullptr关键字，是表达更准确，类型安全的空指针</p></li></ul><h2 id="指向常量的指针"><a href="#指向常量的指针" class="headerlink" title="指向常量的指针"></a>指向常量的指针</h2><p>不能通过指向常量的指针改变所指对象的值，但指针本身可以改变，可以指向另外的对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p1 = &amp;a; <span class="comment">//p1是指向常量的指针</span></div><div class="line"><span class="keyword">int</span> b;</div><div class="line">p1 = &amp;b; <span class="comment">//正确，p1本身的值可以改变</span></div><div class="line">*p1 = <span class="number">1</span>; <span class="comment">//编译时出错，不能通过p1改变所指的对象</span></div></pre></td></tr></table></figure><h2 id="指针类型的常量"><a href="#指针类型的常量" class="headerlink" title="指针类型的常量"></a>指针类型的常量</h2><p>若声明指针常量，则指针本身的值不能被改变。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a;</div><div class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</div><div class="line">p2 = &amp;b; <span class="comment">//错误，p2是指针常量，值不能改变</span></div></pre></td></tr></table></figure><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>) = f;</div><div class="line">   <span class="built_in">cout</span>&lt;&lt;p(<span class="number">1</span>, <span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><p>显式管理内存在是能上有优势，但容易出错</p><p>C++11提供智能指针的数据类型，对垃圾回收技术提供了一些支持，实现一定程度的内存管理</p><ul><li>unique_ptr ：不允许多个指针共享资源，可以用标准库中的move函数转移指针</li><li>shared_ptr ：多个指针共享资源</li><li>weak_ptr ：可复制shared_ptr，但其构造或者释放对资源不产生影响</li></ul><h1 id="移动构造"><a href="#移动构造" class="headerlink" title="移动构造"></a>移动构造</h1><p>移动构造可以减少不必要的复制，带来性能上的提升</p><p>C++11之前，如果要将源对象的状态转移到目标对象只能通过复制。在某些情况下，我们没有必要复制对象——只需要移动它们</p><p>有可被利用的临时对象时，触发移动构造</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数返回含有指针成员的对象</span></div><div class="line"><span class="comment">//将要返回的局部对象转移到主调函数，省去了构造和删除临时对象的过程</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntNum</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">IntNum(<span class="keyword">int</span> x = <span class="number">0</span>) : xptr(<span class="keyword">new</span> <span class="keyword">int</span>(x))&#123; <span class="comment">//构造函数</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line">IntNum(<span class="keyword">const</span> IntNum &amp; n) : xptr(<span class="keyword">new</span> <span class="keyword">int</span>(*n.xptr))&#123;<span class="comment">//复制构造函数</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling copy constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//&amp;&amp;是右值引用</span></div><div class="line"><span class="comment">//函数返回的临时变量是右值</span></div><div class="line">IntNum(IntNum &amp;&amp; n): xptr(n.xptr)&#123; <span class="comment">//移动构造函数</span></div><div class="line">n.xptr = <span class="literal">nullptr</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling move constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line">~IntNum()&#123; <span class="comment">//析构函数</span></div><div class="line">    <span class="keyword">delete</span> xptr;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destructing..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="keyword">int</span> *xptr;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//返回值为IntNum类对象</span></div><div class="line"><span class="function">IntNum <span class="title">getNum</span><span class="params">()</span> </span>&#123;</div><div class="line">    IntNum a;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; getNum().getInt() &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">运行结果：</span></div><div class="line"><span class="comment">Calling constructor...</span></div><div class="line"><span class="comment">Calling move constructor...</span></div><div class="line"><span class="comment">Destructing...  //这里释放了nullptr</span></div><div class="line"><span class="comment">0</span></div><div class="line"><span class="comment">Destructing...</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h2 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h2><p>左值和右值都是针对表达式而言的</p><p>左值是指表达式结束后依然存在的持久对象</p><p>右值指表达式结束时就不再存在的临时对象——显然右值不可以被取地址</p><h1 id="读入字符串"><a href="#读入字符串" class="headerlink" title="读入字符串"></a>读入字符串</h1><p>用cin的&gt;&gt;操作符输入字符串，会以空格作为分隔符，空格后的内容会在下一回输入时被读取</p><p>getline可以输入整行字符串（要包string头文件），例如：<code>getline(cin, s2);</code></p><p>输入字符串时，可以使用其它分隔符作为字符串结束的标志（例如逗号、分号），将分隔符作为getline的第3个参数即可，例如：<code>getline(cin, s2, &#39;,&#39;);</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</div><div class="line">        <span class="built_in">string</span> city, state;</div><div class="line">        getline(<span class="built_in">cin</span>, city, <span class="string">','</span>);</div><div class="line">        getline(<span class="built_in">cin</span>, state);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"City:"</span> &lt;&lt; city &lt;&lt; “ State:<span class="string">" &lt;&lt; state &lt;&lt; endl;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">return 0;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">/*</span></div><div class="line"><span class="string">运行结果：</span></div><div class="line"><span class="string">Beijing,China</span></div><div class="line"><span class="string">City: Beijing State: China</span></div><div class="line"><span class="string">San Francisco,the United States</span></div><div class="line"><span class="string">City: San Francisco State: the United States</span></div><div class="line"><span class="string">*/</span></div></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="公有继承-public"><a href="#公有继承-public" class="headerlink" title="公有继承(public)"></a>公有继承(public)</h2><p>继承的访问控制</p><ul><li>基类的public和protected成员：访问属性在派生类中保持不变</li><li>基类的private成员：不可直接访问</li></ul><p>访问权限</p><ul><li>派生类中的成员函数：可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员</li><li>通过派生类的对象：只能访问public成员</li></ul><h2 id="私有继承-private"><a href="#私有继承-private" class="headerlink" title="私有继承(private)"></a>私有继承(private)</h2><p>继承的访问控制</p><ul><li>基类的<strong>public</strong>和<strong>protected成员：都以private</strong>身份出现在派生类中</li><li>基类的private成员：<strong>不可直接访问</strong></li></ul><p>访问权限</p><ul><li>派生类中的成员函数：可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员</li><li>通过派生类的对象：不能直接访问从基类继承的任何成员</li></ul><h2 id="保护继承-protected"><a href="#保护继承-protected" class="headerlink" title="保护继承(protected)"></a>保护继承(protected)</h2><p>继承的访问控制</p><ul><li>基类的<strong>public</strong>和<strong>protected成员：都以protected</strong>身份出现在派生类中</li><li>基类的<strong>private</strong>成员：<strong>不可直接访问</strong></li></ul><p>访问权限</p><ul><li>派生类中的成员函数：可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员</li><li>通过派生类的对象：不能直接访问从基类继承的任何成员</li></ul><p>protected 成员的特点与作用</p><ul><li>对建立其所在类对象的模块来说，它与 private 成员的性质相同</li><li>对于其派生类来说，它与 public 成员的性质相同</li><li>既实现了数据隐藏，又方便继承，实现代码重用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> a;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setB</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> b;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A, <span class="keyword">private</span> B&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setC</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> c;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">void</span> A::setA(<span class="keyword">int</span> x)&#123;</div><div class="line">    a = x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> B::setB(<span class="keyword">int</span> x)&#123;</div><div class="line">    b = x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> C::setC(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)&#123;</div><div class="line">    setA(x);</div><div class="line">    setB(y);</div><div class="line">    c = z;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    C obj;</div><div class="line">    obj.setA(<span class="number">5</span>); <span class="comment">// 正确</span></div><div class="line">    obj.setB(<span class="number">6</span>); <span class="comment">// 错误</span></div><div class="line">    obj.setC(<span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>); <span class="comment">// 正确</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="派生类的构造函数"><a href="#派生类的构造函数" class="headerlink" title="派生类的构造函数"></a>派生类的构造函数</h1><p>默认情况</p><ul><li>基类的构造函数不被继承</li><li>派生类需要定义自己的构造函数</li></ul><p>C++11规定</p><ul><li><p>可用using语句继承基类构造函数</p></li><li><p>但是只能初始化从基类继承的成员</p><p>派生类新增成员可以通过类内初始值进行初始化</p></li><li><p>语法形式：</p><p>using B::B;</p></li></ul><h2 id="多继承且有对象成员时派生的构造函数定义语法"><a href="#多继承且有对象成员时派生的构造函数定义语法" class="headerlink" title="多继承且有对象成员时派生的构造函数定义语法"></a>多继承且有对象成员时派生的构造函数定义语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">派生类名::派生类名(形参表):</div><div class="line">基类名1(参数), 基类名2(参数), ..., 基类名n(参数), </div><div class="line">本类成员（含对象成员）初始化列表</div><div class="line">&#123;</div><div class="line">        //其他初始化</div><div class="line">&#125;；</div></pre></td></tr></table></figure><h2 id="构造函数的执行顺序"><a href="#构造函数的执行顺序" class="headerlink" title="构造函数的执行顺序"></a>构造函数的执行顺序</h2><ol><li><p>调用基类构造函数</p><p>顺序按照它们被继承时声明的顺序（从左向右）</p></li><li><p>对初始化列表中的成员进行初始化</p><p>顺序按照它们在类中定义的顺序</p><p>对象成员初始化时自动调用其所属类的构造函数，由初始化列表提供参数</p></li><li><p>执行派生类的构造函数体中的内容</p></li></ol><h1 id="派生类复制构造函数"><a href="#派生类复制构造函数" class="headerlink" title="派生类复制构造函数"></a>派生类复制构造函数</h1><h2 id="派生类未定义复制构造函数的情况"><a href="#派生类未定义复制构造函数的情况" class="headerlink" title="派生类未定义复制构造函数的情况"></a>派生类未定义复制构造函数的情况</h2><p>编译器会在需要时生成一个隐含的复制构造函数</p><p>先调用基类的复制构造函数</p><p>再为派生类新增的成员执行复制</p><h2 id="派生类定义了复制构造函数的情况"><a href="#派生类定义了复制构造函数的情况" class="headerlink" title="派生类定义了复制构造函数的情况"></a>派生类定义了复制构造函数的情况</h2><p>一般都要为基类的复制构造函数传递参数</p><p>复制构造函数只能接受一个参数，既用来初始化派生类定义的成员，也将被传递给基类的复制构造函数</p><p>基类的复制构造函数形参类型是基类对象的引用，实参可以是派生类对象的引用</p><p>例如: <code>C::C(const C &amp;c1): B(c1) {…}</code></p><h1 id="派生类的析构函数"><a href="#派生类的析构函数" class="headerlink" title="派生类的析构函数"></a>派生类的析构函数</h1><p>析构函数不被继承，派生类如果需要，要自行声明析构函数</p><p>声明方法与无继承关系时类的析构函数相同</p><p>不需要显式地调用基类的析构函数，系统会自动隐式调用</p><p>先执行派生类析构函数的函数体，再调用基类的析构函数</p><h1 id="访问从基类继承的成员"><a href="#访问从基类继承的成员" class="headerlink" title="访问从基类继承的成员"></a>访问从基类继承的成员</h1><p>当派生类与基类中有相同成员时：</p><ul><li>若未特别限定，则通过派生类对象使用的是派生类中的同名成员</li><li>如要通过派生类对象访问基类中被隐藏的同名成员，应使用基类名和作用域操作符（::）来限定</li></ul><p>如果从不同基类继承了同名成员，但是在派生类中没有定义同名成员，“<strong>派生类对象名或引用名.成员名</strong>”、“<strong>派生类指针-&gt;成员名</strong>”访问成员存在二义性问题</p><ul><li>解决方式：用类名限定</li></ul><h1 id="虚基类"><a href="#虚基类" class="headerlink" title="虚基类"></a>虚基类</h1><p>需要解决的问题</p><ul><li>当派生类从多个基类派生，而这些基类又共同基类，则在访问此共同基类中的成员时，将产生冗余，并有可能因冗余带来不一致性</li></ul><p>虚基类声明</p><ul><li>以virtual说明基类继承方式</li><li>例：<code>class B1:virtual public B</code></li></ul><p>作用</p><ul><li>主要用来解决多继承时可能发生的对同一基类继承多次而产生的二义性问题</li><li>为最远的派生类提供唯一的基类成员，而不重复产生多次复制</li></ul><p>注意：</p><ul><li>在第一级继承时就要将共同基类设计为虚基类</li></ul><h2 id="虚基类及其派生类构造函数"><a href="#虚基类及其派生类构造函数" class="headerlink" title="虚基类及其派生类构造函数"></a>虚基类及其派生类构造函数</h2><p>建立对象时所指定的类称为<strong>最远派生类</strong></p><p>虚基类的成员是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的</p><p>在整个继承结构中，直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化表中为虚基类的构造函数列出参数。如果未列出，则表示调用该虚基类的默认构造函数</p><p>在建立对象时，只有最远派生类的构造函数调用虚基类的构造函数，其他类对虚基类构造函数的调用被忽略</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base0</span> &#123;</span>   </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Base0(<span class="keyword">int</span> var) : var0(var) &#123; &#125;</div><div class="line">    <span class="keyword">int</span> var0;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun0</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Member of Base0"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Base0 &#123;</div><div class="line"><span class="keyword">public</span>: </div><div class="line">    Base1(<span class="keyword">int</span> var) : Base0(var) &#123; &#125;</div><div class="line">    <span class="keyword">int</span> var1;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Base0 &#123; </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Base2(<span class="keyword">int</span> var) : Base0(var) &#123; &#125;</div><div class="line">    <span class="keyword">int</span> var2;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Derived(<span class="keyword">int</span> var) : Base0(var), Base1(var), Base2(var) &#123; &#125;</div><div class="line">    <span class="keyword">int</span> var;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span></div><div class="line"><span class="function">   </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Member of Derived"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    <span class="comment">//程序主函数</span></div><div class="line">    <span class="function">Derived <span class="title">d</span><span class="params">(<span class="number">1</span>)</span></span>;</div><div class="line">    d.var0 = <span class="number">2</span>; <span class="comment">//直接访问虚基类的数据成员</span></div><div class="line">    d.fun0();   <span class="comment">//直接访问虚基类的函数成员</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><h2 id="双目运算符重载规则"><a href="#双目运算符重载规则" class="headerlink" title="双目运算符重载规则"></a>双目运算符重载规则</h2><p>如果要重载 B 为类成员函数，使之能够实现表达式 oprd1 B oprd2，其中 oprd1 为A 类对象，则 B 应被重载为 A 类的成员函数，形参类型应该是 oprd2 所属的类型</p><p>经重载后，表达式 oprd1 B oprd2 相当于 oprd1.operator B(oprd2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Complex(<span class="keyword">double</span> r = <span class="number">0.0</span>, <span class="keyword">double</span> i = <span class="number">0.0</span>) : real(r), imag(i) &#123; &#125;</div><div class="line">    <span class="comment">//运算符+重载成员函数</span></div><div class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;c2) <span class="keyword">const</span>;</div><div class="line">    <span class="comment">//运算符-重载成员函数</span></div><div class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp;c2) <span class="keyword">const</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">const</span></span>;   <span class="comment">//输出复数</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">double</span> real;    <span class="comment">//复数实部</span></div><div class="line">    <span class="keyword">double</span> imag;    <span class="comment">//复数虚部</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//复数类加减法运算重载为成员函数</span></div><div class="line">Complex Complex::<span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;c2) <span class="keyword">const</span>&#123;</div><div class="line">  <span class="comment">//创建一个临时无名对象作为返回值 </span></div><div class="line">  <span class="keyword">return</span> Complex(real+c2.real, imag+c2.imag); </div><div class="line">&#125;</div><div class="line"></div><div class="line">Complex Complex::<span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp;c2) <span class="keyword">const</span>&#123;</div><div class="line"> <span class="comment">//创建一个临时无名对象作为返回值</span></div><div class="line">    <span class="keyword">return</span> Complex(real-c2.real, imag-c2.imag); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Complex::display() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;real&lt;&lt;<span class="string">", "</span>&lt;&lt;imag&lt;&lt;<span class="string">")"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//复数类加减法运算重载为成员函数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Complex c1(5, 4), c2(2, 10), c3;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 = "</span>; c1.display();</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c2 = "</span>; c2.display();</div><div class="line">    c3 = c1 - c2;   <span class="comment">//使用重载运算符完成复数减法</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c3 = c1 - c2 = "</span>; c3.display();</div><div class="line">    c3 = c1 + c2;   <span class="comment">//使用重载运算符完成复数加法</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c3 = c1 + c2 = "</span>; c3.display();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="前置单目运算符重载规则"><a href="#前置单目运算符重载规则" class="headerlink" title="前置单目运算符重载规则"></a>前置单目运算符重载规则</h2><p>如果要重载 U 为类成员函数，使之能够实现表达式 U oprd，其中 oprd 为A类对象，则 U 应被重载为 A 类的成员函数，无形参。</p><p>经重载后，表达式 U oprd 相当于 oprd.operator U()</p><h2 id="后置单目运算符-和–重载规则"><a href="#后置单目运算符-和–重载规则" class="headerlink" title="后置单目运算符 ++和–重载规则"></a>后置单目运算符 ++和–重载规则</h2><p>如果要重载 ++或–为类成员函数，使之能够实现表达式 oprd++ 或 oprd– ，其中 oprd 为A类对象，则 ++或– 应被重载为 A 类的成员函数，且具有一个 int 类型形参。</p><p>经重载后，表达式 oprd++ 相当于 oprd.operator ++(0)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> &#123;</span><span class="comment">//时钟类定义</span></div><div class="line"><span class="keyword">public</span>: </div><div class="line">    Clock(<span class="keyword">int</span> hour = <span class="number">0</span>, <span class="keyword">int</span> minute = <span class="number">0</span>, <span class="keyword">int</span> second = <span class="number">0</span>);</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">  <span class="comment">//前置单目运算符重载</span></div><div class="line">    Clock&amp; <span class="keyword">operator</span> ++ ();</div><div class="line">  <span class="comment">//后置单目运算符重载</span></div><div class="line">    Clock <span class="keyword">operator</span> ++ (<span class="keyword">int</span>);    </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> hour, minute, second;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Clock::Clock(<span class="keyword">int</span> hour, <span class="keyword">int</span> minute, <span class="keyword">int</span> second) &#123;    </div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt;= hour &amp;&amp; hour &lt; <span class="number">24</span> &amp;&amp; <span class="number">0</span> &lt;= minute &amp;&amp; minute &lt; <span class="number">60</span></div><div class="line">        &amp;&amp; <span class="number">0</span> &lt;= second &amp;&amp; second &lt; <span class="number">60</span>) &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;hour = hour;</div><div class="line">        <span class="keyword">this</span>-&gt;minute = minute;</div><div class="line">        <span class="keyword">this</span>-&gt;second = second;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Time error!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> Clock::showTime() <span class="keyword">const</span> &#123;  <span class="comment">//显示时间</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; hour &lt;&lt; <span class="string">":"</span> &lt;&lt; minute &lt;&lt; <span class="string">":"</span> &lt;&lt; second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//重载前置++和后置++为时钟类成员函数</span></div><div class="line">Clock &amp; Clock::<span class="keyword">operator</span> ++ () &#123; </div><div class="line">    second++;</div><div class="line">    <span class="keyword">if</span> (second &gt;= <span class="number">60</span>) &#123;</div><div class="line">        second -= <span class="number">60</span>;  minute++;</div><div class="line">        <span class="keyword">if</span> (minute &gt;= <span class="number">60</span>) &#123;</div><div class="line">          minute -= <span class="number">60</span>; hour = (hour + <span class="number">1</span>) % <span class="number">24</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Clock Clock::<span class="keyword">operator</span> ++ (<span class="keyword">int</span>) &#123;</div><div class="line">    <span class="comment">//注意形参表中的整型参数</span></div><div class="line">    Clock old = *<span class="keyword">this</span>;</div><div class="line">    ++(*<span class="keyword">this</span>);  <span class="comment">//调用前置“++”运算符</span></div><div class="line">    <span class="keyword">return</span> old;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="function">Clock <span class="title">myClock</span><span class="params">(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>)</span></span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"First time output: "</span>;</div><div class="line">    myClock.showTime();</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Show myClock++:    "</span>;</div><div class="line">    (myClock++).showTime();</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Show ++myClock:    "</span>;</div><div class="line">    (++myClock).showTime();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="运算符重载为非成员函数"><a href="#运算符重载为非成员函数" class="headerlink" title="运算符重载为非成员函数"></a>运算符重载为非成员函数</h2><p>有些运算符不能重载为成员函数，例如二元运算符的左操作数不是对象，或者是不能由我们重载运算符的对象</p><h3 id="运算符重载为非成员函数的规则"><a href="#运算符重载为非成员函数的规则" class="headerlink" title="运算符重载为非成员函数的规则"></a>运算符重载为非成员函数的规则</h3><ul><li>函数的形参代表依自左至右次序排列的各操作数</li><li>参数个数=原操作数个数（后置++、–除外）</li><li>至少应该有一个自定义类型的参数</li><li>后置单目运算符 ++和–的重载函数，形参列表中要增加一个int，但不必写形参名</li><li>如果在运算符的重载函数中需要操作某类对象的私有成员，可以将此函数声明为该类的友元</li><li>双目运算符 B重载后，表达式oprd1 B oprd2等同于operator B(oprd1,oprd2 )</li><li>前置单目运算符 B重载后，表达式 B oprd等同于operator B(oprd )</li><li>后置单目运算符 ++和–重载后，表达式 oprd B等同于operator B(oprd,0 )</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//重载Complex的加减法和“&lt;&lt;”运算符为非成员函数</span></div><div class="line"><span class="comment">//将+、-（双目）重载为非成员函数，并将其声明为复数类的友元，两个操作数都是复数类的常引用。 • 将&lt;&lt;（双目）重载为非成员函数，并将其声明为复数类的友元，它的左操作数是std::ostream引用，右操作数为复数类的常引用，返回std::ostream引用</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">    Complex(<span class="keyword">double</span> r = <span class="number">0.0</span>, <span class="keyword">double</span> i = <span class="number">0.0</span>) : real(r), imag(i) &#123; &#125;  </div><div class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;c1, <span class="keyword">const</span> Complex &amp;c2);</div><div class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>-(<span class="keyword">const</span> Complex &amp;c1, <span class="keyword">const</span> Complex &amp;c2);</div><div class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Complex &amp;c);</div><div class="line">    <span class="keyword">private</span>:    </div><div class="line">    <span class="keyword">double</span> real;  <span class="comment">//复数实部</span></div><div class="line">    <span class="keyword">double</span> imag;  <span class="comment">//复数虚部</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;c1, <span class="keyword">const</span> Complex &amp;c2)&#123;</div><div class="line">    <span class="keyword">return</span> Complex(c1.real+c2.real, c1.imag+c2.imag); </div><div class="line">&#125;</div><div class="line">Complex <span class="keyword">operator</span>-(<span class="keyword">const</span> Complex &amp;c1, <span class="keyword">const</span> Complex &amp;c2)&#123;</div><div class="line">    <span class="keyword">return</span> Complex(c1.real-c2.real, c1.imag-c2.imag); </div><div class="line">&#125;</div><div class="line"></div><div class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Complex &amp;c)&#123;</div><div class="line">    out &lt;&lt; <span class="string">"("</span> &lt;&lt; c.real &lt;&lt; <span class="string">", "</span> &lt;&lt; c.imag &lt;&lt; <span class="string">")"</span>;</div><div class="line">    <span class="keyword">return</span> out;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </div><div class="line">    Complex c1(5, 4), c2(2, 10), c3;    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 = "</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c2 = "</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    c3 = c1 - c2;   <span class="comment">//使用重载运算符完成复数减法</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c3 = c1 - c2 = "</span> &lt;&lt; c3 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    c3 = c1 + c2;   <span class="comment">//使用重载运算符完成复数加法</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c3 = c1 + c2 = "</span> &lt;&lt; c3 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><ul><li>用virtual关键字说明的函数</li><li>虚函数是实现运行时多态性基础</li><li>C++中的虚函数是动态绑定的函数</li><li>虚函数必须是非静态的成员函数，虚函数经过派生之后，就可以实现运行过程中的多态</li><li>一般成员函数可以是虚函数</li><li>构造函数不能是虚函数</li><li>析构函数可以是虚函数</li><li>虚函数声明只能出现在类定义中的函数原型声明中，而不能在成员函数实现的时候</li><li>在派生类中可以对基类中的成员函数进行覆盖</li><li>虚函数一般不声明为内联函数，因为对虚函数的调用需要动态绑定，而对内联函数的处理是静态的</li></ul><h2 id="virtual-关键字"><a href="#virtual-关键字" class="headerlink" title="virtual 关键字"></a>virtual 关键字</h2><ul><li>派生类可以不显式地用virtual声明虚函数，这时系统就会用以下规则来判断派生类的一个函数成员是不是虚函数：<ul><li>该函数是否与基类的虚函数有相同的名称、参数个数及对应参数类型</li><li>该函数是否与基类的虚函数有相同的返回值或者满足类型兼容规则的指针、引用型的返回值</li></ul></li><li>如果从名称、参数及返回值三个方面检查之后，派生类的函数满足上述条件，就会自动确定为虚函数。这时，派生类的虚函数便覆盖了基类的虚函数</li><li>派生类中的虚函数还会隐藏基类中同名函数的所有其它重载形式</li><li>一般习惯于在派生类的函数中也使用virtual关键字，以增加程序的可读性</li></ul><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><p>为什么需要虚析构函数？ - 可能通过基类指针删除派生类对象； - 如果你打算允许其他人通过基类指针调用对象的析构函数（通过delete这样做是正常的），就需要让基类的析构函数成为虚函数，否则执行delete的结果是不确定的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~Base();</div><div class="line">&#125;;</div><div class="line">Base::~Base()</div><div class="line">&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base "</span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~Derived();</div><div class="line">&#125;;</div><div class="line">Derived::~Derived()&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derived "</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(Base *b)</span></span>&#123;</div><div class="line">    <span class="keyword">delete</span> b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    Base *b = <span class="keyword">new</span> Derived();</div><div class="line">    fun(b);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="虚表与动态绑定"><a href="#虚表与动态绑定" class="headerlink" title="虚表与动态绑定"></a>虚表与动态绑定</h2><p>虚表</p><ul><li>每个多态类有一个虚表（virtual table）</li><li>虚表中有当前类的各个虚函数的入口地址</li><li>每个对象有一个指向当前类的虚表的指针（虚指针vptr）</li></ul><p>动态绑定的实现</p><ul><li>构造函数中为对象的虚指针赋值</li><li>通过多态类型的指针或引用调用成员函数时，通过虚指针找到虚表，进而找到所调用的虚函数的入口地址</li><li>通过该入口地址调用虚函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//在32位机器上，sizeof(A)为：4；在64位机器上，sizeof(A)为：8</span></div><div class="line"><span class="comment">//因为A中含有一个指向虚表的指针，在32位机器上，指针占4个字节；在64位机器上，指针占8个字节</span></div></pre></td></tr></table></figure><h1 id="抽象类和纯虚函数"><a href="#抽象类和纯虚函数" class="headerlink" title="抽象类和纯虚函数"></a>抽象类和纯虚函数</h1><p>纯虚函数是一个在基类中声明的虚函数，它在该基类中没有定义具体的操作内容，要求各派生类根据实际需要定义自己的版本，纯虚函数的声明格式为：virtual 函数类型 函数名(参数表) = 0;</p><p>带有纯虚函数的类称为抽象类</p><h2 id="抽象类作用"><a href="#抽象类作用" class="headerlink" title="抽象类作用"></a>抽象类作用</h2><ul><li>抽象类为抽象和设计的目的而声明</li><li>将有关的数据和行为组织在一个继承层次结构中，保证派生类具有要求的行为</li><li>对于暂时无法实现的函数，可以声明为纯虚函数，留给派生类去实现</li></ul><p>注意：</p><ul><li>抽象类只能作为基类来使用。</li><li>不能定义抽象类的对象。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span> </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;   <span class="comment">//纯虚函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span>:</span> <span class="keyword">public</span> Base1 &#123; </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">//覆盖基类的虚函数</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">void</span> Base2::display() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base2::display()"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base2 &#123; </div><div class="line"><span class="keyword">public</span>:</div><div class="line">     <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">//覆盖基类的虚函数</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">void</span> Derived::display() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derived::display()"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(Base1 *ptr)</span> </span>&#123; </div><div class="line">    ptr-&gt;display(); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </div><div class="line">    Base2 base2;    </div><div class="line">    Derived derived;    </div><div class="line">    fun(&amp;base2);    </div><div class="line">    fun(&amp;derived);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="override"><a href="#override" class="headerlink" title="override"></a>override</h1><p>C++11 引入显式函数覆盖，在编译期而非运行期捕获此类错误。 - 在虚函数显式重载中运用，编译器会检查基类是否存在一虚拟函数，与派生类中带有声明override的虚拟函数，有相同的函数签名（signature）；若不存在，则会回报错误</p><ul><li>多态行为的基础：基类声明虚函数，继承类声明一个函数覆盖该虚函数</li><li>覆盖要求： 函数签名（signatture）完全一致</li><li>函数签名包括：函数名 参数列表 const</li></ul><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><p>C++11提供final，用来避免类被继承，或是基类的函数被改写 例： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base1</span> <span class="title">final</span> &#123;</span> &#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived1</span> :</span> Base1 &#123; &#125;; <span class="comment">// 编译错误：Base1为final，不允许被继承</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base2</span> &#123;</span> <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> final</span>; &#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived2</span> :</span> Base2 &#123; <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>; <span class="comment">// 编译错误：Base2::f 为final，不允许被覆盖 &#125;;</span></div></pre></td></tr></table></figure><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>语法形式：</p><p>template &lt;模板参数表&gt;</p><p>模板参数表的内容：</p><ul><li>类型参数：class（或typename） 标识符</li><li>常量参数：类型说明符 标识符</li><li>模板参数：template &lt;参数表&gt; class标识符</li></ul><p>注意：</p><ul><li>一个函数模板并非自动可以处理所有类型的数据</li><li>只有能够进行函数模板中运算的类型，可以作为类型实参</li><li>自定义的类，需要重载模板中的运算符，才能作为类型实参</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;  //定义函数模板</span></div><div class="line"><span class="class"><span class="title">void</span> <span class="title">outputArray</span>(<span class="title">const</span> <span class="title">T</span> *<span class="title">array</span>, <span class="title">int</span> <span class="title">count</span>) &#123;</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">array</span>[i] &lt;&lt; <span class="string">" "</span>; <span class="comment">//如果数组元素是类的对象，需要该对象所属类重载了流插入运算符“&lt;&lt;”</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;     </div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> A_COUNT = <span class="number">8</span>, B_COUNT = <span class="number">8</span>, C_COUNT = <span class="number">20</span>;</div><div class="line">    <span class="keyword">int</span> a [A_COUNT] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;;</div><div class="line">    <span class="keyword">double</span> b[B_COUNT] = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span> &#125;;</div><div class="line">    <span class="keyword">char</span> c[C_COUNT] = <span class="string">"Welcome!"</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" a array contains:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    outputArray(a, A_COUNT);    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" b array contains:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    outputArray(b, B_COUNT);    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" c array contains:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    outputArray(c, C_COUNT);    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><p>使用类模板使用户可以为类声明一种模式，使得类中的某些数据成员、某些成员函数的参数、某些成员函数的返回值，能取任意类型（包括基本类型的和用户自定义类型）</p><p>类模板 template &lt;模板参数表&gt; class 类名 {类成员声明};</p><p>如果需要在类模板以外定义其成员函数，则要采用以下的形式： template &lt;模板参数表&gt; 类型名 类名&lt;模板参数标识符列表&gt;::函数名（参数表）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> id;       <span class="comment">//学号</span></div><div class="line">  <span class="keyword">float</span> gpa;    <span class="comment">//平均分</span></div><div class="line">&#125;; </div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">class</span> <span class="title">Store</span> &#123;</span><span class="comment">//类模板：实现对任意类型数据进行存取</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T item; <span class="comment">// item用于存放任意类型的数据</span></div><div class="line">    <span class="keyword">bool</span> haveValue;  <span class="comment">// haveValue标记item是否已被存入内容</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Store();</div><div class="line">    <span class="function">T &amp;<span class="title">getElem</span><span class="params">()</span></span>;   <span class="comment">//提取数据函数</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putElem</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>;  <span class="comment">//存入数据函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;  </span></div><div class="line"><span class="class"><span class="title">Store</span>&lt;T&gt;:</span>:Store(): haveValue(<span class="literal">false</span>) &#123; &#125; </div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">T</span> &amp;<span class="title">Store</span>&lt;T&gt;:</span>:getElem() &#123;</div><div class="line">    <span class="comment">//如试图提取未初始化的数据，则终止程序</span></div><div class="line">    <span class="keyword">if</span> (!haveValue) &#123;   </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No item present!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);    <span class="comment">//使程序完全退出，返回到操作系统。</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> item;        <span class="comment">// 返回item中存放的数据 </span></div><div class="line">&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">void</span> <span class="title">Store</span>&lt;T&gt;:</span>:putElem(<span class="keyword">const</span> T &amp;x) &#123;</div><div class="line">    <span class="comment">// 将haveValue 置为true，表示item中已存入数值   </span></div><div class="line">    haveValue = <span class="literal">true</span>;   </div><div class="line">    item = x;           <span class="comment">// 将x值存入item</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Store&lt;<span class="keyword">int</span>&gt; s1, s2;  </div><div class="line">    s1.putElem(<span class="number">3</span>);  </div><div class="line">    s2.putElem(<span class="number">-7</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; s1.getElem() &lt;&lt; <span class="string">"  "</span> &lt;&lt; s2.getElem() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    Student g = &#123; <span class="number">1000</span>, <span class="number">23</span> &#125;;</div><div class="line">    Store&lt;Student&gt; s3;</div><div class="line">    s3.putElem(g); </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The student id is "</span> &lt;&lt; s3.getElem().id &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    Store&lt;<span class="keyword">double</span>&gt; d;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Retrieving object D... "</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; d.getElem() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">   <span class="comment">//d未初始化，执行函数D.getElement()时导致程序终止</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="数组类模板"><a href="#数组类模板" class="headerlink" title="数组类模板"></a>数组类模板</h2><p>自己实现一个动态数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ARRAY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;  //数组类模板定义</span></div><div class="line"><span class="class"><span class="title">class</span> <span class="title">Array</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T* <span class="built_in">list</span>;        <span class="comment">//用于存放动态分配的数组内存首地址</span></div><div class="line">    <span class="keyword">int</span> size;       <span class="comment">//数组大小（元素个数）</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Array(<span class="keyword">int</span> sz = <span class="number">50</span>);     <span class="comment">//构造函数</span></div><div class="line">    Array(<span class="keyword">const</span> Array&lt;T&gt; &amp;a);   <span class="comment">//复制构造函数</span></div><div class="line">    ~Array();           <span class="comment">//析构函数</span></div><div class="line">    Array&lt;T&gt; &amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Array&lt;T&gt; &amp;rhs);    <span class="comment">//重载"=“</span></div><div class="line">    T &amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> i); <span class="comment">//重载"[]”</span></div><div class="line">    <span class="keyword">const</span> T &amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> i) <span class="keyword">const</span>;     <span class="comment">//重载"[]”常函数</span></div><div class="line">    <span class="keyword">operator</span> T * ();        <span class="comment">//重载到T*类型的转换</span></div><div class="line">    <span class="keyword">operator</span> <span class="keyword">const</span> T * () <span class="keyword">const</span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> <span class="keyword">const</span></span>;        <span class="comment">//取数组的大小</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> sz)</span></span>;        <span class="comment">//修改数组的大小</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">Array</span>&lt;T&gt;:</span>:Array(<span class="keyword">int</span> sz) &#123;<span class="comment">//构造函数</span></div><div class="line">    assert(sz &gt;= <span class="number">0</span>);<span class="comment">//sz为数组大小（元素个数），应当非负</span></div><div class="line">    size = sz;  <span class="comment">// 将元素个数赋值给变量size</span></div><div class="line">    <span class="built_in">list</span> = <span class="keyword">new</span> T [size];    <span class="comment">//动态分配size个T类型的元素空间</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">Array</span>&lt;T&gt;:</span>:~Array() &#123; <span class="comment">//析构函数</span></div><div class="line">    <span class="keyword">delete</span> [] <span class="built_in">list</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; </span></div><div class="line"><span class="class"><span class="title">Array</span>&lt;T&gt;:</span>:Array(<span class="keyword">const</span> Array&lt;T&gt; &amp;a) &#123;    <span class="comment">//复制构造函数</span></div><div class="line">    size = a.size;     <span class="comment">//从对象x取得数组大小，并赋值给当前对象的成员</span></div><div class="line">    <span class="built_in">list</span> = <span class="keyword">new</span> T[size]; <span class="comment">// 动态分配n个T类型的元素空间</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)     <span class="comment">//从对象X复制数组元素到本对象 </span></div><div class="line">        <span class="built_in">list</span>[i] = a.<span class="built_in">list</span>[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//重载"="运算符，将对象rhs赋值给本对象。实现对象之间的整体赋值</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">Array</span>&lt;T&gt; &amp;<span class="title">Array</span>&lt;T&gt;:</span>:<span class="keyword">operator</span> = (<span class="keyword">const</span> Array&lt;T&gt;&amp; rhs) &#123;</div><div class="line">    <span class="keyword">if</span> (&amp;rhs != <span class="keyword">this</span>) &#123;</div><div class="line"><span class="comment">//如果本对象中数组大小与rhs不同，则删除数组原有内存，然后重新分配</span></div><div class="line">        <span class="keyword">if</span> (size != rhs.size) &#123;</div><div class="line">            <span class="keyword">delete</span> [] <span class="built_in">list</span>; <span class="comment">//删除数组原有内存</span></div><div class="line">            size = rhs.size;    <span class="comment">//设置本对象的数组大小</span></div><div class="line">            <span class="built_in">list</span> = <span class="keyword">new</span> T[size];  <span class="comment">//重新分配size个元素的内存</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//从对象X复制数组元素到本对象  </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">            <span class="built_in">list</span>[i] = rhs.<span class="built_in">list</span>[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;   <span class="comment">//返回当前对象的引用</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//重载下标运算符，实现与普通数组一样通过下标访问元素，具有越界检查功能</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">T</span> &amp;<span class="title">Array</span>&lt;T&gt;:</span>:<span class="keyword">operator</span>[] (<span class="keyword">int</span> n) &#123;</div><div class="line">    assert(n &gt;= <span class="number">0</span> &amp;&amp; n &lt; size);  <span class="comment">//检查下标是否越界</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">list</span>[n];       <span class="comment">//返回下标为n的数组元素</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">const</span> <span class="title">T</span> &amp;<span class="title">Array</span>&lt;T&gt;:</span>:<span class="keyword">operator</span>[] (<span class="keyword">int</span> n) <span class="keyword">const</span> &#123;</div><div class="line">    assert(n &gt;= <span class="number">0</span> &amp;&amp; n &lt; size);  <span class="comment">//检查下标是否越界</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">list</span>[n];       <span class="comment">//返回下标为n的数组元素</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//重载指针转换运算符，将Array类的对象名转换为T类型的指针</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">Array</span>&lt;T&gt;:</span>:<span class="keyword">operator</span> T * () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;    <span class="comment">//返回当前对象中私有数组的首地址</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//取当前数组的大小</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">int</span> <span class="title">Array</span>&lt;T&gt;:</span>:getSize() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> size;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将数组大小修改为sz</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">void</span> <span class="title">Array</span>&lt;T&gt;:</span>:resize(<span class="keyword">int</span> sz) &#123;</div><div class="line">    assert(sz &gt;= <span class="number">0</span>);    <span class="comment">//检查sz是否非负</span></div><div class="line">    <span class="keyword">if</span> (sz == size) <span class="comment">//如果指定的大小与原有大小一样，什么也不做</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    T* newList = <span class="keyword">new</span> T [sz];    <span class="comment">//申请新的数组内存</span></div><div class="line">    <span class="keyword">int</span> n = (sz &lt; size) ? sz : size;<span class="comment">//将sz与size中较小的一个赋值给n</span></div><div class="line">    <span class="comment">//将原有数组中前n个元素复制到新数组中</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        newList[i] = <span class="built_in">list</span>[i];</div><div class="line">    <span class="keyword">delete</span>[] <span class="built_in">list</span>;      <span class="comment">//删除原数组</span></div><div class="line">    <span class="built_in">list</span> = newList; <span class="comment">// 使list指向新数组</span></div><div class="line">    size = sz;  <span class="comment">//更新size</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">//ARRAY_H</span></span></div></pre></td></tr></table></figure><h1 id="泛型程序设计与STL"><a href="#泛型程序设计与STL" class="headerlink" title="泛型程序设计与STL"></a>泛型程序设计与STL</h1><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是算法和容器的桥梁</p><ul><li>迭代器用作访问容器中的元素</li><li>算法不直接操作容器中的数据，而是通过迭代器间接操作</li></ul><p>算法和容器独立</p><ul><li>增加新的算法，无需影响容器的实现</li><li>增加新的容器，原有的算法也能适用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//将来自输入迭代器的n个T类型的数值排序，将结果通过输出迭代器result输出</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">InputIterator</span>, <span class="title">class</span> <span class="title">OutputIterator</span>&gt;</span></div><div class="line"><span class="class"><span class="title">void</span> <span class="title">mySort</span>(<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>, <span class="title">OutputIterator</span> <span class="title">result</span>) &#123;</span></div><div class="line">    <span class="comment">//通过输入迭代器将输入数据存入向量容器s中</span></div><div class="line">    <span class="built_in">vector</span>&lt;T&gt; s;</div><div class="line">    <span class="keyword">for</span> (;first != last; ++first)</div><div class="line">        s.push_back(*first);</div><div class="line">    <span class="comment">//对s进行排序，sort函数的参数必须是随机访问迭代器</span></div><div class="line">    sort(s.begin(), s.end());  </div><div class="line">    copy(s.begin(), s.end(), result);   <span class="comment">//将s序列通过输出迭代器输出</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//将s数组的内容排序后输出</span></div><div class="line">    <span class="keyword">double</span> a[<span class="number">5</span>] = &#123; <span class="number">1.2</span>, <span class="number">2.4</span>, <span class="number">0.8</span>, <span class="number">3.3</span>, <span class="number">3.2</span> &#125;;</div><div class="line">    mySort&lt;<span class="keyword">double</span>&gt;(a, a + <span class="number">5</span>, ostream_iterator&lt;<span class="keyword">double</span>&gt;(<span class="built_in">cout</span>, <span class="string">" "</span>));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="comment">//从标准输入读入若干个整数，将排序后的结果输出</span></div><div class="line">    mySort&lt;<span class="keyword">int</span>&gt;(istream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cin</span>), istream_iterator&lt;<span class="keyword">int</span>&gt;(), ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>, <span class="string">" "</span>));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="逆向迭代器"><a href="#逆向迭代器" class="headerlink" title="逆向迭代器"></a>逆向迭代器</h2><ul><li>rbegin() ：指向容器尾的逆向迭代器</li><li>rend()：指向容器首的逆向迭代器</li></ul><p>逆向迭代器的类型名的表示方式如下：</p><ul><li>S::reverse_iterator：逆向迭代器类型</li><li>S::const_reverse_iterator：逆向常迭代器类型</li></ul><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><p>一个行为类似函数的对象</p><p>可以没有参数，也可以带有若干参数</p><p>其功能是获取一个值，或者改变操作的状态</p><p>普通函数就是函数对象</p><p>重载了“()”运算符的类的实例是函数对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt; //包含数值算法头文件</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultClass</span>&#123;</span>  <span class="comment">//定义MultClass类</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="comment">//重载操作符operator()</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x * y; &#125;   </div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The result by multipling all elements in a is "</span></div><div class="line">        &lt;&lt; accumulate(a, a + N, <span class="number">1</span>, MultClass()) <span class="comment">//将类multclass传递给通用算法</span></div><div class="line">        &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> intArr[] = &#123; <span class="number">30</span>, <span class="number">90</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">70</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">80</span> &#125;;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="keyword">sizeof</span>(intArr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(intArr, intArr + N);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"before sorting:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    copy(a.begin(),a.end(),ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>,<span class="string">"\t"</span>));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    sort(a.begin(), a.end(), greater&lt;<span class="keyword">int</span>&gt;()); <span class="comment">//STL中的二元谓词函数对象</span></div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"after sorting:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    copy(a.begin(),a.end(),ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>,<span class="string">"\t"</span>));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="I-O流"><a href="#I-O流" class="headerlink" title="I/O流"></a>I/O流</h1><h2 id="操纵符（manipulator）"><a href="#操纵符（manipulator）" class="headerlink" title="操纵符（manipulator）"></a>操纵符（manipulator）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用width控制输出宽度</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">        <span class="built_in">cout</span>.width(<span class="number">10</span>);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果:</span></div><div class="line"><span class="comment">      1.23</span></div><div class="line"><span class="comment">     35.36</span></div><div class="line"><span class="comment">     653.7</span></div><div class="line"><span class="comment">   4358.24</span></div><div class="line"><span class="comment">   */</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用setw操纵符指定宽度</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="built_in">string</span> names[] = &#123; <span class="string">"Zoot"</span>, <span class="string">"Jimmy"</span>, <span class="string">"Al"</span>, <span class="string">"Stan"</span> &#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; names[i] </div><div class="line">     &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果:</span></div><div class="line"><span class="comment">  Zoot      1.23</span></div><div class="line"><span class="comment"> Jimmy     35.36</span></div><div class="line"><span class="comment">    Al     653.7</span></div><div class="line"><span class="comment">  Stan   4358.24</span></div><div class="line"><span class="comment">  */</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置对齐方式</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="built_in">string</span> names[] = &#123; <span class="string">"Zoot"</span>, <span class="string">"Jimmy"</span>, <span class="string">"Al"</span>, <span class="string">"Stan"</span> &#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::left)<span class="comment">//左对齐</span></div><div class="line">           &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; names[i]</div><div class="line">           &lt;&lt; resetiosflags(ios_base::left)</div><div class="line">           &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果:</span></div><div class="line"><span class="comment">Zoot        1.23</span></div><div class="line"><span class="comment">Jimmy      35.36</span></div><div class="line"><span class="comment">Al         653.7</span></div><div class="line"><span class="comment">Stan     4358.24</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控制输出精度——未指定fixed或scientific</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="built_in">string</span> names[] = &#123; <span class="string">"Zoot"</span>, <span class="string">"Jimmy"</span>, <span class="string">"Al"</span>, <span class="string">"Stan"</span> &#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::left)</div><div class="line">        &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; names[i]</div><div class="line">        &lt;&lt; resetiosflags(ios_base::left)<span class="comment">//清除左对齐设置</span></div><div class="line">        &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果：</span></div><div class="line"><span class="comment">Zoot           1</span></div><div class="line"><span class="comment">Jimmy     4e+001</span></div><div class="line"><span class="comment">Al        7e+002</span></div><div class="line"><span class="comment">Stan      4e+003</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控制输出精度——指定fixed</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="built_in">string</span> names[] = &#123; <span class="string">"Zoot"</span>, <span class="string">"Jimmy"</span>, <span class="string">"Al"</span>, <span class="string">"Stan"</span> &#125;;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::fixed);   </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::left)</div><div class="line">        &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; names[i]</div><div class="line">        &lt;&lt; resetiosflags(ios_base::left)<span class="comment">//清除左对齐设置</span></div><div class="line">        &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">输出结果：</div><div class="line">Zoot         <span class="number">1.2</span></div><div class="line">Jimmy       <span class="number">35.4</span></div><div class="line">Al         <span class="number">653.7</span></div><div class="line">Stan      <span class="number">4358.2</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控制输出精度——指定scientific</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> values[] = &#123; <span class="number">1.23</span>, <span class="number">35.36</span>, <span class="number">653.7</span>, <span class="number">4358.24</span> &#125;;</div><div class="line">    <span class="built_in">string</span> names[] = &#123; <span class="string">"Zoot"</span>, <span class="string">"Jimmy"</span>, <span class="string">"Al"</span>, <span class="string">"Stan"</span> &#125;;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::scientific);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; setiosflags(ios_base::left)</div><div class="line">        &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; names[i]</div><div class="line">        &lt;&lt; resetiosflags(ios_base::left)<span class="comment">//清除左对齐设置</span></div><div class="line">        &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; values[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">输出结果：</div><div class="line">Zoot    <span class="number">1.2e+000</span></div><div class="line">Jimmy   <span class="number">3.5e+001</span></div><div class="line">Al      <span class="number">6.5e+002</span></div><div class="line">Stan    <span class="number">4.4e+003</span></div></pre></td></tr></table></figure><h2 id="二进制文件流"><a href="#二进制文件流" class="headerlink" title="二进制文件流"></a>二进制文件流</h2><p>使用ofstream构造函数中的模式参量指定二进制输出模式或以通常方式构造一个流，然后使用setmode成员函数，在文件打开后改变模式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//向二进制文件输出</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> mon, day, year;  </div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Date dt = &#123; <span class="number">6</span>, <span class="number">10</span>, <span class="number">92</span> &#125;;</div><div class="line">    <span class="function">ofstream <span class="title">file</span><span class="params">(<span class="string">"date.dat"</span>, ios_base::binary)</span></span>;</div><div class="line">    file.write(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;dt),<span class="keyword">sizeof</span>(dt));</div><div class="line">    file.close();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="字符串输出流（-ostringstream-）"><a href="#字符串输出流（-ostringstream-）" class="headerlink" title="字符串输出流（ ostringstream ）"></a>字符串输出流（ ostringstream ）</h2><p>将字符串作为输出流的目标，可以实现将其他数据类型转换为字符串的功能</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用ostringstream将数值转换为字符串</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//函数模板toString可以将各种支持“&lt;&lt;“插入符的类型的对象转换为字符串。</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">inline</span> <span class="title">string</span> <span class="title">toString</span>(<span class="title">const</span> <span class="title">T</span> &amp;<span class="title">v</span>) &#123;</span></div><div class="line">    <span class="built_in">ostringstream</span> os;   <span class="comment">//创建字符串输出流</span></div><div class="line">    os &lt;&lt; v;        <span class="comment">//将变量v的值写入字符串流</span></div><div class="line">    <span class="keyword">return</span> os.str();    <span class="comment">//返回输出流生成的字符串</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> str1 = toString(<span class="number">5</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">string</span> str2 = toString(<span class="number">1.2</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果：</span></div><div class="line"><span class="comment">5</span></div><div class="line"><span class="comment">1.2</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h2 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h2><h3 id="重要的输入流类"><a href="#重要的输入流类" class="headerlink" title="重要的输入流类"></a>重要的输入流类</h3><ul><li>istream类最适合用于顺序文本模式输入，cin是其实例</li><li>ifstream类支持磁盘文件输入</li><li>istringstream类支持从内存中的字符串输入</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//get函数应用举例</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    <span class="keyword">while</span> ((ch = <span class="built_in">cin</span>.get()) != EOF)</div><div class="line">        <span class="built_in">cout</span>.put(ch);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为输入流指定一个终止字符</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> line;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Type a line terminated by 't' "</span> &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">    getline(<span class="built_in">cin</span>, line, <span class="string">'t'</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从文件读一个二进制记录到一个结构中</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SalaryInfo</span> &#123;</span></div><div class="line">    <span class="keyword">unsigned</span> id;</div><div class="line">    <span class="keyword">double</span> salary;</div><div class="line">&#125;; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    SalaryInfo employee1 = &#123; <span class="number">600001</span>, <span class="number">8000</span> &#125;;</div><div class="line">    <span class="function">ofstream <span class="title">os</span><span class="params">(<span class="string">"payroll"</span>, ios_base::out | ios_base::binary)</span></span>;</div><div class="line">    os.write(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;employee1), <span class="keyword">sizeof</span>(employee1));</div><div class="line">    os.close();</div><div class="line">    <span class="function">ifstream <span class="title">is</span><span class="params">(<span class="string">"payroll"</span>, ios_base::in | ios_base::binary)</span></span>;</div><div class="line">    <span class="keyword">if</span> (is) &#123;</div><div class="line">        SalaryInfo employee2;</div><div class="line">        is.read(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;employee2), <span class="keyword">sizeof</span>(employee2));</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; employee2.id &lt;&lt; <span class="string">" "</span> &lt;&lt; employee2.salary &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: Cannot open file 'payroll'."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    is.close();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用seekg函数设置位置指针</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> values[] = &#123; <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span> &#125;;</div><div class="line">    <span class="function">ofstream <span class="title">os</span><span class="params">(<span class="string">"integers"</span>, ios_base::out | ios_base::binary)</span></span>;</div><div class="line">    os.write(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(values), <span class="keyword">sizeof</span>(values));</div><div class="line">    os.close();</div><div class="line"></div><div class="line">    <span class="function">ifstream <span class="title">is</span><span class="params">(<span class="string">"integers"</span>, ios_base::in | ios_base::binary)</span></span>;</div><div class="line">    <span class="keyword">if</span> (is) &#123;</div><div class="line">        is.seekg(<span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">        <span class="keyword">int</span> v;</div><div class="line">        is.read(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;v), <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"The 4th integer in the file 'integers' is "</span> &lt;&lt; v &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: Cannot open file 'integers'."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//读一个文件并显示出其中0元素的位置</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="function">ifstream <span class="title">file</span><span class="params">(<span class="string">"integers"</span>, ios_base::in | ios_base::binary)</span></span>;</div><div class="line">    <span class="keyword">if</span> (file) &#123;</div><div class="line">        <span class="keyword">while</span> (file) &#123;<span class="comment">//读到文件尾file为0</span></div><div class="line">            streampos here = file.tellg();</div><div class="line">            <span class="keyword">int</span> v;</div><div class="line">            file.read(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;v), <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">            <span class="keyword">if</span> (file &amp;&amp; v == <span class="number">0</span>) </div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Position "</span> &lt;&lt; here &lt;&lt; <span class="string">" is 0"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: Cannot open file 'integers'."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    file.close();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="字符串输入流（-istringstream）"><a href="#字符串输入流（-istringstream）" class="headerlink" title="字符串输入流（ istringstream）"></a>字符串输入流（ istringstream）</h3><p>将字符串作为文本输入流的源，可以将字符串转换为其他数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用istringstream将字符串转换为数值</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">inline</span> <span class="title">T</span> <span class="title">fromString</span>(<span class="title">const</span> <span class="title">string</span> &amp;<span class="title">str</span>) &#123;</span></div><div class="line">    <span class="function"><span class="built_in">istringstream</span> <span class="title">is</span><span class="params">(str)</span></span>;  <span class="comment">//创建字符串输入流</span></div><div class="line">    T v;</div><div class="line">    is &gt;&gt; v;    <span class="comment">//从字符串输入流中读取变量v</span></div><div class="line">    <span class="keyword">return</span> v;   <span class="comment">//返回变量v</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> v1 = fromString&lt;<span class="keyword">int</span>&gt;(<span class="string">"5"</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">double</span> v2 = fromString&lt;<span class="keyword">double</span>&gt;(<span class="string">"1.2"</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; v2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输出结果：</span></div><div class="line"><span class="comment">5</span></div><div class="line"><span class="comment">1.2</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h2 id="输入-输出流"><a href="#输入-输出流" class="headerlink" title="输入/输出流"></a>输入/输出流</h2><p>两个重要的输入/输出流</p><ul><li>一个iostream对象可以是数据的源或目的</li><li>两个重要的I/O流类都是从iostream派生的，它们是fstream和stringstream。这些类继承了前面描述的istream和ostream类的功能</li></ul><h3 id="fstream类"><a href="#fstream类" class="headerlink" title="fstream类"></a>fstream类</h3><ul><li>fstream类支持磁盘文件输入和输出</li><li>如果需要在同一个程序中从一个特定磁盘文件读并写到该磁盘文件，可以构造一个fstream对象</li><li>一个fstream对象是有两个逻辑子流的单个流，两个子流一个用于输入，另一个用于输出</li></ul><h3 id="stringstream类"><a href="#stringstream类" class="headerlink" title="stringstream类"></a>stringstream类</h3><ul><li>stringstream类支持面向字符串的输入和输出</li><li>可以用于对同一个字符串的内容交替读写，同样是由两个逻辑子流构成</li></ul><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="异常接口声明"><a href="#异常接口声明" class="headerlink" title="异常接口声明"></a>异常接口声明</h2><p>一个函数显式声明可能抛出的异常，有利于函数的调用者为异常处理做好准备</p><p>可以在函数的声明中列出这个函数可能抛掷的所有异常类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void fun() throw(A，B，C，D);</div></pre></td></tr></table></figure><p>若无异常接口声明，则此函数可以抛掷任何类型的异常</p><p>不抛掷任何类型异常的函数声明如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void fun() throw();</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> x;</div><div class="line">    <span class="keyword">return</span> x / y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"5 / 2 = "</span> &lt;&lt; divide(<span class="number">5</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"8 / 0 = "</span> &lt;&lt; divide(<span class="number">8</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"7 / 1 = "</span> &lt;&lt; divide(<span class="number">7</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">int</span> e) &#123; <span class="comment">//若改成float e就不会catch到</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" is divided by zero!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"That is ok."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="自动的析构"><a href="#自动的析构" class="headerlink" title="自动的析构"></a>自动的析构</h2><p>找到一个匹配的catch异常处理后</p><ul><li>初始化异常参数</li><li>将从对应的try块开始到异常被抛掷处之间构造（且尚未析构）的所有自动对象进行析构</li></ul><p>从最后一个catch处理之后开始恢复执行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    MyException(<span class="keyword">const</span> <span class="built_in">string</span> &amp;message) : message(message) &#123;&#125;</div><div class="line">    ~MyException() &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="title">getMessage</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> message; &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">string</span> message;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Demo() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Constructor of Demo"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">    ~Demo() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destructor of Demo"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="title">throw</span> <span class="params">(MyException)</span> </span>&#123;</div><div class="line">    Demo d;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Throw MyException in func()"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">throw</span> MyException(<span class="string">"exception thrown by func()"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"In main function"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        func();</div><div class="line">    &#125; <span class="keyword">catch</span> (MyException&amp; e) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Caught an exception: "</span> &lt;&lt; e.getMessage() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Resume the execution of main()"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">运行结果：</span></div><div class="line"><span class="comment">In main function</span></div><div class="line"><span class="comment">Constructor of Demo</span></div><div class="line"><span class="comment">Throw MyException in func()</span></div><div class="line"><span class="comment">Destructor of Demo</span></div><div class="line"><span class="comment">Caught an exception: exception thrown by func()</span></div><div class="line"><span class="comment">Resume the execution of main()</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是本博客有史以来最长的一篇文章，总结了我从大一至今，遇到的几乎所有不易理解或是容易忘记的C++知识，可作为手册查阅，内容参考自清华大学郑莉教授的C++课程。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>JetsonTX2自主无人车原型开发</title>
    <link href="https://luxuantao.github.io/2019/01/24/JetsonTX2%E8%87%AA%E4%B8%BB%E6%97%A0%E4%BA%BA%E8%BD%A6%E5%8E%9F%E5%9E%8B%E5%BC%80%E5%8F%91/"/>
    <id>https://luxuantao.github.io/2019/01/24/JetsonTX2自主无人车原型开发/</id>
    <published>2019-01-24T08:46:26.000Z</published>
    <updated>2019-01-24T10:16:33.393Z</updated>
    
    <content type="html"><![CDATA[<p>本科生培育的项目，目前已基本成型，涉及的技术包括：opencv，caffe，arduino，android</p><p>项目github地址：<a href="https://github.com/luxuantao/jetsontx2_car" target="_blank" rel="external">https://github.com/luxuantao/jetsontx2_car</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当初搞这个项目，纯粹是我一厢情愿。自从有了JetsonTX2开发板，就想着这么又贵又强的东西不用怎么行。断断续续搞了一学期，也算学了不少新东西。队里加我总共四个人，其中三个不干活的（没错，从头到尾只有我一个人在瞎忙活）。你问我有怨气吗，自然是有的，这学期第13周的时候，我把物体识别的任务交给了一位队友，就想着后面要期末考所以特地提前了些，结果他硬生生地拖到第十九周学期结束，都没有碰一下开发板。罢了，给他学习的机会他不要，又能怪谁呢？而且我在一开始申报项目时就做好了一带三的准备，那么好，opencv，caffe，arduino，android，全都由我一个人负责。</p><p>我不贴代码，arduino和android的全部代码可以从<a href="https://github.com/luxuantao/jetsontx2_car" target="_blank" rel="external">https://github.com/luxuantao/jetsontx2_car</a> 获取。</p><p>这是一篇开发手札，主要是写给我自己看的，记录一下开发中遇到的问题。</p><h2 id="已完成的目标"><a href="#已完成的目标" class="headerlink" title="已完成的目标"></a>已完成的目标</h2><ul><li>JetsonTX2架设在小车上，调用usb摄像头，能够识别出20种不同的物体，包括人，车，显示屏等等，并能将带有标记的流（实际上传的是图片）传回手机</li><li>用于控制小车和显示回传视频的app</li><li>小车用anduino开发，有两种运行模式：手动控制行驶（由app和anduino蓝牙通信实现）和自动行驶（由一组超声波模块+三组红外探测模块实现避障），可随时通过app切换模式</li></ul><h2 id="Arduino小车部分"><a href="#Arduino小车部分" class="headerlink" title="Arduino小车部分"></a>Arduino小车部分</h2><p>最先做的是小车，网上买的小车零件，买回来后要自己全部一个个拼接起来，比如扩展板上，每一个排角，电阻都要自己焊上去。这里要感谢我的爸爸，他虽然不怎么懂编程，但是焊接东西他很拿手，帮我一个部件一个部件的焊好，前后焊了有一周的时间，感谢我的爸爸，没有他，第一步都没法完成。</p><p>小车上最重要的是这些模块：正前方的一组超声波云台模块，正前方/左前方/右前方各一组红外探测模块，以及一组蓝牙模块。为什么正前方又要装超声波又要装红外？因为超声波打的距离比较远，能提早做出判断，但是在车上的位置比较高，打不到较低的地方，所以我在低处补了一组红外探测模块，做两手准备。而左前方和右前方的红外探测模块是后来加的，因为当小车以接近四十五度角接近前方障碍时，无法通过正前方的超声波和红外探测到，所以我在左前方和右前方各补了一个红外，效果不错。</p><h2 id="JetsonTX2部分"><a href="#JetsonTX2部分" class="headerlink" title="JetsonTX2部分"></a>JetsonTX2部分</h2><p>NVIDIA的JetsonTX2是比JetsonTX1性能更强的一块开发板（不过最近好像又有了一块比JetsonTX2还要厉害的开发板）。说它是开发板，其实并不准确，它其实是一台嵌入式计算机，由于其GPU的强大，专门用于做图像处理方面的工作。</p><p>刚到手的JetsonTX2是一台裸机，内置ubuntu16.04操作系统，看上去就和普通的计算机没什么两样。要让它变得更强，先要在NVIDIA的官网上下载JetPack开发包，装好后，就有了CUDA等一系列基础设施。</p><p>关于图像识别，我用的是<code>Faster R-CNN</code> ，但是用它之前，先要装好<code>Caffe</code> 和 <code>PyCaffe</code> ，但是装<code>Caffe</code> 之前，先要装好<code>opencv</code> 。是不是感觉挺麻烦的？没错，难就难在这，有不少依赖要装，而且要翻墙。给出一个很不错的博客，我基本上就是照着这个博客中所说的一步步做的，装了两天（其中caffe装了两遍，注意一定要用python2）。</p><p>opencv3安装：<a href="https://jkjung-avt.github.io/opencv3-on-tx2/" target="_blank" rel="external">https://jkjung-avt.github.io/opencv3-on-tx2/</a></p><p>caffe安装：<a href="https://jkjung-avt.github.io/caffe-on-tx2/" target="_blank" rel="external">https://jkjung-avt.github.io/caffe-on-tx2/</a></p><p>opencv3和caffe都是下载源码在本地编译，所以很慢很慢。。。</p><p>然后就是套<code>Faster R-CNN</code>：<a href="https://jkjung-avt.github.io/faster-rcnn/" target="_blank" rel="external">https://jkjung-avt.github.io/faster-rcnn/</a> ，用到了别人训练好的模型，细心的你会发现github上说这个模型已经废弃了，现在有更快的模型可以用。没错，<code>Faster R-CNN</code> 虽然有个<code>Faster</code> 但是它的速度真心不快，0.9秒识别一张图片（后面会提到如何加速），但是这个模型的准确度非常好，比起别的模型更具优势，所以我还是采用了这个模型。</p><p>那如何做到更快呢，<a href="https://jkjung-avt.github.io/making-frcn-faster/" target="_blank" rel="external">https://jkjung-avt.github.io/making-frcn-faster/</a> 里面提到可以用<code>GoogLeNet</code>换掉速度较慢的<code>VGG16</code> ，也就是对神经网络中的某一层做了改动，但是简简单单的这一步带来的改良是巨大的，在JetsonTX2开最佳性能的情况下<code>sudo nvpmodel -m 0</code>，可以做到0.5秒识别一张图片。</p><p>视频流可以选择使用板载摄像头或者自己搞个usb摄像头，我都试了下，运行后，opencv会在JetsonTX2上会新建一个窗口，里面实时显示带有识别框的图片，每0.5秒换一次图片。</p><h2 id="Android部分"><a href="#Android部分" class="headerlink" title="Android部分"></a>Android部分</h2><p>手机是通过蓝牙和小车交互，但是由于和JetsonTX2需要进行图片流的传输，数据量较大，所以采用Wifi，经TCP传输，socket通信。</p><p><a href="https://jkjung-avt.github.io/faster-rcnn/" target="_blank" rel="external">https://jkjung-avt.github.io/faster-rcnn/</a> 中提到的<code>demo_camera.py</code> 自然不包括传图片的回手机的部分，这个需要自己实现。原本代码中用于显示在窗口中的每一张图片其实是一个三维的<code>ndarray</code>（长、宽和RGB），我的做法是把这个<code>ndarray</code>转换为照片先存在本地，然后再读取这个图片把它传输出去。这里有个坑，<code>ndarray</code>中的某两个颜色次序（好像是G和B）要反一下，不然生成的图片你会觉得颜色不对劲。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>我也试了试<code>yolov3</code>，<a href="https://jkjung-avt.github.io/yolov3/" target="_blank" rel="external">https://jkjung-avt.github.io/yolov3/</a> ，但是实际效果很差，主要是延时太久，理论上<code>yolov3</code> 的速度应该是最快的，可能是有什么没注意到的地方，今后再说。</p><p>PS：很多事情只能靠自己。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本科生培育的项目，目前已基本成型，涉及的技术包括：opencv，caffe，arduino，android&lt;/p&gt;
&lt;p&gt;项目github地址：&lt;a href=&quot;https://github.com/luxuantao/jetsontx2_car&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/luxuantao/jetsontx2_car&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JetsonTX2" scheme="https://luxuantao.github.io/categories/JetsonTX2/"/>
    
    
      <category term="机器视觉" scheme="https://luxuantao.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow实现手写体数字识别</title>
    <link href="https://luxuantao.github.io/2018/09/03/tensorflow%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99%E4%BD%93%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>https://luxuantao.github.io/2018/09/03/tensorflow实现手写体数字识别/</id>
    <published>2018-09-03T06:47:08.000Z</published>
    <updated>2018-09-03T06:48:52.502Z</updated>
    
    <content type="html"><![CDATA[<p>调用tensorflow实现手写体数字识别。<br><a id="more"></a></p><blockquote><p>内容参考自北京大学曹健教授的tensorflow课程，在此感谢</p><p>代码原址：<a href="https://github.com/cj0012/AI-Practice-Tensorflow-Notes" target="_blank" rel="external">https://github.com/cj0012/AI-Practice-Tensorflow-Notes</a></p></blockquote><p>之前在人工智能课上自己手动搭建过一个BP神经网络实现MNIST数据集的手写体数字识别，使用的是<code>c++</code>，最终准确率的上限在<code>95%至96%</code>左右（毕竟水平有限）。这次不一样了，使用<code>tensorflow</code>进行实验，准确率确实提高了不少。可能有人会觉得<code>tensorflow</code>有点过时，现在的大企业不怎么用<code>tensorflow</code>了，但我觉得，对于初学者来说，<code>tensorflow</code>还是不错的选择。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>ubuntu 16.04</li><li>python 2.7.13</li><li>tensorflow 1.3.0</li><li>MNIST数据集</li></ul><p>我不清楚windows下可不可以装tensorflow，反正很久以前是不行，现在好像可以了？？？</p><h2 id="总体框架"><a href="#总体框架" class="headerlink" title="总体框架"></a>总体框架</h2><p>主要分为三个部分如下：</p><ul><li>前向传播过程(mnist_forward.py)</li><li>进行网络参数优化方法的反向传播过程 ( mnist_backward.py )</li><li>验证模型准确率的测试过程(mnist_test.py)</li></ul><p>每个部分都单独写成了一个模块文件。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><h3 id="mnist-forward-py"><a href="#mnist-forward-py" class="headerlink" title="mnist_forward.py"></a>mnist_forward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line">INPUT_NODE = <span class="number">784</span></div><div class="line">OUTPUT_NODE = <span class="number">10</span></div><div class="line">LAYER1_NODE = <span class="number">500</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weight</span><span class="params">(shape, regularizer)</span>:</span></div><div class="line">w = tf.Variable(tf.truncated_normal(shape, stddev=<span class="number">0.1</span>))</div><div class="line"><span class="keyword">if</span> regularizer != <span class="keyword">None</span>:</div><div class="line">tf.add_to_collection(<span class="string">'losses'</span>, tf.contrib.layers.l2_regularizer(regularizer)(w))</div><div class="line"><span class="keyword">return</span> w</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bias</span><span class="params">(shape)</span>:</span></div><div class="line">b = tf.Variable(tf.zeros(shape))</div><div class="line"><span class="keyword">return</span> b</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(x, regularizer)</span>:</span></div><div class="line">w1 = get_weight([INPUT_NODE, LAYER1_NODE], regularizer)</div><div class="line">b1 = get_bias([LAYER1_NODE])</div><div class="line">y1 = tf.nn.relu(tf.matmul(x, w1) + b1)</div><div class="line"></div><div class="line">w2 = get_weight([LAYER1_NODE, OUTPUT_NODE], regularizer)</div><div class="line">b2 = get_bias([OUTPUT_NODE])</div><div class="line">y = tf.matmul(y1, w2) + b2</div><div class="line"><span class="keyword">return</span> y</div></pre></td></tr></table></figure><h3 id="mnist-backward-py"><a href="#mnist-backward-py" class="headerlink" title="mnist_backward.py"></a>mnist_backward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="keyword">import</span> mnist_forward</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">STEPS = <span class="number">50000</span></div><div class="line">BATCH_SIZE = <span class="number">200</span></div><div class="line">LEARNING_RATE_BASE = <span class="number">0.1</span></div><div class="line">LEARNING_RATE_DECAY = <span class="number">0.99</span></div><div class="line">REGULIZER = <span class="number">0.0001</span></div><div class="line">MOVING_AVERAGE_DECAY = <span class="number">0.99</span></div><div class="line">MODEL_SAVE_PATH = <span class="string">"./model/"</span></div><div class="line">MODEL_NAME = <span class="string">"mnist_model"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(mnist)</span>:</span></div><div class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</div><div class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.OUTPUT_NODE])</div><div class="line">y = mnist_forward.forward(x, REGULIZER)</div><div class="line">global_step = tf.Variable(<span class="number">0</span>, trainable = <span class="keyword">False</span>)</div><div class="line"></div><div class="line">ce = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, labels=tf.argmax(y_,<span class="number">-1</span>))</div><div class="line">cem = tf.reduce_mean(ce)</div><div class="line">loss = cem + tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</div><div class="line"></div><div class="line">learning_rate = tf.train.exponential_decay(</div><div class="line">LEARNING_RATE_BASE,</div><div class="line">global_step,</div><div class="line">mnist.train.num_examples / BATCH_SIZE,</div><div class="line">LEARNING_RATE_DECAY,</div><div class="line">staircase = <span class="keyword">True</span></div><div class="line">)</div><div class="line"></div><div class="line">train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</div><div class="line">ema = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step)</div><div class="line">ema_op = ema.apply(tf.trainable_variables())</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.control_dependencies([train_step, ema_op]):</div><div class="line">train_op = tf.no_op(name = <span class="string">'train'</span>)</div><div class="line"></div><div class="line">saver = tf.train.Saver()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">init_op = tf.global_variables_initializer()</div><div class="line">sess.run(init_op)</div><div class="line"></div><div class="line">ckpt = tf.train.get_checkpoint_state(MODEL_SAVE_PATH)</div><div class="line"><span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</div><div class="line">saver.restore(sess, ckpt.model_checkpoint_path)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(STEPS):</div><div class="line">xs,ys = mnist.train.next_batch(BATCH_SIZE)</div><div class="line">_,loss_value,step = sess.run([train_op, loss, global_step], feed_dict=&#123;x:xs, y_:ys&#125;)</div><div class="line"><span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</div><div class="line"><span class="keyword">print</span> <span class="string">"after %d training steps, loss on training batch is %g"</span> % (step, loss_value)</div><div class="line">saver.save(sess, os.path.join(MODEL_SAVE_PATH,MODEL_NAME), global_step=global_step)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"./data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line">backward(mnist)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">main()</div></pre></td></tr></table></figure><h3 id="mnist-test-py"><a href="#mnist-test-py" class="headerlink" title="mnist_test.py"></a>mnist_test.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding utf-8</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="keyword">import</span> mnist_forward</div><div class="line"><span class="keyword">import</span> mnist_backward</div><div class="line">TEST_INTERVAL_SECS = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(mnist)</span>:</span></div><div class="line"><span class="keyword">with</span> tf.Graph().as_default() <span class="keyword">as</span> g:</div><div class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</div><div class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.OUTPUT_NODE])</div><div class="line">y = mnist_forward.forward(x, <span class="keyword">None</span>)</div><div class="line"></div><div class="line">ema = tf.train.ExponentialMovingAverage(mnist_backward.MOVING_AVERAGE_DECAY)</div><div class="line">ema_restore = ema.variables_to_restore()</div><div class="line">saver = tf.train.Saver(ema_restore)</div><div class="line"></div><div class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">ckpt = tf.train.get_checkpoint_state(mnist_backward.MODEL_SAVE_PATH)</div><div class="line"><span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</div><div class="line">saver.restore(sess, ckpt.model_checkpoint_path)</div><div class="line">global_step = ckpt.model_checkpoint_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>].split(<span class="string">'-'</span>)[<span class="number">-1</span>]</div><div class="line">accuracy_score = sess.run(accuracy, feed_dict=&#123;x:mnist.test.images, y_:mnist.test.labels&#125;)</div><div class="line"><span class="keyword">print</span> <span class="string">"after %s training steps, test accuracy = %g"</span> % (global_step, accuracy_score)</div><div class="line"><span class="keyword">else</span>:</div><div class="line"><span class="keyword">print</span> <span class="string">"no checkpoint file found"</span></div><div class="line"><span class="keyword">return</span></div><div class="line">time.sleep(TEST_INTERVAL_SECS)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"./data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line">test(mnist)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">main()</div></pre></td></tr></table></figure><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="mnist-forward-py-1"><a href="#mnist-forward-py-1" class="headerlink" title="mnist_forward.py"></a>mnist_forward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INPUT_NODE = <span class="number">784</span></div><div class="line">OUTPUT_NODE = <span class="number">10</span></div><div class="line">LAYER1_NODE = <span class="number">500</span></div></pre></td></tr></table></figure><p>在前向传播过程中，规定网络输入结点为 784 个(代表每张输入图片的像素个数)，隐藏层节点 500 个(一层)，输出节点 10 个(表示输出为数字 0-9的十分类)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w = tf.Variable(tf.truncated_normal(shape, stddev=<span class="number">0.1</span>))</div></pre></td></tr></table></figure><p>参数满足截断正态分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> regularizer != <span class="keyword">None</span>:</div><div class="line">tf.add_to_collection(<span class="string">'losses'</span>, tf.contrib.layers.l2_regularizer(regularizer)(w))</div></pre></td></tr></table></figure><p>使用正则化,将每个参数的正则化损失加到总损失中</p><h3 id="mnist-backward-py-1"><a href="#mnist-backward-py-1" class="headerlink" title="mnist_backward.py"></a>mnist_backward.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ce = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, labels=tf.argmax(y_,<span class="number">-1</span>))</div><div class="line">cem = tf.reduce_mean(ce)</div><div class="line">loss = cem + tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</div></pre></td></tr></table></figure><p>softmax()函数与交叉熵一起使用，再加上正则化损失以此计算得到总的偏差值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">learning_rate = tf.train.exponential_decay(</div><div class="line">LEARNING_RATE_BASE,</div><div class="line">global_step,</div><div class="line">mnist.train.num_examples / BATCH_SIZE,</div><div class="line">LEARNING_RATE_DECAY,</div><div class="line">staircase = <span class="keyword">True</span></div><div class="line">)</div></pre></td></tr></table></figure><p>使用指数衰减学习率使模型在训练的前期快速收敛接近较优解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</div></pre></td></tr></table></figure><p>使用梯度下降算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ema = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step)</div><div class="line">ema_op = ema.apply(tf.trainable_variables())</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.control_dependencies([train_step, ema_op]):</div><div class="line">train_op = tf.no_op(name = <span class="string">'train'</span>)</div></pre></td></tr></table></figure><p>在模型训练时引入滑动平均使模型在测试数据上表现的更加健壮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">saver = tf.train.Saver()</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ckpt = tf.train.get_checkpoint_state(MODEL_SAVE_PATH)</div><div class="line"><span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</div><div class="line">saver.restore(sess, ckpt.model_checkpoint_path)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">saver.save(sess, os.path.join(MODEL_SAVE_PATH,MODEL_NAME), global_step=global_step)</div></pre></td></tr></table></figure><p>断点续训，因为训练时间比较长，万一断电了呢。。。为了使得之前训练好的参数（w,b）能够保留下来，调用了saver进行保存和恢复</p><h3 id="mnist-test-py-1"><a href="#mnist-test-py-1" class="headerlink" title="mnist_test.py"></a>mnist_test.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TEST_INTERVAL_SECS = <span class="number">5</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">time.sleep(TEST_INTERVAL_SECS)</div></pre></td></tr></table></figure><p>每隔五秒钟测试一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ema = tf.train.ExponentialMovingAverage(mnist_backward.MOVING_AVERAGES_DECAY)</div><div class="line">ema_restore = ema.variables_to_restore()</div><div class="line">saver = tf.train.Saver(ema_restore)</div></pre></td></tr></table></figure><p>实例化具有滑动平均的 saver 对象，从而在会话被加载时，模型中的所有参数被赋值为各自的滑动平均值，增强模型的稳定性</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><blockquote><p>可能你已经注意到了，mnist_forward.py中并没有main函数（说明这个文件只是一个模块用来被其他文件调用，本例中是mnist_backward.py调用了mnist_forward.py），而另两个文件都有main函数。</p></blockquote><ul><li>终端输入<code>python mnist_backward.py</code>，开始训练，会显示实时的损失值，如：<code>after 15005 training steps, loss on training batch is 0.159981</code></li><li>再开一个终端，输入<code>python mnist_test.py</code>，进行同步的测试（每五秒一次），会显示实时的损失值，如：<code>after 15005 training steps, test accuracy = 0.979</code></li></ul><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>代码里设置的总循环数是50000次，但是我只跑到15000次（毕竟时间比较久），但已经能有98%的准确率了，如果全跑完的话，预计能达到99%以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;调用tensorflow实现手写体数字识别。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="tensorflow" scheme="https://luxuantao.github.io/tags/tensorflow/"/>
    
      <category term="人工智能" scheme="https://luxuantao.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>WeChall Training: Programming 1</title>
    <link href="https://luxuantao.github.io/2018/08/17/WeChall-Training-Programming-1/"/>
    <id>https://luxuantao.github.io/2018/08/17/WeChall-Training-Programming-1/</id>
    <published>2018-08-17T09:34:25.000Z</published>
    <updated>2018-08-17T09:51:37.948Z</updated>
    
    <content type="html"><![CDATA[<hr><p>刚入ctf的坑，做一些题练练手。</p><p>WeChall上的题还是比较适合入门的。</p><a id="more"></a><p>题目如下：</p><blockquote><p>When you visit <a href="http://www.wechall.net/challenge/training/programming1/index.php?action=request" target="_blank" rel="external">this link</a> you receive a message.</p><p>Submit the same message back to <a href="http://www.wechall.net/challenge/training/programming1/index.php?answer=the_message" target="_blank" rel="external">http://www.wechall.net/challenge/training/programming1/index.php?answer=the_message</a></p><p>Your timelimit is 1.337 seconds</p></blockquote><p>给了个链接，点进去后显示一个字符串，要把它加在指定的URL中并进行访问，整个过程要在1.337秒内完成。</p><p>我竟然还真的手动试了几次。。。最快也要四秒。。。</p><p>正解就是写个脚本，我用Python实现，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://www.wechall.net/challenge/training/programming1/index.php?action=request'</span></div><div class="line">cookie = dict(WC = <span class="string">'************************'</span>)</div><div class="line">re = requests.get(url, cookies = cookie)</div><div class="line">key = re.text</div><div class="line">url2 = <span class="string">'http://www.wechall.net/challenge/training/programming1/index.php?answer='</span></div><div class="line">y = requests.get(url2 + key, cookies = cookie)</div></pre></td></tr></table></figure><p>其中<code>************************</code>部分要填入的是你浏览器的cookie</p><p>至于如何查询cookie，这里我以Chrome浏览器为例：</p><ol><li><code>Ctrl+Shift+Delete</code>调出清除历史记录的界面，点击取消（这样的目的纯粹是因为方便一些）</li><li>依次点击<code>内容设置</code>-&gt;<code>Cookie</code>-&gt;<code>查看所有 Cookie 和网站数据</code></li><li>搜索<code>wechall.net</code>-&gt;找到名称为<code>WC</code>的cookie内容</li></ol><p>PS：上面的代码运行完成后并不会出现提示性的语句，但是你会惊奇地发现题目已经过了</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;刚入ctf的坑，做一些题练练手。&lt;/p&gt;
&lt;p&gt;WeChall上的题还是比较适合入门的。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="WeChall" scheme="https://luxuantao.github.io/tags/WeChall/"/>
    
  </entry>
  
  <entry>
    <title>手动搭建BP神经网络</title>
    <link href="https://luxuantao.github.io/2018/07/29/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BABP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://luxuantao.github.io/2018/07/29/手动搭建BP神经网络/</id>
    <published>2018-07-29T01:02:32.000Z</published>
    <updated>2018-07-29T01:23:16.858Z</updated>
    
    <content type="html"><![CDATA[<hr><p>人工智能的最后一次作业，搭建BP神经网络实现手写体数字识别。</p><a id="more"></a><h2 id="数据集介绍"><a href="#数据集介绍" class="headerlink" title="数据集介绍"></a>数据集介绍</h2><p>数据集采用著名的MNIST数据集，来自美国国家标准与技术研究所，由来自250个不同人手写的数字构成，其中50%是高中学生，50%来自人口普查局的工作人员。测试集也是同样比例的手写数字数据。</p><p>它包含了四个部分：前两个文件为训练集，后两个文件为测试集。</p><table><thead><tr><th style="text-align:center">-数字样本</th><th style="text-align:center">-数字标签</th></tr></thead><tbody><tr><td style="text-align:center">Training set images:train-images-idx3-ubyte.gz (包含60,000个样本)</td><td style="text-align:center">Training set labels:train-labels-idx1-ubyte.gz (包含60,000个标签)</td></tr><tr><td style="text-align:center">Test set images: t10k-images-idx3-ubyte.gz (包含10,000个样本)</td><td style="text-align:center">Test set labels: t10k-labels-idx1-ubyte.gz (包含10,000个标签)</td></tr></tbody></table><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>BP神经网络是一种按误差逆传播算法训练的多层前馈网络，能学习和存贮大量的输入-输出模式映射关系，而无需事前揭示描述这种映射关系的数学方程。它的学习规则是使用梯度下降法，通过反向传播来不断调整网络的权值和阈值，使网络的误差最小，其结构包括输入层、隐藏层和输出层。 </p><p>本实验中，对于每一张手写图片，我先把它处理成一个28 * 28 的01矩阵，其中1代表数字的笔画着色部分，0则代表空白。然后我们把该矩阵，扁平成一个784维的输入向量，输入到输入层。经过隐藏层到达输出层时，是一个10维的输出向量，每一位分别对应是数字0~9的可能性。通过比较输出层的实际输出与期望输出，进行反向反馈调节，并循环重复上述步骤直到达到指定迭代次数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码并不是很长，我用c++进行实现。</p><h3 id="BP-h文件"><a href="#BP-h文件" class="headerlink" title="BP.h文件"></a>BP.h文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BP_H_INCLUDED</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BP_H_INCLUDED</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INPUT_LAYER = <span class="number">784</span>; <span class="comment">//输入层维度</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> HIDDEN_LAYER = <span class="number">40</span>; <span class="comment">//隐含层维度</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> OUTPUT_LAYER = <span class="number">10</span>; <span class="comment">//输出层维度</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> LEARN_RATE = <span class="number">0.3</span>; <span class="comment">//学习率</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> TRAIN_TIMES = <span class="number">10</span>; <span class="comment">//迭代训练次数</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BP</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> input_array[INPUT_LAYER]; <span class="comment">//输入向量</span></div><div class="line">    <span class="keyword">int</span> aim_array[OUTPUT_LAYER]; <span class="comment">//目标结果</span></div><div class="line">    <span class="keyword">double</span> weight1_array[INPUT_LAYER][HIDDEN_LAYER]; <span class="comment">//输入层与隐含层之间的权重</span></div><div class="line">    <span class="keyword">double</span> weight2_array[HIDDEN_LAYER][OUTPUT_LAYER]; <span class="comment">//隐含层与输出层之间的权重</span></div><div class="line">    <span class="keyword">double</span> output1_array[HIDDEN_LAYER]; <span class="comment">//隐含层输出</span></div><div class="line">    <span class="keyword">double</span> output2_array[OUTPUT_LAYER]; <span class="comment">//输出层输出</span></div><div class="line">    <span class="keyword">double</span> deviation1_array[HIDDEN_LAYER]; <span class="comment">//隐含层误差</span></div><div class="line">    <span class="keyword">double</span> deviation2_array[OUTPUT_LAYER]; <span class="comment">//输出层误差</span></div><div class="line">    <span class="keyword">double</span> threshold1_array[HIDDEN_LAYER]; <span class="comment">//隐含层阈值</span></div><div class="line">    <span class="keyword">double</span> threshold2_array[OUTPUT_LAYER]; <span class="comment">//输出层阈值</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>; <span class="comment">//初始化各参数</span></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Sigmoid</span><span class="params">(<span class="keyword">double</span> x)</span></span>; <span class="comment">//sigmoid激活函数</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetOutput1</span><span class="params">()</span></span>; <span class="comment">//得到隐含层输出</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetOutput2</span><span class="params">()</span></span>; <span class="comment">//得到输出层输出</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetDeviation1</span><span class="params">()</span></span>; <span class="comment">//得到隐含层误差</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetDeviation2</span><span class="params">()</span></span>; <span class="comment">//得到输出层误差</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Feedback1</span><span class="params">()</span></span>; <span class="comment">//反馈输入层与隐含层之间的权重</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Feedback2</span><span class="params">()</span></span>; <span class="comment">//反馈隐含层与输出层之间的权重</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Train</span><span class="params">()</span></span>; <span class="comment">//训练</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>; <span class="comment">//测试</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BP_H_INCLUDED</span></span></div></pre></td></tr></table></figure><h3 id="BP-cpp文件"><a href="#BP-cpp文件" class="headerlink" title="BP.cpp文件"></a>BP.cpp文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BP.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//初始化各参数</span></div><div class="line"><span class="keyword">void</span> BP::Init()</div><div class="line">&#123;</div><div class="line">    srand(time(<span class="literal">NULL</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INPUT_LAYER; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; HIDDEN_LAYER; j++)</div><div class="line">            weight1_array[i][j] = rand()/(<span class="keyword">double</span>)(RAND_MAX) * <span class="number">2</span> - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIDDEN_LAYER; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OUTPUT_LAYER; j++)</div><div class="line">            weight2_array[i][j] = rand()/(<span class="keyword">double</span>)(RAND_MAX) * <span class="number">2</span> - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIDDEN_LAYER; i++)</div><div class="line">        threshold1_array[i] = rand()/(<span class="keyword">double</span>)(RAND_MAX) * <span class="number">2</span> - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; OUTPUT_LAYER; i++)</div><div class="line">        threshold2_array[i] = rand()/(<span class="keyword">double</span>)(RAND_MAX) * <span class="number">2</span> - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//sigmoid激活函数</span></div><div class="line"><span class="keyword">double</span> BP::Sigmoid(<span class="keyword">double</span> x)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + <span class="built_in">exp</span>(-x));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//得到隐含层输出</span></div><div class="line"><span class="keyword">void</span> BP::GetOutput1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; HIDDEN_LAYER; j++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">double</span> total = threshold1_array[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INPUT_LAYER; i++)</div><div class="line">            total += input_array[i] * weight1_array[i][j];</div><div class="line">        output1_array[j] = Sigmoid(total);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//得到输出层输出</span></div><div class="line"><span class="keyword">void</span> BP::GetOutput2()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OUTPUT_LAYER; j++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">double</span> total = threshold2_array[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIDDEN_LAYER; i++)</div><div class="line">            total += output1_array[i] * weight2_array[i][j];</div><div class="line">        output2_array[j] = Sigmoid(total);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//得到隐含层误差</span></div><div class="line"><span class="keyword">void</span> BP::GetDeviation1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIDDEN_LAYER; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OUTPUT_LAYER; j++)</div><div class="line">            total += weight2_array[i][j] * deviation2_array[j];</div><div class="line">        deviation1_array[i] = (output1_array[i]) * (<span class="number">1.0</span> - output1_array[i]) * total;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//得到输出层误差</span></div><div class="line"><span class="keyword">void</span> BP::GetDeviation2()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; OUTPUT_LAYER; i++)</div><div class="line">        deviation2_array[i] = (output2_array[i]) * (<span class="number">1.0</span> - output2_array[i]) * (output2_array[i] - aim_array[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//反馈输入层与隐含层之间的权重</span></div><div class="line"><span class="keyword">void</span> BP::Feedback1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; HIDDEN_LAYER; j++)</div><div class="line">    &#123;</div><div class="line">        threshold1_array[j] -= LEARN_RATE * deviation1_array[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INPUT_LAYER; i++)</div><div class="line">            weight1_array[i][j] = weight1_array[i][j] - LEARN_RATE * input_array[i] * deviation1_array[j];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//反馈隐含层与输出层之间的权重</span></div><div class="line"><span class="keyword">void</span> BP::Feedback2()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OUTPUT_LAYER; j++)</div><div class="line">    &#123;</div><div class="line">        threshold2_array[j] = threshold2_array[j] - LEARN_RATE * deviation2_array[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIDDEN_LAYER; i++)</div><div class="line">            weight2_array[i][j] = weight2_array[i][j] - LEARN_RATE * output1_array[i] * deviation2_array[j];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//训练</span></div><div class="line"><span class="keyword">void</span> BP::Train()</div><div class="line">&#123;</div><div class="line">    FILE *train_images;</div><div class="line">    FILE *train_labels;</div><div class="line">    train_images = fopen(<span class="string">"train-images.idx3-ubyte"</span>, <span class="string">"rb"</span>);</div><div class="line">    train_labels = fopen(<span class="string">"train-labels.idx1-ubyte"</span>, <span class="string">"rb"</span>);</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> image[INPUT_LAYER];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> label[OUTPUT_LAYER];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> temp[<span class="number">100</span>];</div><div class="line">    <span class="comment">//读取文件开头</span></div><div class="line">    fread(temp, <span class="number">1</span>, <span class="number">16</span>, train_images);</div><div class="line">    fread(temp, <span class="number">1</span>, <span class="number">8</span>, train_labels);</div><div class="line">    <span class="keyword">int</span> times = <span class="number">0</span>; <span class="comment">//当前训练了几次</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"开始训练..."</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">while</span> (!feof(train_images) &amp;&amp; !feof(train_labels))</div><div class="line">    &#123;</div><div class="line">        fread(image, <span class="number">1</span>, INPUT_LAYER, train_images);</div><div class="line">        fread(label, <span class="number">1</span>, <span class="number">1</span>, train_labels);</div><div class="line">        <span class="comment">//设置输入向量</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INPUT_LAYER; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)image[i] &lt; <span class="number">64</span>)</div><div class="line">                input_array[i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                input_array[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置目标值</span></div><div class="line">        <span class="keyword">int</span> index = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)label[<span class="number">0</span>];</div><div class="line">        <span class="built_in">memset</span>(aim_array, <span class="number">0</span>, <span class="keyword">sizeof</span>(aim_array));</div><div class="line">        aim_array[index] = <span class="number">1</span>;</div><div class="line">        GetOutput1(); <span class="comment">//得到隐含层输出</span></div><div class="line">        GetOutput2(); <span class="comment">//得到输出层输出</span></div><div class="line">        GetDeviation2(); <span class="comment">//得到输出层误差</span></div><div class="line">        GetDeviation1(); <span class="comment">//得到隐含层误差</span></div><div class="line">        Feedback1(); <span class="comment">//反馈输入层与隐含层之间的权重</span></div><div class="line">        Feedback2(); <span class="comment">//反馈隐含层与输出层之间的权重</span></div><div class="line">        ++times;</div><div class="line">        <span class="keyword">if</span>(times % <span class="number">2000</span> == <span class="number">0</span>)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"已训练 "</span> &lt;&lt; times &lt;&lt; <span class="string">"组"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">if</span>(times % <span class="number">10000</span> == <span class="number">0</span>) <span class="comment">//每10000组就测试一下</span></div><div class="line">            Test();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试</span></div><div class="line"><span class="keyword">void</span> BP::Test()</div><div class="line">&#123;</div><div class="line">    FILE *test_images;</div><div class="line">    FILE *test_labels;</div><div class="line">    test_images = fopen(<span class="string">"t10k-images.idx3-ubyte"</span>, <span class="string">"rb"</span>);</div><div class="line">    test_labels = fopen(<span class="string">"t10k-labels.idx1-ubyte"</span>, <span class="string">"rb"</span>);</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> image[<span class="number">784</span>];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> label[<span class="number">10</span>];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> temp[<span class="number">100</span>];</div><div class="line">    <span class="comment">//读取文件开头</span></div><div class="line">    fread(temp, <span class="number">1</span>, <span class="number">16</span>, test_images);</div><div class="line">    fread(temp, <span class="number">1</span>, <span class="number">8</span>, test_labels);</div><div class="line">    <span class="keyword">int</span> total_times = <span class="number">0</span>; <span class="comment">//当前测试了几次</span></div><div class="line">    <span class="keyword">int</span> success_times = <span class="number">0</span>; <span class="comment">//当前正确了几次</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"开始测试..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">while</span> (!feof(test_images) &amp;&amp; !feof(test_labels))</div><div class="line">    &#123;</div><div class="line">        fread(image, <span class="number">1</span>, INPUT_LAYER, test_images);</div><div class="line">        fread(label, <span class="number">1</span>, <span class="number">1</span>, test_labels);</div><div class="line">        <span class="comment">//设置输入向量</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INPUT_LAYER; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)image[i] &lt; <span class="number">64</span>)</div><div class="line">                input_array[i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                input_array[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置目标值</span></div><div class="line">        <span class="built_in">memset</span>(aim_array, <span class="number">0</span>, <span class="keyword">sizeof</span>(aim_array));</div><div class="line">        <span class="keyword">int</span> index = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)label[<span class="number">0</span>];</div><div class="line">        aim_array[index] = <span class="number">1</span>;</div><div class="line">        GetOutput1(); <span class="comment">//得到隐含层输出</span></div><div class="line">        GetOutput2(); <span class="comment">//得到输出层输出</span></div><div class="line">        <span class="comment">//以输出结果中最大的那个值所对应的数字作为预测的数字</span></div><div class="line">        <span class="keyword">double</span> maxn = <span class="number">-99999999</span>;</div><div class="line">        <span class="keyword">int</span> max_index = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; OUTPUT_LAYER; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (output2_array[i] &gt; maxn)</div><div class="line">            &#123;</div><div class="line">                maxn = output2_array[i];</div><div class="line">                max_index = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果预测正确</span></div><div class="line">        <span class="keyword">if</span> (aim_array[max_index] == <span class="number">1</span>)</div><div class="line">            ++success_times;</div><div class="line">        ++total_times;</div><div class="line">        <span class="keyword">if</span>(total_times % <span class="number">2000</span> == <span class="number">0</span>)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"已测试："</span> &lt;&lt; total_times &lt;&lt; <span class="string">"组"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"正确率: "</span> &lt;&lt; <span class="number">100.0</span> * success_times / total_times &lt;&lt; <span class="string">"%"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"*************************"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    BP bp;</div><div class="line">    bp.Init();</div><div class="line">    <span class="comment">//训练数据反复利用TRAIN_TIMES次</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TRAIN_TIMES; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"开始第"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"轮迭代"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        bp.Train();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>本实验中，BP神经网络中人为可调的参数就两个，一个是隐含层维度，还有一个是学习率。隐含层维度影响了程序判断的正确性，同时也影响着程序运行的时间。学习率的设置也很有讲究，过小会导致收敛过慢以及陷入局部最优，过大会使得结果发生震荡。</p><p>此外，由于BP神经网络在训练时有遗忘旧样本的趋势，所以对于60000组测试数据，我进行了反复利用，设置了迭代次数，使得正确率可以进一步提高，但也不可避免地增加了程序的运行时间。</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>每一轮迭代都完整的使用了60000组训练数据，每训练10000组训练数据，就进行一次测试，取最佳准确率。      </p><table><thead><tr><th style="text-align:center">- 第几轮迭代</th><th style="text-align:center">- 最佳准确率</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">92.22%</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">93.64%</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">94.13%</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">94.47%</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">94.69%</td></tr></tbody></table><p>可以发现，正确率的增长逐渐变得缓慢，程序的运行时间也要相应的加长。</p><h2 id="可以改进的地方"><a href="#可以改进的地方" class="headerlink" title="可以改进的地方"></a>可以改进的地方</h2><p>由于60000组训练数据被反复训练，所以时间久了会出现过拟合现象，这可以通过画出”学习曲线”来观测，具体可以借鉴吴恩达老师的课程。解决的办法是每次随机地从60000组数据中抽取一部分进行训练，而不是60000组按顺序循环。</p><p>此外，学习率我设为了固定值，其实可以根据训练的推进逐步变小，可以达到更好的效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;人工智能的最后一次作业，搭建BP神经网络实现手写体数字识别。&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="人工智能" scheme="https://luxuantao.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="神经网络" scheme="https://luxuantao.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>俄罗斯方块</title>
    <link href="https://luxuantao.github.io/2018/07/29/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
    <id>https://luxuantao.github.io/2018/07/29/俄罗斯方块/</id>
    <published>2018-07-29T00:31:05.000Z</published>
    <updated>2018-07-29T00:39:31.580Z</updated>
    
    <content type="html"><![CDATA[<hr><p>多平台的一次作业，使用wxpython实现俄罗斯方块。</p><a id="more"></a><p>代码改编自<a href="http://zetcode.com/wxpython/thetetrisgame/" target="_blank" rel="external">http://zetcode.com/wxpython/thetetrisgame/</a></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> wx</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">SPEED = <span class="number">300</span></div><div class="line">selectDifficulty = <span class="number">101</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tetris</span><span class="params">(wx.Frame)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent, title)</span>:</span></div><div class="line">        wx.Frame.__init__(self, parent, title=title, size=(<span class="number">324</span>, <span class="number">684</span>))</div><div class="line">        </div><div class="line">        self.icon = wx.Icon(name=<span class="string">"icon.ico"</span>, type=wx.BITMAP_TYPE_ICO)</div><div class="line">        self.SetIcon(self.icon)</div><div class="line">        </div><div class="line">        self.menuBar = wx.MenuBar()</div><div class="line">        </div><div class="line">        self.menu1 = wx.Menu()</div><div class="line">        self.menu1.Append(wx.ID_EXIT, <span class="string">u"退出(&amp;X)"</span>)</div><div class="line">        self.Bind(wx.EVT_MENU, self.OnClose, id=wx.ID_EXIT)</div><div class="line">        self.menu1.Append(<span class="number">501</span>, <span class="string">u"重新开始(&amp;R)"</span>)</div><div class="line">        self.Bind(wx.EVT_MENU, self.OnRestart, id=<span class="number">501</span>)</div><div class="line">        self.menu1.Append(<span class="number">502</span>, <span class="string">u"查看耗时(需要先暂停游戏)"</span>)</div><div class="line">        self.Bind(wx.EVT_MENU, self.OnCostTime, id=<span class="number">502</span>)</div><div class="line">        self.menuBar.Append(self.menu1, <span class="string">u"开始(&amp;F)"</span>)</div><div class="line">        self.menuBar.Enable(<span class="number">502</span>, <span class="keyword">False</span>)    </div><div class="line">        </div><div class="line">        self.menu2 = wx.Menu()</div><div class="line">        self.menu2.Append(<span class="number">101</span>, <span class="string">u"简单\tCtrl+1"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">        self.menu2.Append(<span class="number">102</span>, <span class="string">u"中等\tCtrl+2"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">        self.menu2.Append(<span class="number">103</span>, <span class="string">u"困难\tCtrl+3"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">        self.Bind(wx.EVT_MENU_RANGE, self.OnDifficulty, id=<span class="number">101</span>, id2=<span class="number">103</span>)</div><div class="line">        self.menuBar.Append(self.menu2, <span class="string">u"难度(&amp;D)"</span>) </div><div class="line">        <span class="keyword">global</span> selectDifficulty</div><div class="line">        self.menuBar.Check(selectDifficulty, <span class="keyword">True</span>)</div><div class="line">          </div><div class="line">        self.menu3 = wx.Menu()</div><div class="line">        self.menu3.Append(<span class="number">301</span>, <span class="string">u"程序信息(&amp;I)\tF1"</span>)</div><div class="line">        self.Bind(wx.EVT_MENU, self.OnAbout, id=<span class="number">301</span>)</div><div class="line">        self.menu3.Append(<span class="number">302</span>, <span class="string">u"帮助(&amp;H)\tF2"</span>)</div><div class="line">        self.Bind(wx.EVT_MENU, self.OnHelp, id=<span class="number">302</span>)</div><div class="line">        self.menuBar.Append(self.menu3, <span class="string">u"关于(&amp;A)"</span>)</div><div class="line">           </div><div class="line">        self.SetMenuBar(self.menuBar)</div><div class="line"></div><div class="line">        self.statusbar = self.CreateStatusBar()</div><div class="line">        self.statusbar.SetStatusText(<span class="string">'0'</span>)</div><div class="line">        self.board = Board(self)</div><div class="line">        self.board.SetFocus()</div><div class="line">        self.board.start()</div><div class="line"></div><div class="line">        self.Centre()</div><div class="line">        self.Show(<span class="keyword">True</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnDifficulty</span><span class="params">(self, evt)</span>:</span></div><div class="line">        number = evt.GetId()</div><div class="line">        <span class="keyword">global</span> SPEED</div><div class="line">        <span class="keyword">global</span> selectDifficulty</div><div class="line">        <span class="keyword">if</span> number == <span class="number">101</span>:</div><div class="line">            SPEED = <span class="number">300</span></div><div class="line">            selectDifficulty = <span class="number">101</span></div><div class="line">        <span class="keyword">elif</span> number == <span class="number">102</span>:</div><div class="line">            SPEED = <span class="number">200</span></div><div class="line">            selectDifficulty = <span class="number">102</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            SPEED = <span class="number">100</span></div><div class="line">            selectDifficulty = <span class="number">103</span></div><div class="line">        Tetris(<span class="keyword">None</span>, title=<span class="string">'Tetris'</span>)</div><div class="line">        self.Destroy()  </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnRestart</span><span class="params">(self, evt)</span>:</span>     </div><div class="line">        Tetris(<span class="keyword">None</span>, title=<span class="string">'Tetris'</span>)</div><div class="line">        self.Destroy()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnCostTime</span><span class="params">(self, evt)</span>:</span> <span class="comment"># 查看耗时</span></div><div class="line">        wx.MessageBox(<span class="string">u'您已经坚持了 %.1f 秒'</span>%(<span class="number">1.0</span> * self.board.costTime * self.board.Speed / <span class="number">1000</span>),</div><div class="line">           <span class="string">u"用时"</span>, wx.OK | wx.ICON_INFORMATION, self)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnAbout</span><span class="params">(self, evt)</span>:</span> </div><div class="line">        wx.MessageBox(<span class="string">u"16级第7次上机练习(WX)\n俄罗斯方块"</span>,</div><div class="line">            <span class="string">u"16Lab7(WX)"</span>, wx.OK | wx.ICON_INFORMATION, self)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnHelp</span><span class="params">(self, evt)</span>:</span> </div><div class="line">        wx.MessageBox(<span class="string">u"按P暂停\n按D加速下落\n按空格直接落下"</span>, <span class="string">u"帮助"</span>, wx.OK | wx.ICON_INFORMATION, self)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnClose</span><span class="params">(self, evt)</span>:</span></div><div class="line">        self.Close()</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span><span class="params">(wx.Panel)</span>:</span></div><div class="line">    </div><div class="line">    BoardWidth = <span class="number">10</span></div><div class="line">    BoardHeight = <span class="number">22</span></div><div class="line">    Speed = <span class="number">300</span></div><div class="line">    ID_TIMER = <span class="number">1</span></div><div class="line">    costTime = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent)</span>:</span> </div><div class="line">        wx.Panel.__init__(self, parent, style=wx.WANTS_CHARS)</div><div class="line">        <span class="keyword">global</span> SPEED</div><div class="line">        Board.Speed = SPEED</div><div class="line">        </div><div class="line">        self.initBoard()</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initBoard</span><span class="params">(self)</span>:</span>    </div><div class="line">        </div><div class="line">        Board.costTime = <span class="number">0</span></div><div class="line">        self.timer = wx.Timer(self, Board.ID_TIMER)</div><div class="line">        self.isWaitingAfterLine = <span class="keyword">False</span></div><div class="line">        self.curPiece = Shape()</div><div class="line">        self.nextPiece = Shape()</div><div class="line">        self.curX = <span class="number">0</span></div><div class="line">        self.curY = <span class="number">0</span></div><div class="line">        self.numLinesRemoved = <span class="number">0</span></div><div class="line">        self.board = []</div><div class="line"></div><div class="line">        self.isStarted = <span class="keyword">False</span></div><div class="line">        self.isPaused = <span class="keyword">False</span></div><div class="line"></div><div class="line">        self.Bind(wx.EVT_PAINT, self.OnPaint)</div><div class="line">        self.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)</div><div class="line">        self.Bind(wx.EVT_TIMER, self.OnTimer, id=Board.ID_TIMER)</div><div class="line"></div><div class="line">        self.clearBoard()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shapeAt</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.board[(y * Board.BoardWidth) + x]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setShapeAt</span><span class="params">(self, x, y, shape)</span>:</span></div><div class="line">        </div><div class="line">        self.board[(y * Board.BoardWidth) + x] = shape</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">squareWidth</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.GetClientSize().GetWidth() / Board.BoardWidth</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">squareHeight</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.GetClientSize().GetHeight() / Board.BoardHeight</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        self.isStarted = <span class="keyword">True</span></div><div class="line">        self.isWaitingAfterLine = <span class="keyword">False</span></div><div class="line">        self.numLinesRemoved = <span class="number">0</span></div><div class="line">        self.clearBoard()</div><div class="line"></div><div class="line">        self.newPiece()</div><div class="line">        self.timer.Start(Board.Speed)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pause</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.isStarted:</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        self.isPaused = <span class="keyword">not</span> self.isPaused</div><div class="line">        statusbar = self.GetParent().statusbar</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            self.GetParent().GetMenuBar().Enable(<span class="number">502</span>, <span class="keyword">True</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.GetParent().GetMenuBar().Enable(<span class="number">502</span>, <span class="keyword">False</span>)    </div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            self.timer.Stop()</div><div class="line">            statusbar.SetStatusText(<span class="string">'paused'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.timer.Start(Board.Speed)</div><div class="line">            statusbar.SetStatusText(str(self.numLinesRemoved))</div><div class="line"></div><div class="line">        self.Refresh()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clearBoard</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(Board.BoardHeight * Board.BoardWidth):</div><div class="line">            self.board.append(Tetrominoes.NoShape)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnPaint</span><span class="params">(self, event)</span>:</span></div><div class="line"></div><div class="line">        dc = wx.PaintDC(self)        </div><div class="line"></div><div class="line">        size = self.GetClientSize()</div><div class="line">        boardTop = size.GetHeight() - Board.BoardHeight * self.squareHeight()</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(Board.BoardHeight):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(Board.BoardWidth):</div><div class="line">                shape = self.shapeAt(j, Board.BoardHeight - i - <span class="number">1</span>)</div><div class="line">                <span class="keyword">if</span> shape != Tetrominoes.NoShape:</div><div class="line">                    self.drawSquare(dc,</div><div class="line">                        <span class="number">0</span> + j * self.squareWidth(),</div><div class="line">                        boardTop + i * self.squareHeight(), shape)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.curPiece.shape() != Tetrominoes.NoShape:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">                x = self.curX + self.curPiece.x(i)</div><div class="line">                y = self.curY - self.curPiece.y(i)</div><div class="line">                self.drawSquare(dc, <span class="number">0</span> + x * self.squareWidth(),</div><div class="line">                    boardTop + (Board.BoardHeight - y - <span class="number">1</span>) * self.squareHeight(),</div><div class="line">                    self.curPiece.shape())</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnKeyDown</span><span class="params">(self, event)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.isStarted <span class="keyword">or</span> self.curPiece.shape() == Tetrominoes.NoShape:</div><div class="line">            event.Skip()</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        keycode = event.GetKeyCode()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> keycode == ord(<span class="string">'P'</span>) <span class="keyword">or</span> keycode == ord(<span class="string">'p'</span>):</div><div class="line">            self.pause()</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">elif</span> keycode == wx.WXK_LEFT:</div><div class="line">            self.tryMove(self.curPiece, self.curX - <span class="number">1</span>, self.curY)</div><div class="line">        <span class="keyword">elif</span> keycode == wx.WXK_RIGHT:</div><div class="line">            self.tryMove(self.curPiece, self.curX + <span class="number">1</span>, self.curY)</div><div class="line">        <span class="keyword">elif</span> keycode == wx.WXK_DOWN:</div><div class="line">            self.tryMove(self.curPiece.rotatedRight(), self.curX, self.curY)</div><div class="line">        <span class="keyword">elif</span> keycode == wx.WXK_UP:</div><div class="line">            self.tryMove(self.curPiece.rotatedLeft(), self.curX, self.curY)</div><div class="line">        <span class="keyword">elif</span> keycode == wx.WXK_SPACE:</div><div class="line">            self.dropDown()</div><div class="line">        <span class="keyword">elif</span> keycode == ord(<span class="string">'D'</span>) <span class="keyword">or</span> keycode == ord(<span class="string">'d'</span>):</div><div class="line">            self.oneLineDown()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            event.Skip()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnTimer</span><span class="params">(self, event)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> event.GetId() == Board.ID_TIMER:</div><div class="line">            <span class="keyword">if</span> self.isWaitingAfterLine:</div><div class="line">                self.isWaitingAfterLine = <span class="keyword">False</span></div><div class="line">                self.newPiece()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.oneLineDown()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            event.Skip()</div><div class="line"></div><div class="line">        Board.costTime += <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dropDown</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        newY = self.curY</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> newY &gt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.tryMove(self.curPiece, self.curX, newY - <span class="number">1</span>):</div><div class="line">                <span class="keyword">break</span></div><div class="line">            newY -= <span class="number">1</span></div><div class="line"></div><div class="line">        self.pieceDropped()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">oneLineDown</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tryMove(self.curPiece, self.curX, self.curY - <span class="number">1</span>):</div><div class="line">            self.pieceDropped()</div><div class="line">            </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pieceDropped</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            x = self.curX + self.curPiece.x(i)</div><div class="line">            y = self.curY - self.curPiece.y(i)</div><div class="line">            self.setShapeAt(x, y, self.curPiece.shape())</div><div class="line"></div><div class="line">        self.removeFullLines()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.isWaitingAfterLine:</div><div class="line">            self.newPiece()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeFullLines</span><span class="params">(self)</span>:</span></div><div class="line">    </div><div class="line">        numFullLines = <span class="number">0</span></div><div class="line"></div><div class="line">        statusbar = self.GetParent().statusbar</div><div class="line"></div><div class="line">        rowsToRemove = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(Board.BoardHeight):</div><div class="line">            n = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(Board.BoardWidth):</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.shapeAt(j, i) == Tetrominoes.NoShape:</div><div class="line">                    n = n + <span class="number">1</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> n == <span class="number">10</span>:</div><div class="line">                rowsToRemove.append(i)</div><div class="line"></div><div class="line">        rowsToRemove.reverse()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> rowsToRemove:</div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(m, Board.BoardHeight):</div><div class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> range(Board.BoardWidth):</div><div class="line">                        self.setShapeAt(l, k, self.shapeAt(l, k + <span class="number">1</span>))</div><div class="line"></div><div class="line">            numFullLines = numFullLines + len(rowsToRemove)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> numFullLines &gt; <span class="number">0</span>:</div><div class="line">                self.numLinesRemoved = self.numLinesRemoved + numFullLines</div><div class="line">                statusbar.SetStatusText(str(self.numLinesRemoved)) </div><div class="line">                self.isWaitingAfterLine = <span class="keyword">True</span></div><div class="line">                self.curPiece.setShape(Tetrominoes.NoShape)</div><div class="line">                self.Refresh()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newPiece</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.curPiece = self.nextPiece</div><div class="line">        statusbar = self.GetParent().statusbar</div><div class="line">        self.nextPiece.setRandomShape()</div><div class="line">        self.curX = Board.BoardWidth / <span class="number">2</span> + <span class="number">1</span></div><div class="line">        self.curY = Board.BoardHeight - <span class="number">1</span> + self.curPiece.minY()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tryMove(self.curPiece, self.curX, self.curY):</div><div class="line">            </div><div class="line">            self.curPiece.setShape(Tetrominoes.NoShape)</div><div class="line">            self.timer.Stop()</div><div class="line">            self.isStarted = <span class="keyword">False</span></div><div class="line">            statusbar.SetStatusText(<span class="string">'Game over'</span>)</div><div class="line">            </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tryMove</span><span class="params">(self, newPiece, newX, newY)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            </div><div class="line">            x = newX + newPiece.x(i)</div><div class="line">            y = newY - newPiece.y(i)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= Board.BoardWidth <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= Board.BoardHeight:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> self.shapeAt(x, y) != Tetrominoes.NoShape:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        self.curPiece = newPiece</div><div class="line">        self.curX = newX</div><div class="line">        self.curY = newY</div><div class="line">        self.Refresh()</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawSquare</span><span class="params">(self, dc, x, y, shape)</span>:</span></div><div class="line">        </div><div class="line">        colors = [<span class="string">'#000000'</span>, <span class="string">'#CC6666'</span>, <span class="string">'#66CC66'</span>, <span class="string">'#6666CC'</span>,</div><div class="line">                  <span class="string">'#CCCC66'</span>, <span class="string">'#CC66CC'</span>, <span class="string">'#66CCCC'</span>, <span class="string">'#DAAA00'</span>]</div><div class="line"></div><div class="line">        light = [<span class="string">'#000000'</span>, <span class="string">'#F89FAB'</span>, <span class="string">'#79FC79'</span>, <span class="string">'#7979FC'</span>, </div><div class="line">                 <span class="string">'#FCFC79'</span>, <span class="string">'#FC79FC'</span>, <span class="string">'#79FCFC'</span>, <span class="string">'#FCC600'</span>]</div><div class="line"></div><div class="line">        dark = [<span class="string">'#000000'</span>, <span class="string">'#803C3B'</span>, <span class="string">'#3B803B'</span>, <span class="string">'#3B3B80'</span>, </div><div class="line">                 <span class="string">'#80803B'</span>, <span class="string">'#803B80'</span>, <span class="string">'#3B8080'</span>, <span class="string">'#806200'</span>]</div><div class="line"></div><div class="line">        pen = wx.Pen(light[shape])</div><div class="line">        pen.SetCap(wx.CAP_PROJECTING)</div><div class="line">        dc.SetPen(pen)</div><div class="line"></div><div class="line">        dc.DrawLine(x, y + self.squareHeight() - <span class="number">1</span>, x, y)</div><div class="line">        dc.DrawLine(x, y, x + self.squareWidth() - <span class="number">1</span>, y)</div><div class="line"></div><div class="line">        darkpen = wx.Pen(dark[shape])</div><div class="line">        darkpen.SetCap(wx.CAP_PROJECTING)</div><div class="line">        dc.SetPen(darkpen)</div><div class="line"></div><div class="line">        dc.DrawLine(x + <span class="number">1</span>, y + self.squareHeight() - <span class="number">1</span>,</div><div class="line">            x + self.squareWidth() - <span class="number">1</span>, y + self.squareHeight() - <span class="number">1</span>)</div><div class="line">        dc.DrawLine(x + self.squareWidth() - <span class="number">1</span>, </div><div class="line">        y + self.squareHeight() - <span class="number">1</span>, x + self.squareWidth() - <span class="number">1</span>, y + <span class="number">1</span>)</div><div class="line"></div><div class="line">        dc.SetPen(wx.TRANSPARENT_PEN)</div><div class="line">        dc.SetBrush(wx.Brush(colors[shape]))</div><div class="line">        dc.DrawRectangle(x + <span class="number">1</span>, y + <span class="number">1</span>, self.squareWidth() - <span class="number">2</span>, </div><div class="line">        self.squareHeight() - <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tetrominoes</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    NoShape = <span class="number">0</span></div><div class="line">    ZShape = <span class="number">1</span></div><div class="line">    SShape = <span class="number">2</span></div><div class="line">    LineShape = <span class="number">3</span></div><div class="line">    TShape = <span class="number">4</span></div><div class="line">    SquareShape = <span class="number">5</span></div><div class="line">    LShape = <span class="number">6</span></div><div class="line">    MirroredLShape = <span class="number">7</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    coordsTable = (</div><div class="line">        ((<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">0</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">-1</span>, <span class="number">0</span>),    (<span class="number">-1</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>),     (<span class="number">0</span>, <span class="number">2</span>)),</div><div class="line">        ((<span class="number">-1</span>, <span class="number">0</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>),     (<span class="number">1</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">-1</span>, <span class="number">-1</span>),   (<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">1</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.coords = [[<span class="number">0</span>,<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">        self.pieceShape = Tetrominoes.NoShape</div><div class="line"></div><div class="line">        self.setShape(Tetrominoes.NoShape)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shape</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.pieceShape</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setShape</span><span class="params">(self, shape)</span>:</span></div><div class="line">        </div><div class="line">        table = Shape.coordsTable[shape]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>):</div><div class="line">                self.coords[i][j] = table[i][j]</div><div class="line"></div><div class="line">        self.pieceShape = shape</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setRandomShape</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.setShape(random.randint(<span class="number">1</span>, <span class="number">7</span>))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, index)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.coords[index][<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self, index)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.coords[index][<span class="number">1</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setX</span><span class="params">(self, index, x)</span>:</span></div><div class="line">        </div><div class="line">        self.coords[index][<span class="number">0</span>] = x</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setY</span><span class="params">(self, index, y)</span>:</span></div><div class="line">        </div><div class="line">        self.coords[index][<span class="number">1</span>] = y</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minX</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = min(m, self.coords[i][<span class="number">0</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxX</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = max(m, self.coords[i][<span class="number">0</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minY</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = min(m, self.coords[i][<span class="number">1</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxY</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = max(m, self.coords[i][<span class="number">1</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotatedLeft</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.pieceShape == Tetrominoes.SquareShape:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line"></div><div class="line">        result = Shape()</div><div class="line">        result.pieceShape = self.pieceShape</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            result.setX(i, self.y(i))</div><div class="line">            result.setY(i, -self.x(i))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotatedRight</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.pieceShape == Tetrominoes.SquareShape:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line"></div><div class="line">        result = Shape()</div><div class="line">        result.pieceShape = self.pieceShape</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            result.setX(i, -self.y(i))</div><div class="line">            result.setY(i, self.x(i))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    os.chdir(os.path.abspath(sys.path[<span class="number">0</span>]))</div><div class="line">    app = wx.App()</div><div class="line">    Tetris(<span class="keyword">None</span>, title=<span class="string">'Tetris'</span>)</div><div class="line">    app.MainLoop()</div></pre></td></tr></table></figure><h2 id="具体改动"><a href="#具体改动" class="headerlink" title="具体改动"></a>具体改动</h2><p>解决了在windows下不能够直接使用方向键的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent)</span>:</span></div><div class="line">        wx.Panel.__init__(self, parent, style=wx.WANTS_CHARS)</div></pre></td></tr></table></figure><p>扩大了默认的游戏界面大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wx.Frame.__init__(self, parent, title=title, size=(<span class="number">324</span>, <span class="number">684</span>))</div></pre></td></tr></table></figure><p>增加了图标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.icon = wx.Icon(name=<span class="string">"icon.ico"</span>, type=wx.BITMAP_TYPE_ICO)</div><div class="line">self.SetIcon(self.icon)</div></pre></td></tr></table></figure><p>增加了开始菜单栏（包括退出，重新开始，查看用时）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">self.menu1 = wx.Menu()</div><div class="line">self.menu1.Append(wx.ID_EXIT, <span class="string">u"退出(&amp;X)"</span>)</div><div class="line">self.Bind(wx.EVT_MENU, self.OnClose, id=wx.ID_EXIT)</div><div class="line">self.menu1.Append(<span class="number">501</span>, <span class="string">u"重新开始(&amp;R)"</span>)</div><div class="line">self.menu1.Append(<span class="number">502</span>, <span class="string">u"查看耗时(需要先暂停游戏)"</span>)</div><div class="line">self.Bind(wx.EVT_MENU, self.OnCostTime, id=<span class="number">502</span>)</div><div class="line">self.Bind(wx.EVT_MENU, self.OnRestart, id=<span class="number">501</span>)</div><div class="line">self.menuBar.Append(self.menu1, <span class="string">u"开始(&amp;F)"</span>)</div><div class="line">self.menuBar.Enable(<span class="number">502</span>, <span class="keyword">False</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnRestart</span><span class="params">(self, evt)</span>:</span>     </div><div class="line">    Tetris(<span class="keyword">None</span>, title=<span class="string">'Tetris'</span>)</div><div class="line">    self.Destroy()</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnCostTime</span><span class="params">(self, evt)</span>:</span> <span class="comment"># 查看耗时</span></div><div class="line">  wx.MessageBox(<span class="string">u'您已经坚持了 %.1f 秒'</span>%(<span class="number">1.0</span> * self.board.costTime * self.board.Speed / <span class="number">1000</span>),</div><div class="line">           <span class="string">u"用时"</span>, wx.OK | wx.ICON_INFORMATION, self)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> self.isPaused:</div><div class="line">    self.GetParent().GetMenuBar().Enable(<span class="number">502</span>, <span class="keyword">True</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    self.GetParent().GetMenuBar().Enable(<span class="number">502</span>, <span class="keyword">False</span>)</div></pre></td></tr></table></figure><p>增加了难度选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">self.menu2 = wx.Menu()</div><div class="line">self.menu2.Append(<span class="number">101</span>, <span class="string">u"简单\tCtrl+1"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">self.menu2.Append(<span class="number">102</span>, <span class="string">u"中等\tCtrl+2"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">self.menu2.Append(<span class="number">103</span>, <span class="string">u"困难\tCtrl+3"</span>, <span class="string">u""</span>, wx.ITEM_RADIO)</div><div class="line">self.Bind(wx.EVT_MENU_RANGE, self.OnDifficulty, id=<span class="number">101</span>, id2=<span class="number">103</span>)</div><div class="line">self.menuBar.Append(self.menu2, <span class="string">u"难度(&amp;D)"</span>) </div><div class="line"><span class="keyword">global</span> selectDifficulty</div><div class="line">self.menuBar.Check(selectDifficulty, <span class="keyword">True</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnDifficulty</span><span class="params">(self, evt)</span>:</span></div><div class="line">        number = evt.GetId()</div><div class="line">        <span class="keyword">global</span> SPEED</div><div class="line">        <span class="keyword">global</span> selectDifficulty</div><div class="line">        <span class="keyword">if</span> number == <span class="number">101</span>:</div><div class="line">            SPEED = <span class="number">300</span></div><div class="line">            selectDifficulty = <span class="number">101</span></div><div class="line">        <span class="keyword">elif</span> number == <span class="number">102</span>:</div><div class="line">            SPEED = <span class="number">200</span></div><div class="line">            selectDifficulty = <span class="number">102</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            SPEED = <span class="number">100</span></div><div class="line">            selectDifficulty = <span class="number">103</span></div><div class="line">        Tetris(<span class="keyword">None</span>, title=<span class="string">'Tetris'</span>)</div><div class="line">        self.Destroy()</div></pre></td></tr></table></figure><p>增加了关于菜单栏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">self.menu3 = wx.Menu()</div><div class="line">self.menu3.Append(<span class="number">301</span>, <span class="string">u"程序信息(&amp;I)\tF1"</span>)</div><div class="line">self.Bind(wx.EVT_MENU, self.OnHelp, id=<span class="number">301</span>)</div><div class="line">self.menuBar.Append(self.menu3, <span class="string">u"关于(&amp;A)"</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnHelp</span><span class="params">(self, evt)</span>:</span></div><div class="line">        wx.MessageBox(<span class="string">u"16级第7次上机练习(WX)\n俄罗斯方块"</span>,</div><div class="line">            <span class="string">u"16Lab7(WX)"</span>, wx.OK | wx.ICON_INFORMATION, self)</div></pre></td></tr></table></figure><h2 id="有个小BUG"><a href="#有个小BUG" class="headerlink" title="有个小BUG"></a>有个小BUG</h2><p>程序第一次跑，退出的时候会出现程序崩溃的提示。但第二次以后就正常了，不知道为什么。不光我的程序有问题，网上的示例程序也有这个问题。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>代码所在路径不能有中文。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;多平台的一次作业，使用wxpython实现俄罗斯方块。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="wxpython" scheme="https://luxuantao.github.io/tags/wxpython/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu磁盘空间清理</title>
    <link href="https://luxuantao.github.io/2018/07/09/ubuntu%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/"/>
    <id>https://luxuantao.github.io/2018/07/09/ubuntu磁盘空间清理/</id>
    <published>2018-07-09T05:20:33.000Z</published>
    <updated>2018-07-29T00:57:40.021Z</updated>
    
    <content type="html"><![CDATA[<hr><p>刚开始接触ubuntu的时候，装好系统没多久根目录就满了，而且就像是中了蠕虫病毒一样，就算你什么都没干，它也会不断地侵蚀你的硬盘空间，在重装了三次系统后，发现了问题所在。</p><a id="more"></a><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>来到<code>/var/log</code>目录下，这里存放了ubuntu的日志文件，其中<code>syslog</code> 和 <code>kern.log</code>这两个文件很大，事实上它们基本上每时每刻都在增长，可使用如下命令清理： </p><p><code>sudo -i</code> 改变权限，然后输入密码，执行： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rm -rf /var/log/*.gz</div><div class="line">rm -rf /var/log/*.1</div><div class="line">echo &quot;&quot; &gt; /var/log/dmesg</div><div class="line">echo &quot;&quot; &gt; /var/log/kern.log</div><div class="line">echo &quot;&quot; &gt; /var/log/messages</div><div class="line">echo &quot;&quot; &gt; /var/log/syslog</div></pre></td></tr></table></figure><p>发现一下子就能释放不少空间。</p><p>至于删除日志文件会不会有什么影响，目前亲测还没有遇到问题，应该将来也不会有问题，但是鉴于日志文件终究是有其存在的价值的，所以不到万不得已，建议不要删除，以免误操作。</p><p>一般来说，以下几条命令更为常用：</p><p><code>sudo apt-get autoclean</code>清理旧版本的软件缓存</p><p><code>sudo apt-get clean</code>清理所有软件缓存</p><p><code>sudo apt-get autoremove</code>删除系统不再使用的孤立软件</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>更进一步，我发现即使删除了日志文件后，过一阵子它还是会不断增长，如果你不嫌麻烦，那你可以自己隔一阵子就手动删一次，当然也可以写一个批处理程序自动隔一阵子删除，但终究治标不治本，而且反复地擦写对硬盘（尤其是固态硬盘）的损伤也大。想到日志文件之所以会不断地快速增长，肯定是系统出了什么问题，导致日志文件时刻都在记录错误，所以我们可以打开日志文件进行查看。</p><p>对我的电脑而言，其实是出现了<code>pcie</code>错误，日志文件中大部分的都是同样的东西，诸如<code>PCIe Bus Error</code>等。</p><p>解决方法如下：</p><p>打开终端，修改<code>/etc/default/grub</code>引导文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp /etc/default/grub /etc/default/grub.bak</div><div class="line">sudo -H gedit /etc/default/grub</div></pre></td></tr></table></figure><p>打开之后找到以下这句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</div></pre></td></tr></table></figure><p>然后将其改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash pci=nomsi&quot;</div></pre></td></tr></table></figure><p>保存关闭grub文件，更新grub引导，并重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo update-grub</div><div class="line">sudo reboot</div></pre></td></tr></table></figure><p>问题解决了，日志文件也恢复正常，不会再大量地记录这方面的错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;刚开始接触ubuntu的时候，装好系统没多久根目录就满了，而且就像是中了蠕虫病毒一样，就算你什么都没干，它也会不断地侵蚀你的硬盘空间，在重装了三次系统后，发现了问题所在。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://luxuantao.github.io/categories/Linux/"/>
    
    
      <category term="ubuntu" scheme="https://luxuantao.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>制作一个简易计算器</title>
    <link href="https://luxuantao.github.io/2018/04/20/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>https://luxuantao.github.io/2018/04/20/制作一个简易计算器/</id>
    <published>2018-04-20T10:35:57.000Z</published>
    <updated>2018-04-20T10:39:44.285Z</updated>
    
    <content type="html"><![CDATA[<hr><p>使用java的AWT包实现一个简易的计算器。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.event.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Frame frame;</div><div class="line">    <span class="keyword">private</span> Label label;</div><div class="line">    <span class="keyword">private</span> Panel panel;</div><div class="line">    <span class="keyword">private</span> Button button0,button1,button2,button3,button4,button5,button6,button7,button8,</div><div class="line">            button9,buttonequ,buttondiv,buttondot,buttonmul,buttonsub,buttonadd;</div><div class="line">    <span class="keyword">private</span> ButtonHandler listener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">()</span> </span>&#123;</div><div class="line">        frame = <span class="keyword">new</span> Frame(<span class="string">"My Calculator"</span>);</div><div class="line">        label = <span class="keyword">new</span> Label(<span class="string">"0"</span>, Label.RIGHT);</div><div class="line">        panel = <span class="keyword">new</span> Panel(<span class="keyword">new</span> GridLayout(<span class="number">4</span>, <span class="number">4</span>));</div><div class="line">        button0 = <span class="keyword">new</span> Button(<span class="string">"0"</span>);</div><div class="line">        button1 = <span class="keyword">new</span> Button(<span class="string">"1"</span>);</div><div class="line">        button2 = <span class="keyword">new</span> Button(<span class="string">"2"</span>);</div><div class="line">        button3 = <span class="keyword">new</span> Button(<span class="string">"3"</span>);</div><div class="line">        button4 = <span class="keyword">new</span> Button(<span class="string">"4"</span>);</div><div class="line">        button5 = <span class="keyword">new</span> Button(<span class="string">"5"</span>);</div><div class="line">        button6 = <span class="keyword">new</span> Button(<span class="string">"6"</span>);</div><div class="line">        button7 = <span class="keyword">new</span> Button(<span class="string">"7"</span>);</div><div class="line">        button8 = <span class="keyword">new</span> Button(<span class="string">"8"</span>);</div><div class="line">        button9 = <span class="keyword">new</span> Button(<span class="string">"9"</span>);</div><div class="line">        buttonequ = <span class="keyword">new</span> Button(<span class="string">"="</span>);</div><div class="line">        buttondiv = <span class="keyword">new</span> Button(<span class="string">"/"</span>);</div><div class="line">        buttondot = <span class="keyword">new</span> Button(<span class="string">"."</span>);</div><div class="line">        buttonmul = <span class="keyword">new</span> Button(<span class="string">"*"</span>);</div><div class="line">        buttonsub = <span class="keyword">new</span> Button(<span class="string">"-"</span>);</div><div class="line">        buttonadd = <span class="keyword">new</span> Button(<span class="string">"+"</span>);</div><div class="line">        panel.add(button7);</div><div class="line">        panel.add(button8);</div><div class="line">        panel.add(button9);</div><div class="line">        panel.add(buttonadd);</div><div class="line">        panel.add(button4);</div><div class="line">        panel.add(button5);</div><div class="line">        panel.add(button6);</div><div class="line">        panel.add(buttonsub);</div><div class="line">        panel.add(button1);</div><div class="line">        panel.add(button2);</div><div class="line">        panel.add(button3);</div><div class="line">        panel.add(buttonmul);</div><div class="line">        panel.add(button0);</div><div class="line">        panel.add(buttondot);</div><div class="line">        panel.add(buttonequ);</div><div class="line">        panel.add(buttondiv);</div><div class="line">        frame.add(label, BorderLayout.NORTH);</div><div class="line">        frame.add(panel, BorderLayout.CENTER);</div><div class="line">        frame.pack();</div><div class="line">        frame.setSize(<span class="number">300</span>,<span class="number">300</span>);</div><div class="line">        frame.setVisible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        listener = <span class="keyword">new</span> ButtonHandler();</div><div class="line"></div><div class="line">        <span class="comment">//对按钮添加监听</span></div><div class="line">        button0.addActionListener(listener);</div><div class="line">        button1.addActionListener(listener);</div><div class="line">        button2.addActionListener(listener);</div><div class="line">        button3.addActionListener(listener);</div><div class="line">        button4.addActionListener(listener);</div><div class="line">        button5.addActionListener(listener);</div><div class="line">        button6.addActionListener(listener);</div><div class="line">        button7.addActionListener(listener);</div><div class="line">        button8.addActionListener(listener);</div><div class="line">        button9.addActionListener(listener);</div><div class="line">        buttonadd.addActionListener(listener);</div><div class="line">        buttonsub.addActionListener(listener);</div><div class="line">        buttonmul.addActionListener(listener);</div><div class="line">        buttondiv.addActionListener(listener);</div><div class="line">        buttondot.addActionListener(listener);</div><div class="line">        buttonequ.addActionListener(listener);</div><div class="line"></div><div class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</div><div class="line">                System.exit(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ButtonHandler</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">//存储运算符</span></div><div class="line">        <span class="keyword">boolean</span> equHappened = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">double</span> arg1 = <span class="number">0</span>, arg2 = <span class="number">0</span>, result = <span class="number">0</span>;</div><div class="line">        <span class="comment">//@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(e.getSource() == buttonequ) &#123;</div><div class="line">                equHappened = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">if</span>(flag==<span class="number">0</span>) &#123;</div><div class="line">                    result = arg1 + arg2;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>) &#123;</div><div class="line">                    result = arg1 - arg2;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">2</span>) &#123;</div><div class="line">                    result = arg1 * arg2;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    result = arg1 / arg2;</div><div class="line">                &#125;</div><div class="line">                label.setText(result+<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(equHappened == <span class="keyword">true</span>) &#123;</div><div class="line">                    label.setText(<span class="string">""</span>);</div><div class="line">                    equHappened = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(e.getSource() == buttondot) &#123;</div><div class="line">                    label.setText(<span class="string">"0."</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button0) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"0"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button1) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"1"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button2) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"2"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button3) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"3"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button4) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"4"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button5) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"5"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button6) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"6"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button7) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"7"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button8) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"8"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == button9) &#123;</div><div class="line">                    label.setText(label.getText()+<span class="string">"9"</span>);</div><div class="line">                    arg2 = Double.parseDouble(label.getText());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == buttonadd) &#123;</div><div class="line">                    label.setText(<span class="string">""</span>);</div><div class="line">                    arg1 = arg2;</div><div class="line">                    flag = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == buttonsub) &#123;</div><div class="line">                    label.setText(<span class="string">""</span>);</div><div class="line">                    arg1 = arg2;</div><div class="line">                    flag = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == buttonmul) &#123;</div><div class="line">                    label.setText(<span class="string">""</span>);</div><div class="line">                    arg1 = arg2;</div><div class="line">                    flag = <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e.getSource() == buttondiv) &#123;</div><div class="line">                    label.setText(<span class="string">""</span>);</div><div class="line">                    arg1 = arg2;</div><div class="line">                    flag = <span class="number">3</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Calculator cal = <span class="keyword">new</span> Calculator();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>并不难，只用到了AWT，一个小时做完，感兴趣的可以用swing改写一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;使用java的AWT包实现一个简易的计算器。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
      <category term="AWT" scheme="https://luxuantao.github.io/tags/AWT/"/>
    
  </entry>
  
  <entry>
    <title>显示系统当前进程</title>
    <link href="https://luxuantao.github.io/2018/03/31/%E6%98%BE%E7%A4%BA%E7%B3%BB%E7%BB%9F%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B/"/>
    <id>https://luxuantao.github.io/2018/03/31/显示系统当前进程/</id>
    <published>2018-03-31T06:13:47.000Z</published>
    <updated>2018-03-31T06:26:50.976Z</updated>
    
    <content type="html"><![CDATA[<hr><p>分别使用windows SDK和wxpython显示系统当前进程。</p><a id="more"></a><h2 id="windows-SDK版本"><a href="#windows-SDK版本" class="headerlink" title="windows SDK版本"></a>windows SDK版本</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span>    <span class="comment">// self-defined header</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tlhelp32.h&gt; // 声明快照函数的头文件</span></span></div><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,                  <span class="comment">// 入口函数</span></span></span></div><div class="line"><span class="function"><span class="params">                   HINSTANCE,</span></span></div><div class="line"><span class="function"><span class="params">                   LPSTR     lpCmdLine,</span></span></div><div class="line"><span class="function"><span class="params">                   <span class="keyword">int</span>       nCmdShow  )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!InitApplication(hInstance))       <span class="comment">// 应用初始化</span></div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!InitInstance(hInstance,nCmdShow)) <span class="comment">// 实例初始化</span></div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line"></div><div class="line">    MSG msg;</div><div class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))   <span class="comment">// 消息循环</span></div><div class="line">    &#123;</div><div class="line">        TranslateMessage(&amp;msg);</div><div class="line">        DispatchMessage(&amp;msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)msg.wParam;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">InitApplication</span><span class="params">(HINSTANCE hInstance)</span>   <span class="comment">// 应用初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    WNDCLASS  wc;  <span class="comment">// Data structure of the window class</span></div><div class="line"></div><div class="line">    wc.style            = CS_HREDRAW|CS_VREDRAW;</div><div class="line">    wc.lpfnWndProc      = (WNDPROC)MainWndProc;  <span class="comment">// Name of the Window Function</span></div><div class="line">    wc.cbClsExtra       = <span class="number">0</span>;</div><div class="line">    wc.cbWndExtra       = <span class="number">0</span>;</div><div class="line">    wc.hInstance        = hInstance;</div><div class="line">    wc.hIcon            = LoadIcon (<span class="literal">NULL</span>, IDI_APPLICATION);</div><div class="line">    wc.hCursor          = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</div><div class="line">    wc.hbrBackground    = (HBRUSH)GetStockObject(WHITE_BRUSH);</div><div class="line">    wc.lpszMenuName     = <span class="literal">NULL</span>;</div><div class="line">    wc.lpszClassName    = TEXT(<span class="string">"My1stWClass"</span>);  <span class="comment">// Name of the window class</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> RegisterClass(&amp;wc);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span>  <span class="comment">// 实例初始化</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    HWND hWnd = CreateWindow(TEXT(<span class="string">"My1stWClass"</span>),     <span class="comment">// Name of the window class</span></div><div class="line">                             TEXT(<span class="string">"My First Window"</span>), <span class="comment">// Title of the window</span></div><div class="line">                             WS_OVERLAPPEDWINDOW,</div><div class="line">                             CW_USEDEFAULT,</div><div class="line">                             CW_USEDEFAULT,</div><div class="line">                             CW_USEDEFAULT,</div><div class="line">                             CW_USEDEFAULT,</div><div class="line">                             <span class="literal">NULL</span>,</div><div class="line">                             <span class="literal">NULL</span>,</div><div class="line">                             hInstance,</div><div class="line">                             <span class="literal">NULL</span>                                        );</div><div class="line">    <span class="keyword">if</span> (!hWnd) <span class="keyword">return</span> FALSE;</div><div class="line"></div><div class="line">    ShowWindow(hWnd, nCmdShow);</div><div class="line">    UpdateWindow(hWnd);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"></div><div class="line"><span class="comment">// 窗口过程函数</span></div><div class="line"></div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">MainWndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    PAINTSTRUCT ps;</div><div class="line">    HDC hdc;</div><div class="line">    PROCESSENTRY32 pe32;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (message)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> WM_PAINT:  <span class="comment">// 窗口客户区得刷新</span></div><div class="line">        &#123;</div><div class="line">            TCHAR id[<span class="number">30</span>];</div><div class="line">            TCHAR name[<span class="number">30</span>];</div><div class="line">            LPCTSTR title = TEXT(<span class="string">"进程ID               模块名             "</span>);</div><div class="line">            <span class="keyword">int</span> row = <span class="number">0</span>;</div><div class="line"></div><div class="line">            hdc = BeginPaint (hWnd, &amp;ps);</div><div class="line">            <span class="comment">// 给系统内的所有进程拍快照</span></div><div class="line">            HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</div><div class="line">            <span class="comment">// 在使用这个结构之前，先设置它的大小</span></div><div class="line">            pe32.dwSize = <span class="keyword">sizeof</span>(pe32);</div><div class="line">             <span class="comment">// 遍历进程快照，轮流显示每个进程的信息</span></div><div class="line">            BOOL bMore = Process32First(hProcessSnap, &amp;pe32);</div><div class="line"></div><div class="line">            TextOut(hdc,<span class="number">20</span>,<span class="number">20</span>,title,lstrlen(title)); <span class="comment">//显示标题栏</span></div><div class="line">            <span class="keyword">while</span>(bMore)</div><div class="line">            &#123;</div><div class="line">                row += <span class="number">20</span>;</div><div class="line">                <span class="keyword">if</span>(row%<span class="number">400</span> == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    TextOut(hdc,row/<span class="number">400</span>*<span class="number">350</span>+<span class="number">20</span>,<span class="number">20</span>,title,lstrlen(title)); <span class="comment">//显示标题栏</span></div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                wsprintf(id,<span class="string">"%05x"</span>,(<span class="keyword">unsigned</span>)pe32.th32ProcessID);</div><div class="line">                wsprintf(name,<span class="string">"%s"</span>,pe32.szExeFile);</div><div class="line"></div><div class="line">                TextOut(hdc,row/<span class="number">400</span>*<span class="number">350</span>+<span class="number">20</span>,row%<span class="number">400</span>+<span class="number">20</span>,id,lstrlen(id));</div><div class="line">                TextOut(hdc,row/<span class="number">400</span>*<span class="number">350</span>+<span class="number">100</span>,row%<span class="number">400</span>+<span class="number">20</span>,name,lstrlen(name));</div><div class="line"></div><div class="line">                bMore = Process32Next(hProcessSnap, &amp;pe32);</div><div class="line">            &#125;</div><div class="line">            CloseHandle(hProcessSnap); <span class="comment">// 清除snapshot对象</span></div><div class="line">            EndPaint (hWnd, &amp;ps);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> WM_DESTROY: <span class="comment">// 窗口关闭</span></div><div class="line">            PostQuitMessage(<span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:  <span class="comment">// 缺省消息的处理</span></div><div class="line">            <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="wxpython版本"><a href="#wxpython版本" class="headerlink" title="wxpython版本"></a>wxpython版本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> wx</div><div class="line"><span class="keyword">import</span> psutil</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span><span class="params">(wx.Frame)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        wx.Frame.__init__(self, <span class="keyword">None</span>, <span class="number">-1</span>, <span class="string">"My Frame"</span>, size=(<span class="number">800</span>, <span class="number">600</span>))</div><div class="line">        panel = wx.Panel(self, <span class="number">-1</span>)</div><div class="line">        title = wx.StaticText(panel, <span class="number">-1</span>, <span class="string">u"进程ID：    模块名："</span>, pos=(<span class="number">20</span>, <span class="number">20</span>))</div><div class="line">        title.SetForegroundColour(wx.Colour(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line"></div><div class="line">        icon = wx.Icon(name=<span class="string">'About.ico'</span>, type=wx.BITMAP_TYPE_ICO)</div><div class="line">        self.SetIcon(icon)</div><div class="line"></div><div class="line">        ACCESS_DENIED = <span class="string">''</span></div><div class="line">        x, y = <span class="number">20</span>, <span class="number">40</span></div><div class="line">        <span class="keyword">for</span> pid <span class="keyword">in</span> sorted(psutil.pids()):</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">if</span> y % <span class="number">600</span> == <span class="number">0</span>:</div><div class="line">                    x += <span class="number">400</span></div><div class="line">                    y += <span class="number">20</span></div><div class="line">                    title = wx.StaticText(</div><div class="line">                        panel, <span class="number">-1</span>, <span class="string">u"进程ID：    模块名："</span>, pos=(x, y % <span class="number">600</span>))</div><div class="line">                    title.SetForegroundColour(wx.Colour(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">                    y += <span class="number">20</span></div><div class="line">                p = psutil.Process(pid)</div><div class="line">                pinfo = p.as_dict(ad_value=ACCESS_DENIED)</div><div class="line">                s = <span class="string">u"%05x       %s"</span> % (pid, pinfo[<span class="string">'name'</span>])</div><div class="line">                wx.StaticText(panel, <span class="number">-1</span>, s, pos=(x, y % <span class="number">600</span>))</div><div class="line">                y += <span class="number">20</span></div><div class="line">            <span class="keyword">except</span> psutil.NoSuchProcess:</div><div class="line">                <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    os.chdir(<span class="string">u'F:/华师大/大二下/多平台应用开发/Lab2'</span>)</div><div class="line">    app = wx.App()</div><div class="line">    frame = MyFrame()</div><div class="line">    frame.Show(<span class="keyword">True</span>)</div><div class="line">    app.MainLoop()</div></pre></td></tr></table></figure><p>PS:</p><p>毕竟刚学没多久，代码肯定写的不够专业，有很多问题也不理解，先放上来留作今后的参考，有需要的自取。</p><p>这学期什么课都要自学，累啊。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;分别使用windows SDK和wxpython显示系统当前进程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="windows编程" scheme="https://luxuantao.github.io/tags/windows%E7%BC%96%E7%A8%8B/"/>
    
      <category term="wxpython" scheme="https://luxuantao.github.io/tags/wxpython/"/>
    
  </entry>
  
  <entry>
    <title>python-转手绘</title>
    <link href="https://luxuantao.github.io/2018/03/25/python-%E8%BD%AC%E6%89%8B%E7%BB%98/"/>
    <id>https://luxuantao.github.io/2018/03/25/python-转手绘/</id>
    <published>2018-03-25T03:18:24.000Z</published>
    <updated>2018-03-25T03:18:04.885Z</updated>
    
    <content type="html"><![CDATA[<hr><p>用numpy和PIL库进行图像变换。</p><a id="more"></a><h2 id="灰度化"><a href="#灰度化" class="headerlink" title="灰度化"></a>灰度化</h2><p>一张图片无非就是个二维数组，其中的每个元素又是一个三元组[R，G，B]，改变RGB的值也就改变了图片的色调。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">a = np.array(Image.open(<span class="string">'test.jpg'</span>).convert(<span class="string">'L'</span>)) <span class="comment">#二维数组里存储的将不再是RGB，而只有灰度值</span></div><div class="line">print(a.shape,a.dtype) <span class="comment">#获取图片的二维数组大小和格式</span></div><div class="line"></div><div class="line"><span class="comment">#不同的变化</span></div><div class="line"><span class="comment">#b = 255 - a</span></div><div class="line"><span class="comment">#b = (100/255)*a+150</span></div><div class="line">b = <span class="number">255</span>*(a/<span class="number">255</span>)**<span class="number">2</span> </div><div class="line"></div><div class="line">im = Image.fromarray(b.astype(<span class="string">'uint8'</span>))</div><div class="line">im.save(<span class="string">'result.jpg'</span>)</div></pre></td></tr></table></figure><h2 id="转手绘效果"><a href="#转手绘效果" class="headerlink" title="转手绘效果"></a>转手绘效果</h2><p>不只是PS可以这样，用python也可以。</p><p>手绘效果其实就是由立体效果和明暗效果叠加而成的。</p><p>灰度表示的是图像的明暗变化，而梯度表示的是灰度的变化率，所以可以通过调整像素之间的梯度值来改变明暗程度。</p><p>立体效果则通过添加虚拟深度值来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">a = np.asarray(Image.open(<span class="string">'test.jpg'</span>).convert(<span class="string">'L'</span>)).astype(<span class="string">'float'</span>)</div><div class="line"></div><div class="line">depth = <span class="number">10.</span> <span class="comment">#深度值 (0-100)</span></div><div class="line">grad = np.gradient(a)<span class="comment">#取图像灰度的梯度值</span></div><div class="line">grad_x, grad_y = grad <span class="comment">#分别取横纵图像梯度值</span></div><div class="line">grad_x = grad_x*depth/<span class="number">100.</span>          <span class="comment">#根据深度值调整横纵方向的梯度值</span></div><div class="line">grad_y = grad_y*depth/<span class="number">100.</span></div><div class="line"></div><div class="line"><span class="comment">#梯度归一化</span></div><div class="line">A = np.sqrt(grad_x**<span class="number">2</span> + grad_y**<span class="number">2</span> + <span class="number">1.</span>) </div><div class="line">uni_x = grad_x/A</div><div class="line">uni_y = grad_y/A</div><div class="line">uni_z = <span class="number">1.</span>/A</div><div class="line"></div><div class="line"><span class="comment">#光源归一化</span></div><div class="line">vec_el = np.pi/<span class="number">2.2</span> <span class="comment">#光源的俯视角度，弧度值</span></div><div class="line">vec_az = np.pi/<span class="number">4.</span> <span class="comment">#光源的方位角度，弧度值</span></div><div class="line">dx = np.cos(vec_el)*np.cos(vec_az) <span class="comment">#光源对x轴的影响</span></div><div class="line">dy = np.cos(vec_el)*np.sin(vec_az) <span class="comment">#光源对y轴的影响</span></div><div class="line">dz = np.sin(vec_el) <span class="comment">#光源对z轴的影响</span></div><div class="line"></div><div class="line">b = <span class="number">255</span>*(dx*uni_x + dy*uni_y + dz*uni_z) <span class="comment">#梯度与光源相互作用，将梯度转换为灰度</span></div><div class="line">b = b.clip(<span class="number">0</span>,<span class="number">255</span>)<span class="comment">#防止数据越界，将生成的灰度值裁剪至0-255</span></div><div class="line"></div><div class="line">im = Image.fromarray(b.astype(<span class="string">'uint8'</span>)) <span class="comment">#重构图像</span></div><div class="line">im.save(<span class="string">'result.jpg'</span>)</div></pre></td></tr></table></figure><p>原图：</p><p><img src="/images/beijing.jpg" alt="原图"></p><p>手绘效果：</p><p><img src="/images/beijingHD.jpg" alt="手绘效果"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;用numpy和PIL库进行图像变换。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="数据分析" scheme="https://luxuantao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="图像处理" scheme="https://luxuantao.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>python-多线程</title>
    <link href="https://luxuantao.github.io/2018/03/25/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://luxuantao.github.io/2018/03/25/python-多线程/</id>
    <published>2018-03-25T03:05:58.000Z</published>
    <updated>2018-03-25T03:12:13.594Z</updated>
    
    <content type="html"><![CDATA[<hr><p>python中有关多线程的操作方法。</p><a id="more"></a><p>threading库是python支持多线程编程的重要模块。</p><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>一种方法是直接使用threading中的Thread类创建对象。</p><p>另一种方法是继承Thread类并重写<code>__init__()</code>和<code>run()</code>方法。</p><h2 id="线程的管理"><a href="#线程的管理" class="headerlink" title="线程的管理"></a>线程的管理</h2><h3 id="join-timeout"><a href="#join-timeout" class="headerlink" title="join([timeout])"></a>join([timeout])</h3><p>阻塞当前线程，等待被调线程结束或超时后再执行当前线程，timeout单位是秒。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(x, y):</div><div class="line">        print(i, end=<span class="string">' '</span>)</div><div class="line">    print()</div><div class="line">    time.sleep(<span class="number">10</span>) <span class="comment">#等待10秒</span></div><div class="line"></div><div class="line">t1 = Thread(target=fun, args=(<span class="number">15</span>, <span class="number">20</span>))</div><div class="line">t1.start()</div><div class="line">t1.join(<span class="number">5</span>) <span class="comment">#等待t1结束或等待5秒</span></div><div class="line">t2 = Thread(target=fun, args=(<span class="number">5</span>, <span class="number">10</span>))</div><div class="line">t2.start()</div></pre></td></tr></table></figure><h3 id="isAlive"><a href="#isAlive" class="headerlink" title="isAlive()"></a>isAlive()</h3><p>测试线程是否处于运行状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></div><div class="line">    time.sleep(<span class="number">10</span>) <span class="comment">#等待10秒</span></div><div class="line"></div><div class="line">t1 = Thread(target=fun)</div><div class="line">print(<span class="string">'t1:'</span>,t1.isAlive()) <span class="comment">#False</span></div><div class="line"></div><div class="line">t1.start()</div><div class="line">print(<span class="string">'t1:'</span>,t1.isAlive()) <span class="comment">#True</span></div><div class="line"></div><div class="line">t1.join(<span class="number">5</span>) <span class="comment">#因超时而结束</span></div><div class="line">print(<span class="string">'t1:'</span>,t1.isAlive()) <span class="comment">#True</span></div><div class="line"></div><div class="line">t1.join() <span class="comment">#等待t1结束</span></div><div class="line">print(<span class="string">'t1:'</span>,t1.isAlive()) <span class="comment">#False</span></div></pre></td></tr></table></figure><h3 id="daemon属性"><a href="#daemon属性" class="headerlink" title="daemon属性"></a>daemon属性</h3><p>如某个子线程的daemon属性为False（默认情况），主线程结束时会检测该子线程是否结束并等待它结束后再退出。若为True，则该子线程不管有没有运行玩，都会随主线程一起结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mythread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num, threadname)</span>:</span></div><div class="line">        threading.Thread.__init__(self,name=threadname)</div><div class="line">        self.num = num</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span>        </div><div class="line">        time.sleep(self.num)</div><div class="line">        print(self.num)</div><div class="line"></div><div class="line">t1 = mythread(<span class="number">1</span>, <span class="string">'t1'</span>)</div><div class="line">t2 = mythread(<span class="number">5</span>, <span class="string">'t2'</span>)</div><div class="line">t2.daemon = <span class="keyword">True</span></div><div class="line">t2.setDaemon(<span class="keyword">False</span>)</div><div class="line">print(t1.daemon) <span class="comment">#False</span></div><div class="line">print(t2.daemon) <span class="comment">#True</span></div><div class="line">t1.start()</div><div class="line">t2.start()</div></pre></td></tr></table></figure><p>1会输出，但5不会输出。</p><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><h3 id="RLock对象"><a href="#RLock对象" class="headerlink" title="RLock对象"></a>RLock对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mythread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> x</div><div class="line">        lock.acquire() <span class="comment">#获取锁，如果成功则进入临界区</span></div><div class="line">        x += <span class="number">1</span></div><div class="line">        time.sleep(<span class="number">0.5</span>)</div><div class="line">        print(x)</div><div class="line">        lock.release() <span class="comment">#释放锁，退出临界区</span></div><div class="line"></div><div class="line">lock = threading.RLock()</div><div class="line">tl = [] <span class="comment">#用来存放多个进程</span></div><div class="line">x = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</div><div class="line">    t = mythread()</div><div class="line">    tl.append(t)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tl:</div><div class="line">    i.start()</div></pre></td></tr></table></figure><p>如果没有这把读锁，那么x的值将会变得杂乱无章，出现“脏读”现象。</p><p>“死锁”现象：假设有两个线程和两把锁，只有两把锁都给同一个线程的时候这个线程才会运行。那么问题来了，当两个线程各自获得了其中的一把锁，这时它们都在等待另一把锁释放，这时就会出现死锁现象。</p><h3 id="Condition对象"><a href="#Condition对象" class="headerlink" title="Condition对象"></a>Condition对象</h3><p>用经典的生产者和消费者问题演示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadname)</span>:</span></div><div class="line">        threading.Thread.__init__(self,name=threadname)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> x</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            con.acquire() <span class="comment">#获取锁</span></div><div class="line">            <span class="keyword">if</span> len(x) == <span class="number">10</span>:</div><div class="line">                print(<span class="string">'Producer is waiting'</span>)</div><div class="line">                con.wait() <span class="comment">#共享列表已有10个元素，不再生产</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'Producer:'</span>, end=<span class="string">' '</span>)</div><div class="line">                x.append(randint(<span class="number">1</span>,<span class="number">1000</span>))</div><div class="line">                print(x)</div><div class="line">                time.sleep(<span class="number">1</span>)</div><div class="line">                con.notify() <span class="comment">#唤醒等待条件的线程</span></div><div class="line">            con.release() <span class="comment">#释放锁</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadname)</span>:</span></div><div class="line">        threading.Thread.__init__(self, name =threadname)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> x</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            con.acquire()</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> x:</div><div class="line">                print(<span class="string">'Consumer is waiting'</span>)</div><div class="line">                con.wait() <span class="comment">#共享列表没东西，暂停消费</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(x.pop(<span class="number">0</span>))</div><div class="line">                print(x)</div><div class="line">                time.sleep(<span class="number">1</span>)</div><div class="line">                con.notify()</div><div class="line">            con.release()</div><div class="line"></div><div class="line">con = threading.Condition()</div><div class="line">x = []</div><div class="line">p = Producer(<span class="string">'Producer'</span>)</div><div class="line">c = Consumer(<span class="string">'Consumer'</span>)</div><div class="line">p.start()</div><div class="line">c.start()</div><div class="line">p.join()</div><div class="line">c.join()</div></pre></td></tr></table></figure><p>notify()方法是从所有等待这个对象锁的线程中随机唤醒一个。</p><p>notify_all()方法能够唤醒所有正在等待这个对象锁的线程，唤醒的线程获得锁的概率是随机的，取决于cpu调度。</p><p>notify()或者notify_alll()方法并不是真正释放锁，必须等到release方法执行完才真正释放锁。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;python中有关多线程的操作方法。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
      <category term="多线程" scheme="https://luxuantao.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java-流处理</title>
    <link href="https://luxuantao.github.io/2018/03/04/java-%E6%B5%81%E5%A4%84%E7%90%86/"/>
    <id>https://luxuantao.github.io/2018/03/04/java-流处理/</id>
    <published>2018-03-04T11:23:51.000Z</published>
    <updated>2018-03-04T11:23:19.522Z</updated>
    
    <content type="html"><![CDATA[<hr><p>java常用文件处理方法。</p><a id="more"></a><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"></div><div class="line"><span class="comment">//获取一个路径下的所有目录和文件</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\"</span>);</div><div class="line">        <span class="keyword">if</span>(file.isDirectory()) &#123;</div><div class="line">            String[] names = file.list();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.length; i++) &#123;</div><div class="line">                System.out.println(names[i]);</div><div class="line">            &#125;</div><div class="line">            File[] files = file.listFiles();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</div><div class="line">                System.out.println(files[i].getAbsolutePath());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"不是一个文件夹"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>主要学两个类：FileInputStream和FileOutputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        <span class="keyword">byte</span>[] content = <span class="keyword">null</span>;</div><div class="line">        FileInputStream fis = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">            content = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</div><div class="line">            fis.read(content);</div><div class="line">            fis.close();</div><div class="line">            System.out.println(<span class="string">"读取完成"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            System.out.println(<span class="string">"文件不存在"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            System.out.println(<span class="string">"读取失败"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="keyword">new</span> String(content));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        String str = <span class="string">"写入这个"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file,<span class="keyword">false</span>); <span class="comment">//默认flase表示覆盖文件原有内容；true表示接在文件的最后写入</span></div><div class="line">            fos.write(str.getBytes());</div><div class="line">            fos.close();</div><div class="line">            System.out.println(<span class="string">"写入成功"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            System.out.println(<span class="string">"文件找不到"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            System.out.println(<span class="string">"写入失败"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>不同于字节流：</p><p>例如要写入整数10到文件中，字节流会把数字10的ASCII码写进去，而字符流是以字符1和0写入。</p><p>主要学两个类：FileReader和FileWriter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        <span class="keyword">char</span>[] content = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileReader fr = <span class="keyword">new</span> FileReader(file);</div><div class="line">            content = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">512</span>];</div><div class="line">            fr.read(content);</div><div class="line">            fr.close();</div><div class="line">            System.out.println(<span class="string">"读取成功"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            System.out.println(<span class="string">"文件不存在"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            System.out.println(<span class="string">"读取失败"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="keyword">new</span> String(content));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileWriter;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(file);</div><div class="line">            fw.write(<span class="string">"FileWriter"</span>);</div><div class="line">            fw.close(); <span class="comment">//别忘关，不然东西都在缓冲区里，也可用fw.flush()</span></div><div class="line">            System.out.println(<span class="string">"写入成功"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            System.out.println(<span class="string">"写入失败"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>BufferedReader类：创建对象时，不能直接用File对象做参数，得用Reader。</p><p>可以这样做，先用文件名创建出一个FileReader，再把FileReader作为参数传给BufferedReader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        FileReader fr = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fr = <span class="keyword">new</span> FileReader(file);</div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</div><div class="line">            String str = br.readLine();</div><div class="line">            <span class="keyword">while</span>(str != <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.println(str);</div><div class="line">                str = br.readLine();</div><div class="line">            &#125;</div><div class="line">            br.close();</div><div class="line">            fr.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果用System.in从控制台读入数据,由于读入的是字节流，而BufferedReader只接受字符流，怎么办呢？</p><p>可以用InputStreamReader，将字节流转换为字符流，再传给BufferedReader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String str = br.readLine();</div><div class="line">            <span class="keyword">while</span>(str != <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.println(str);</div><div class="line">                str = br.readLine();</div><div class="line">            &#125;</div><div class="line">            br.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>BufferedWriter类和BufferedReader类一样，都不能直接用File对象做参数，所以要先建一个FileWriter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedWriter;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileWriter;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriterDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String[] strings = &#123;<span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>&#125;;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</div><div class="line">        FileWriter fw = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fw = <span class="keyword">new</span> FileWriter(file);</div><div class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</div><div class="line">                bw.write(strings[i]);</div><div class="line">                bw.write(<span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">            bw.close();</div><div class="line">            fw.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><p>对象的序列化：把对象转换为字节序列。</p><p>对象的反序列化：把字节序列转换为对象。</p><p>主要学两个类：ObjectInputStream和ObjectOutputStream（不能直接用File对象做参数）。</p><p>先建一个类，叫做Person。注意，要实现序列化和反序列化，这个类必须implements Serializable接口，这是一个标记接口（即一个方法都没有），所以不必Override。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Person[姓名="</span>+name+<span class="string">",年龄="</span>+age+<span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>把Person的对象输出到文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputStreamDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"person.txt"</span>);</div><div class="line">        FileOutputStream fos = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</div><div class="line">            Person person = <span class="keyword">new</span> Person();</div><div class="line">            person.name = <span class="string">"Luson"</span>;</div><div class="line">            person.age = <span class="number">20</span>;</div><div class="line">            oos.writeObject(person);</div><div class="line">            oos.close();</div><div class="line">            fos.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从文件中再把Person的对象读回来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStreamDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"person.txt"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</div><div class="line">            Person person = (Person)ois.readObject();</div><div class="line">            System.out.println(person);</div><div class="line">            ois.close();</div><div class="line">            fis.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意到Person类中age的类型前有一个transient，这表明该变量是不参与序列化的，而且不管你怎么修改它的值，从文件里读回来（即反序列化）的时候，它的值永远是0或null。</p><p>此外，如果类中还有static类型的变量，那么也不会参与序列化，但是它的值却是可以更改的。</p><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>可以读取和写入java的标准数据类型。</p><p>主要学两个类：DataInputStream和DataOutputStream，分别要求传入InputStream和OutputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataStreamDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Person[] persons = <span class="keyword">new</span> Person[]&#123;<span class="keyword">new</span> Person(<span class="string">"Kate"</span>,<span class="number">18</span>),</div><div class="line">                <span class="keyword">new</span> Person(<span class="string">"Tom"</span>,<span class="number">18</span>),<span class="keyword">new</span> Person(<span class="string">"Lucy"</span>,<span class="number">19</span>)&#125;;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"persons.txt"</span>);</div><div class="line">        FileOutputStream fos = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">            DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(fos);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; persons.length; i++) &#123;</div><div class="line">                dos.writeUTF(persons[i].name);</div><div class="line">                dos.writeChar(<span class="string">'\t'</span>);</div><div class="line">                dos.writeInt(persons[i].age);</div><div class="line">            &#125;</div><div class="line">            dos.close();</div><div class="line">            fos.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        FileInputStream fis = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">            DataInputStream dis = <span class="keyword">new</span> DataInputStream(fis);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; persons.length; i++) &#123;</div><div class="line">                String str = dis.readUTF();</div><div class="line">                <span class="keyword">char</span> ch = dis.readChar();</div><div class="line">                <span class="keyword">int</span> age = dis.readInt();</div><div class="line">                System.out.println(str+ch+age);</div><div class="line">            &#125;</div><div class="line">            dis.close();</div><div class="line">            fis.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;java常用文件处理方法。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
      <category term="流处理" scheme="https://luxuantao.github.io/tags/%E6%B5%81%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>java-网络编程</title>
    <link href="https://luxuantao.github.io/2018/02/21/java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://luxuantao.github.io/2018/02/21/java-网络编程/</id>
    <published>2018-02-21T14:25:59.000Z</published>
    <updated>2018-02-21T14:26:00.898Z</updated>
    
    <content type="html"><![CDATA[<hr><p>网络编程本质还是在处理IO流上。</p><a id="more"></a><h2 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h2><p>这个类主要用来表示IP地址，有两个子类：Inet4Address和Inet6Address</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        InetAddress locAdd = InetAddress.getLocalHost();</div><div class="line">        InetAddress remAdd = InetAddress.getByName(<span class="string">"luxuantao.github.io"</span>);</div><div class="line">        System.out.println(<span class="string">"本机IP地址"</span>+locAdd.getHostAddress());</div><div class="line">        System.out.println(<span class="string">"我的博客的IP地址"</span>+remAdd.getHostAddress());</div><div class="line">        System.out.println(<span class="string">"本机是否可达"</span>+locAdd.isReachable(<span class="number">5000</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="URL类"><a href="#URL类" class="headerlink" title="URL类"></a>URL类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="comment">//URL类的基本方法</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseURL</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        URL Aurl = <span class="keyword">new</span> URL(<span class="string">"http://java.sun.com:80/docs/books/"</span>); <span class="comment">//基地址</span></div><div class="line">        URL tuto = <span class="keyword">new</span> URL(Aurl,<span class="string">"tutorial.intro.html#DOWNLOADING"</span>); <span class="comment">//相对地址</span></div><div class="line">        System.out.println(<span class="string">"协议信息"</span>+tuto.getProtocol());</div><div class="line">        System.out.println(<span class="string">"地址"</span>+tuto.getHost());</div><div class="line">        System.out.println(<span class="string">"文件名"</span>+tuto.getFile());</div><div class="line">        System.out.println(<span class="string">"端口"</span>+tuto.getPort());</div><div class="line">        System.out.println(<span class="string">"引用信息"</span>+tuto.getRef());</div><div class="line">        System.out.println(<span class="string">"查询信息"</span>+tuto.getQuery());</div><div class="line">        System.out.println(<span class="string">"路径"</span>+tuto.getPath());</div><div class="line">        System.out.println(<span class="string">"用户信息"</span>+tuto.getUserInfo());</div><div class="line">        System.out.println(<span class="string">"权限信息"</span>+tuto.getAuthority());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="comment">//从URL读取网络资源</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLReader</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        URL tire = <span class="keyword">new</span> URL(<span class="string">"https://luxuantao.github.io/"</span>);</div><div class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(tire.openStream()));</div><div class="line">        String inputLine;</div><div class="line">        <span class="keyword">while</span>((inputLine = in.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(inputLine);</div><div class="line">        &#125;</div><div class="line">        in.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="URLConnection类"><a href="#URLConnection类" class="headerlink" title="URLConnection类"></a>URLConnection类</h2><p>URL是单向的，而URLConnection是双向的，可以通过它对URL资源读或写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.net.URLConnection;</div><div class="line"></div><div class="line"><span class="comment">//与指定URL建立动态链接,可向服务器发送请求</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLConnectionDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://www.mldnjava.cn"</span>);</div><div class="line">        URLConnection urlCon = url.openConnection(); <span class="comment">//建立连接</span></div><div class="line">        System.out.println(<span class="string">"内容大小"</span>+urlCon.getContentLength());</div><div class="line">        System.out.println(<span class="string">"内容类型"</span>+urlCon.getContentType());</div><div class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader((urlCon.getInputStream())));</div><div class="line">        String inputline;</div><div class="line">        <span class="keyword">while</span> ((inputline = in.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(inputline);</div><div class="line">        &#125;</div><div class="line">        in.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="服务端与客户端简单交互"><a href="#服务端与客户端简单交互" class="headerlink" title="服务端与客户端简单交互"></a>服务端与客户端简单交互</h2><h3 id="单向传输（服务端给客户端）"><a href="#单向传输（服务端给客户端）" class="headerlink" title="单向传输（服务端给客户端）"></a>单向传输（服务端给客户端）</h3><p>示例：服务端传输helloworld给客户端。</p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.net.UnknownHostException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8888</span>);</div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(client.getInputStream()));</div><div class="line">        String context = br.readLine();</div><div class="line">        System.out.println(<span class="string">"当前服务端输出的语句是："</span>+context);</div><div class="line">        br.close();</div><div class="line">        client.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">        System.out.println(<span class="string">"服务器运行，等待客户端连接"</span>);</div><div class="line">        Socket client = server.accept();</div><div class="line">        OutputStream out = client.getOutputStream();</div><div class="line">        PrintWriter pw =<span class="keyword">new</span> PrintWriter(out);</div><div class="line">        pw.println(<span class="string">"hello world!"</span>);</div><div class="line">        pw.close();</div><div class="line">        client.close();</div><div class="line">        server.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="一对一TCP传输（单个服务端和单个客户端）"><a href="#一对一TCP传输（单个服务端和单个客户端）" class="headerlink" title="一对一TCP传输（单个服务端和单个客户端）"></a>一对一TCP传输（单个服务端和单个客户端）</h3><p>示例：客户端发送半径给服务端，服务端算出圆的面积后把结果返回给客户端。</p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.rmi.UnknownHostException;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8888</span>);</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        DataInputStream fromServer = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">        DataOutputStream toServer = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"请输入半径："</span>);</div><div class="line">            <span class="keyword">double</span> radius = sc.nextDouble();</div><div class="line">            toServer.writeDouble(radius);</div><div class="line">            toServer.flush();</div><div class="line">            <span class="keyword">double</span> area = fromServer.readDouble();</div><div class="line">            System.out.println(<span class="string">"客户端：输入的半径是："</span>+radius);</div><div class="line">            System.out.println(<span class="string">"客户端：收到的圆的面积是："</span>+area);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">        System.out.println(<span class="string">"服务器启动成功，时间是"</span>+<span class="keyword">new</span> Date());</div><div class="line">        Socket client = server.accept();</div><div class="line">        DataInputStream inputFromClient = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">        DataOutputStream outputToClient = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">double</span> radius = inputFromClient.readDouble();</div><div class="line">            <span class="keyword">double</span> area = radius*radius*Math.PI;</div><div class="line">            System.out.println(<span class="string">"服务端：接受到客户端半径为："</span>+radius);</div><div class="line">            System.out.println(<span class="string">"服务端：计算面积为："</span>+area);</div><div class="line">            outputToClient.writeDouble(area);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="一对多TCP传输（单个服务端和多个客户端）"><a href="#一对多TCP传输（单个服务端和多个客户端）" class="headerlink" title="一对多TCP传输（单个服务端和多个客户端）"></a>一对多TCP传输（单个服务端和多个客户端）</h3><p>当多个客户端同时对服务器发送请求时，上面的方法就不行了（在IDE上的表现就是多次启动了客户端程序，这时只有第一个客户端程序能够成功连接上服务端）。</p><p>不过，可以通过多线程解决这个问题。</p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.rmi.UnknownHostException;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8888</span>);</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        DataInputStream fromServer = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">        DataOutputStream toServer = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"请输入半径："</span>);</div><div class="line">            <span class="keyword">double</span> radius = sc.nextDouble();</div><div class="line">            toServer.writeDouble(radius);</div><div class="line">            toServer.flush();</div><div class="line">            <span class="keyword">double</span> area = fromServer.readDouble();</div><div class="line">            System.out.println(<span class="string">"客户端：输入的半径是："</span>+radius);</div><div class="line">            System.out.println(<span class="string">"客户端：收到的圆的面积是："</span>+area);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadiusServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">        System.out.println(<span class="string">"服务器启动成功，时间是"</span>+<span class="keyword">new</span> Date());</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">            Socket client = server.accept();</div><div class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AreaRunnable(client)); <span class="comment">//多创建一个线程回应请求</span></div><div class="line">            thread.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AreaRunnable类（处理每个线程）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AreaRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Socket client;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AreaRunnable</span><span class="params">(Socket client)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.client = client;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            DataInputStream inputFromClient = <span class="keyword">new</span> DataInputStream(client.getInputStream());</div><div class="line">            DataOutputStream outputToClient = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">double</span> radius = inputFromClient.readDouble();</div><div class="line">                <span class="keyword">double</span> area = radius * radius * Math.PI;</div><div class="line">                System.out.println(<span class="string">"服务端：接受到客户端半径为："</span> + radius);</div><div class="line">                System.out.println(<span class="string">"服务端：计算面积为："</span> + area);</div><div class="line">                outputToClient.writeDouble(area);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上这些内容基本上都属于TCP（要先进行服务端与客户端的连接），而实际上现在用的更多的是UDP（非连接，直接发送数据包），今后有空再研究了。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;网络编程本质还是在处理IO流上。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
      <category term="网络编程" scheme="https://luxuantao.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python-自定义类的运算</title>
    <link href="https://luxuantao.github.io/2018/02/18/python-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%9A%84%E8%BF%90%E7%AE%97/"/>
    <id>https://luxuantao.github.io/2018/02/18/python-自定义类的运算/</id>
    <published>2018-02-18T07:34:20.000Z</published>
    <updated>2018-02-18T07:41:13.330Z</updated>
    
    <content type="html"><![CDATA[<hr><p>自定义一个复数类，实现四则运算。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, real, imaginary)</span>:</span></div><div class="line">        self.real = real</div><div class="line">        self.imaginary = imaginary</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, no)</span>:</span></div><div class="line">        real = self.real + no.real</div><div class="line">        imaginary = self.imaginary + no.imaginary</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span><span class="params">(self, no)</span>:</span></div><div class="line">        real = self.real - no.real</div><div class="line">        imaginary = self.imaginary - no.imaginary</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, no)</span>:</span></div><div class="line">        real = self.real * no.real - self.imaginary * no.imaginary</div><div class="line">        imaginary = self.real * no.imaginary + self.imaginary * no.real</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__truediv__</span><span class="params">(self, no)</span>:</span></div><div class="line">        x = float(no.real ** <span class="number">2</span> + no.imaginary ** <span class="number">2</span>)</div><div class="line">        y = self * Complex(no.real, -no.imaginary)</div><div class="line">        real = y.real / x</div><div class="line">        imaginary = y.imaginary / x</div><div class="line">        <span class="keyword">return</span> Complex(real, imaginary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">(self)</span>:</span></div><div class="line">        real = math.sqrt(self.real ** <span class="number">2</span> + self.imaginary ** <span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> Complex(real, <span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.imaginary == <span class="number">0</span>:</div><div class="line">            result = <span class="string">"%.2f+0.00i"</span> % (self.real)</div><div class="line">        <span class="keyword">elif</span> self.real == <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> self.imaginary &gt;= <span class="number">0</span>:</div><div class="line">                result = <span class="string">"0.00+%.2fi"</span> % (self.imaginary)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                result = <span class="string">"0.00-%.2fi"</span> % (abs(self.imaginary))</div><div class="line">        <span class="keyword">elif</span> self.imaginary &gt; <span class="number">0</span>:</div><div class="line">            result = <span class="string">"%.2f+%.2fi"</span> % (self.real, self.imaginary)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result = <span class="string">"%.2f-%.2fi"</span> % (self.real, abs(self.imaginary))</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    c = map(float, input().split())</div><div class="line">    d = map(float, input().split())</div><div class="line">    x = Complex(*c)</div><div class="line">    y = Complex(*d)</div><div class="line">    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=<span class="string">'\n'</span>)</div></pre></td></tr></table></figure><p>有个巨坑的地方：python3定义一般的除法要用<code>__truediv__</code> 而不是<code>__div__</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;自定义一个复数类，实现四则运算。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://luxuantao.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>博客更新说明</title>
    <link href="https://luxuantao.github.io/2018/01/19/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E8%AF%B4%E6%98%8E/"/>
    <id>https://luxuantao.github.io/2018/01/19/博客更新说明/</id>
    <published>2018-01-19T06:49:47.000Z</published>
    <updated>2018-01-19T07:20:04.795Z</updated>
    
    <content type="html"><![CDATA[<hr><p>忙活了两天，升级版的博客总算完成了。</p><a id="more"></a><p>更新内容说明：</p><p>1.评论区已经开放，支持QQ，微信登陆。说来惭愧，光这个评论区就搞了一天，我记得当初建这个博客都没花这么长的时间。一开始想用国内一位大神写的Gitment（花了我四五个小时，害得我放假第一天游戏都没有玩！！！），不知是哪儿出了问题用不了，后来还是决定用韩国人的来必力，在阅读了无数韩国鸟文后，艰难地搭建好了评论环境（其实就用了十五分钟）。</p><p>2.增强了与github的联系，新增两处github仓库链接。</p><p>3.新增RSS链接。</p><p>4.新增EOJ链接。</p><p>5.今后加载页面时，顶部会出现加载条。</p><p>6.网站底部增加本站访客数，博客全站总字数。</p><p>7.每篇文章都增设了热度（就是阅读次数），字数统计，阅读时长。</p><p>8.文章分享栏尝试了一下，觉得不美观就删了。</p><p>9.hexo对网易云音乐的支持不稳定，在打开网页的会有一定概率弹出js提示框，虽然歌曲能放，但影响用户体验总是不太好，就删了。</p><p>10.网站小图标，文章标签图标，页面底部的主人图标已全部更新。</p><p>PS：最气的是本地全部搞好了，想部署到github的时候hexo报错了，我当时就懵了，tmd关键时刻掉链子。研究了将近一个小时无果后，我把整个.deploy_git文件夹全删了，重新生成了一下，虽然好用了，但是github上之前的版本记录也就全没了，不过现在生成静态文件的速度反倒变快了，真是因祸得福。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;忙活了两天，升级版的博客总算完成了。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>新手法则</title>
    <link href="https://luxuantao.github.io/2017/12/01/%E6%96%B0%E6%89%8B%E6%B3%95%E5%88%99/"/>
    <id>https://luxuantao.github.io/2017/12/01/新手法则/</id>
    <published>2017-12-01T13:42:23.000Z</published>
    <updated>2017-12-01T14:05:06.219Z</updated>
    
    <content type="html"><![CDATA[<hr><p>这两周总结出一样东西：“新手法则“。</p><a id="more"></a><p>这不是一个已有的法则，而是我自己想出来的。什么意思呢？</p><p>是这样：在一个充满竞争的环境中，里面的每一个人都会学着去拉拢人脉。而当一位智商和情商都很高的陌生人到访时，几乎所有的人都愿意去试着认识他。原因很简单：1.这个人的智商和情商都很高，将来定有可用之处。 2.这个人在这个领域还什么都不懂，对自己没有威胁。渐渐的，所有的人都把自己的所学所想分享给他，想和他打好关系。可他们没有想到，他们正在培养着一个可怕的”怪物“，一个什么都了解的”怪物“，一个将来可能超过他们所有人的”怪物“。</p><p>题外话：</p><p>1.每一个人总有需要他人帮助的时候，我也是经过大家的帮助才一步步走到现在，滴水之恩当涌泉相报，我绝不做过河拆桥之人，但当别人这样对我时。我会告诉他：“你比我强可以，但你别惹我，否则我会尽全力超过你。”</p><p>2.金牛座好人多。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;这两周总结出一样东西：“新手法则“。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://luxuantao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>seamCarving</title>
    <link href="https://luxuantao.github.io/2017/11/17/seamCarving/"/>
    <id>https://luxuantao.github.io/2017/11/17/seamCarving/</id>
    <published>2017-11-17T14:36:51.000Z</published>
    <updated>2018-01-25T09:03:43.061Z</updated>
    
    <content type="html"><![CDATA[<hr><p>其实吧，问题求解课还是有点意思的。。</p><a id="more"></a><p>Seam Carving：以水平和垂直两种方式简单地压缩和拉伸图片，常用于一些图像处理软件，能够做到主要目标不失真。结果肖老师二话不多说就让我们自己写一个。。我哪会写什么图像压缩，网上一查全是java的代码，可我已经忘得差不多了。再查c++，结果c++要用到openCV，呵呵，我还是用java吧。可毕竟菜得扣脚（其实是懒），就拿来了同学的代码看了看，其实并不难，我就顺手补充了点注释。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Picture;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">seamCarving</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] colors;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">seamCarving</span><span class="params">(Picture picture)</span> </span>&#123;</div><div class="line">        width=picture.width();</div><div class="line">        height=picture.height();</div><div class="line">        colors = <span class="keyword">new</span> <span class="keyword">int</span>[height][width];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++) &#123;</div><div class="line">                colors[i][j] = picture.get(j, i).getRGB(); <span class="comment">//普林斯顿大学把这个函数的参数定为先写col，后写row</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Picture <span class="title">picture</span><span class="params">()</span> </span>&#123;</div><div class="line">        Picture picture = <span class="keyword">new</span> Picture(width,height);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;height; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;width; j++) &#123;</div><div class="line">                Color color = <span class="keyword">new</span> Color(colors[i][j]);</div><div class="line">                picture.set(j, i, color);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> picture;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="comment">//能量函数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">energy</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (x==<span class="number">0</span>||x==height-<span class="number">1</span>||y==<span class="number">0</span>||y==width-<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1000.0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> dxRed = red(colors[x - <span class="number">1</span>][y]) -red(colors[x + <span class="number">1</span>][y]);</div><div class="line">            <span class="keyword">int</span> dxGreen = green(colors[x - <span class="number">1</span>][y]) -green(colors[x + <span class="number">1</span>][y]);</div><div class="line">            <span class="keyword">int</span> dxBlue = blue(colors[x - <span class="number">1</span>][y]) -blue(colors[x + <span class="number">1</span>][y]);</div><div class="line">            <span class="keyword">int</span> dyRed = red(colors[x][y - <span class="number">1</span>]) - red(colors[x][y + <span class="number">1</span>]);</div><div class="line">            <span class="keyword">int</span> dyGreen = green(colors[x][y - <span class="number">1</span>]) - green(colors[x][y + <span class="number">1</span>]);</div><div class="line">            <span class="keyword">int</span> dyBlue = blue(colors[x][y - <span class="number">1</span>]) - blue(colors[x][y + <span class="number">1</span>]);</div><div class="line">            <span class="keyword">return</span> Math.sqrt(Math.pow(dxRed, <span class="number">2</span>) + Math.pow(dxBlue, <span class="number">2</span>) + Math.pow(dxGreen, <span class="number">2</span>) + Math.pow(dyRed, <span class="number">2</span>) + Math.pow(dyBlue, <span class="number">2</span>) + Math.pow(dyGreen, <span class="number">2</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findVerticalSeam() &#123;</div><div class="line">        <span class="keyword">double</span>[][] dist=<span class="keyword">new</span> <span class="keyword">double</span>[height][width];</div><div class="line">        <span class="keyword">int</span>[][] node=<span class="keyword">new</span> <span class="keyword">int</span>[height][width];</div><div class="line">        <span class="keyword">int</span>[] seam=<span class="keyword">new</span> <span class="keyword">int</span>[height];</div><div class="line">        <span class="comment">//初始化</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;height;i++) &#123; </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;width;j++) &#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</div><div class="line">        dist[i][j]=<span class="number">0.0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        dist[i][j]=Double.POSITIVE_INFINITY;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;height;i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;width;j++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=-<span class="number">1</span>;k&lt;=<span class="number">1</span>;k++) &#123;</div><div class="line">        <span class="keyword">if</span>(j+k&lt;<span class="number">0</span>||j+k&gt;=width) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(dist[i][j]&gt;(dist[i-<span class="number">1</span>][j+k]+energy(i,j))) &#123;</div><div class="line">        dist[i][j]=(dist[i-<span class="number">1</span>][j+k]+energy(i,j));</div><div class="line">        node[i][j]=j+k; <span class="comment">//记录是从哪个点过来的</span></div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line">        <span class="comment">//找到最后一行中路径总和最短的那一个点</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;width;j++) &#123;</div><div class="line">        <span class="keyword">if</span>(dist[height-<span class="number">1</span>][j]&lt;dist[height-<span class="number">1</span>][index])&#123;</div><div class="line">        index=j;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//向上回溯</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=height-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</div><div class="line">        seam[i]=index;</div><div class="line">        index=node[i][index];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> seam; <span class="comment">//返回这条路径的下标数组</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeVerticalSeam</span><span class="params">(<span class="keyword">int</span>[] seam)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[height][width-<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;height; i++) &#123;</div><div class="line">            System.arraycopy(colors[i],<span class="number">0</span>,a[i],<span class="number">0</span>,seam[i]);<span class="comment">//参数说明：原数组，原数组起始点，目标数组，目标数组起始点，长度</span></div><div class="line">            System.arraycopy(colors[i],seam[i]+<span class="number">1</span>,a[i],seam[i],width-seam[i]-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        width--;</div><div class="line">        colors = a;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tailor</span><span class="params">(<span class="keyword">int</span> tx,<span class="keyword">int</span> ty)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;tx;i++) &#123;</div><div class="line">    removeVerticalSeam(findVerticalSeam());</div><div class="line">    &#125;</div><div class="line">    colors=transpose(colors); <span class="comment">//矩阵转置，这样可以用同样 的函数处理高度上的缩减</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ty;i++) &#123;</div><div class="line">    removeVerticalSeam(findVerticalSeam());</div><div class="line">    &#125;</div><div class="line">    colors=transpose(colors); <span class="comment">//再转置回来</span></div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] transpose(<span class="keyword">int</span>[][] origin) &#123;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        temp=width;</div><div class="line">        width=height;</div><div class="line">        height=temp;</div><div class="line">    <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[height][width];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++) &#123;</div><div class="line">                result[i][j] = origin[j][i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">red</span><span class="params">(<span class="keyword">int</span> rgb)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (rgb &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">green</span><span class="params">(<span class="keyword">int</span> rgb)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (rgb &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">blue</span><span class="params">(<span class="keyword">int</span> rgb)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (rgb &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Picture picture = <span class="keyword">new</span> Picture(<span class="string">"seamCarving.jpg"</span>);</div><div class="line">        <span class="keyword">int</span> dx=<span class="number">0</span>,dy=<span class="number">0</span>;</div><div class="line">        Scanner in=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">        dx=in.nextInt();</div><div class="line">        dy=in.nextInt();</div><div class="line">        in.close();</div><div class="line">        seamCarving sc = <span class="keyword">new</span> seamCarving(picture);</div><div class="line">        sc.tailor(dx,dy);</div><div class="line">        picture.show(); <span class="comment">//显示原图像</span></div><div class="line">        Picture newpicture = sc.picture();</div><div class="line">        newpicture.show(); <span class="comment">//把sc的colors数组包装为picture对象，再调用picture的show显示修改后的样子</span></div><div class="line">        newpicture.save(<span class="string">"swamCarving_result.jpg"</span>);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>要用到普林斯顿大学的包文件。核心算法就是个dp，没什么大花头，能量函数什么的就不多说了，这么用就行了，原理就说不清了。</p><p>知识点补充：</p><p>颜色方面的小知识，以白色为例：0xFFFFFFFF 前两个F是透明度的大小，然后是红色的，绿色的，蓝色的亮度。因为是十六进制，所以一个F占四位二进制数，两个占八位，也就是一个byte，代码中要取到红色的值怎么办，很简单，用<code>(rgb &gt;&gt; 16) &amp; 0xFF;</code>,后面十六位舍弃，再和0xFF，（也就是二进制11111111） 位与一下，就截取下来了，绿色蓝色同理。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;其实吧，问题求解课还是有点意思的。。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://luxuantao.github.io/categories/java/"/>
    
    
      <category term="算法" scheme="https://luxuantao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Arduino和processing实现串口通信</title>
    <link href="https://luxuantao.github.io/2017/10/29/Arduino%E5%92%8Cprocessing%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
    <id>https://luxuantao.github.io/2017/10/29/Arduino和processing实现串口通信/</id>
    <published>2017-10-29T03:31:24.000Z</published>
    <updated>2018-01-25T09:02:13.560Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Arduino和processing是一对好基友。。。</p><a id="more"></a><p>1.通过串口将Arduino的输出传递给Processing进行输出。</p><p>Arduino代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> data=<span class="number">12345</span>; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  Serial.begin(<span class="number">9600</span>);<span class="comment">//rate</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  Serial.println(data); <span class="comment">//send data, end up with '\n'</span></div><div class="line">  delay(<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Processing代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> processing.serial.*;</div><div class="line"></div><div class="line">String message;</div><div class="line">String temp;</div><div class="line">Serial myPort;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</div><div class="line">  myPort = <span class="keyword">new</span> Serial(<span class="keyword">this</span>,<span class="string">"COM3"</span>,<span class="number">9600</span>); <span class="comment">//Set Serial Port</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(myPort.available()&gt;<span class="number">0</span>)&#123;</div><div class="line">    temp = myPort.readString(); <span class="comment">//temp for read bytes</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length(); i++)&#123;</div><div class="line">      <span class="comment">//if meet the end mark</span></div><div class="line">      <span class="keyword">if</span>(temp.charAt(i) == <span class="string">'\n'</span>)&#123;</div><div class="line">        println(message);</div><div class="line">        message = <span class="string">""</span>;  <span class="comment">//clean string</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span></div><div class="line">        message += temp.charAt(i);  <span class="comment">//store byte</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意：</p><p>由于串口流通的数据都是bytes而没有字符串概念，所有发送数据都会按一个byte一个byte缓存，不论是否是连续字符串；而读取时会取走所有缓存bytes，不论它们是否是一个、半个还是多个字符串。</p><p>Arduino和Processing的数据收发速度是不一样的。如果用Arduino延时较长时间，Processing可能读取一个字符串或字符串的一部分。如果Arduino延时较短，Processing可能读取多个字符串，但不一定完整。在读取字符串的时候，无法确定上一个字符串是否被读取了，当前字符串是否缓存完毕，因为字符串都已经切成了bytes，连成一串。这个问题是串口通信本身造成的，一定会出现。</p><p>一种解决方法是，通过在接收端缓存数据来解决这个问题。为传输数据设置一个结束标记，如’\n’（换行符），就能在接收到的数据流中识别到一个字符串的结尾。当未遇到结束标记，就一直将串口数据保存在一个buffer变量中，继续接收，当遇到结束标记，即完成缓存。</p><p>2.通过串口将rotation sensor的转动角度发送给Processing，并绘制出可视化的图形。</p><p>Arduino代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> potPin = <span class="number">0</span>; <span class="comment">// 电位器第二针脚接在模拟口0上</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 启动串口，波特率为9600</span></div><div class="line">  Serial.begin(<span class="number">9600</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 读取电位器电压</span></div><div class="line">  <span class="keyword">int</span> sensorValue = analogRead(potPin);</div><div class="line">  </div><div class="line">  <span class="comment">// 因为processing的serial.read()只支持0-255之间的数值，所以需要把0-1023数值除以4，缩放到0-255之间</span></div><div class="line">  Serial.write(sensorValue/<span class="number">4</span>); </div><div class="line">  </div><div class="line">  delay(<span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Processing代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> processing.serial.*;</div><div class="line"></div><div class="line">Serial serial;  </div><div class="line"><span class="keyword">int</span> sensorValue;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 设置画布大小为 305 x 200 </span></div><div class="line">  size(<span class="number">305</span>, <span class="number">200</span>);  <span class="comment">//设置305的原因是arduino ADC口输入过来的数值是0-255，加上圆形半径50，刚好305.</span></div><div class="line">  </div><div class="line">  <span class="comment">// 打开串口，设置波特率为9600</span></div><div class="line">  serial = <span class="keyword">new</span> Serial(<span class="keyword">this</span>, <span class="string">"COM3"</span>, <span class="number">9600</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( serial.available() &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// 读取从串口产过来的Sensor数值。</span></div><div class="line">    sensorValue = serial.read()+<span class="number">25</span>;  <span class="comment">//+25的原因是后面设置圆形半径为50，为了让圆形起点与重点贴边，就需要+25半径。</span></div><div class="line">    println(sensorValue);</div><div class="line">    </div><div class="line">    <span class="comment">// 在画布内画一个</span></div><div class="line">    background(<span class="number">255</span>); <span class="comment">// 背景为白色</span></div><div class="line">    fill(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);   <span class="comment">// 圆形内填充为红色</span></div><div class="line">    ellipse(sensorValue, <span class="number">100</span>, <span class="number">50</span>, <span class="number">50</span>);</div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>知识点补充：</p><p><strong>ellipse：（圆形）</strong></p><p>ellipse(x,y,width,height)<br>x,y是圆形坐标点，指的是圆心。<br>width是圆的水平直径<br>height是圆的垂直直径<br>比如120,60这样画出来的就是一个椭圆了。</p><p><strong>rect：（矩形）</strong><br>rect(x,y,width,height)<br>x,y指的是矩形坐标点，是左上角那个点。<br>width是矩形宽度<br>height是矩形高度<br>默认模式是CORNER。<br>画矩形有三种模式：<br>1、CORNER：rect(左上x,左上y,宽,高)<br>2、CENTER：rect(中心x,中心y,宽,高)<br>3、CORNERS：rect(左上x,左上y,右下x,右下y)</p><p>例子：<br>rectMode(CENTER);<br>rect(150,150,200,200)</p><p>PS:貌似还是把代码当作Java显示高亮效果更好。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Arduino和processing是一对好基友。。。&lt;/p&gt;
    
    </summary>
    
      <category term="Arduino" scheme="https://luxuantao.github.io/categories/Arduino/"/>
    
    
  </entry>
  
  <entry>
    <title>Arduino初体验</title>
    <link href="https://luxuantao.github.io/2017/10/28/Arduino%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://luxuantao.github.io/2017/10/28/Arduino初体验/</id>
    <published>2017-10-28T01:06:23.000Z</published>
    <updated>2018-01-25T09:02:02.698Z</updated>
    
    <content type="html"><![CDATA[<hr><p>自从退了问题求解之后，感觉一身轻松，每天只有一个字：“闲”。这两天大佬们都走上了ACM远征的道路，留下我们这批小佬暗自神伤。不过还算好，Arduino这个新伙伴让我开心了几天。</p><a id="more"></a><p>小灯+蜂鸣器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// initialize digital pin LED_BUILTIN as an output.</span></div><div class="line">  Serial.begin(<span class="number">9600</span>);</div><div class="line">  pinMode(<span class="number">13</span>, OUTPUT);</div><div class="line">  pinMode(<span class="number">3</span>, OUTPUT);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">  digitalWrite(<span class="number">13</span>, HIGH);   <span class="comment">// turn the LED on (HIGH is the voltage level)</span></div><div class="line">  delay(<span class="number">1000</span>);                       <span class="comment">// wait for a second</span></div><div class="line">  Serial.println(<span class="string">"ok"</span>);</div><div class="line">  digitalWrite(<span class="number">13</span>, LOW);    <span class="comment">// turn the LED off by making the voltage LOW</span></div><div class="line">  delay(<span class="number">1000</span>);                       <span class="comment">// wait for a second</span></div><div class="line">  </div><div class="line">  <span class="keyword">long</span> frequency = <span class="number">300</span>; <span class="comment">//频率, 单位Hz  </span></div><div class="line">   <span class="comment">//用tone()函数发出频率为frequency的波形  </span></div><div class="line">   tone(<span class="number">3</span>, frequency );  </div><div class="line">   delay(<span class="number">1000</span>); <span class="comment">//等待1000毫秒  </span></div><div class="line">   noTone(<span class="number">3</span>);<span class="comment">//停止发声  </span></div><div class="line">   delay(<span class="number">2000</span>); <span class="comment">//等待2000毫秒  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>舵机自动旋转</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt; </span></span></div><div class="line">Servo myservo;  <span class="comment">// create servo object to control a servo </span></div><div class="line">                <span class="comment">// a maximum of eight servo objects can be created </span></div><div class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;    <span class="comment">// variable to store the servo position </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span></div><div class="line"><span class="function"></span>&#123; </div><div class="line">  myservo.attach(<span class="number">9</span>);  <span class="comment">// attaches the servo on pin 9 to the servo object </span></div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span></div><div class="line"><span class="function"></span>&#123; </div><div class="line">  <span class="keyword">for</span>(pos = <span class="number">0</span>; pos &lt; <span class="number">180</span>; pos += <span class="number">1</span>)  <span class="comment">// goes from 0 degrees to 180 degrees </span></div><div class="line">  &#123;                                  <span class="comment">// in steps of 1 degree </span></div><div class="line">    myservo.write(pos);              <span class="comment">// tell servo to go to position in variable 'pos' </span></div><div class="line">    delay(<span class="number">15</span>);                       <span class="comment">// waits 15ms for the servo to reach the position </span></div><div class="line">  &#125; </div><div class="line">  <span class="keyword">for</span>(pos = <span class="number">180</span>; pos&gt;=<span class="number">1</span>; pos-=<span class="number">1</span>)     <span class="comment">// goes from 180 degrees to 0 degrees </span></div><div class="line">  &#123;                                </div><div class="line">    myservo.write(pos);              <span class="comment">// tell servo to go to position in variable 'pos' </span></div><div class="line">    delay(<span class="number">15</span>);                       <span class="comment">// waits 15ms for the servo to reach the position </span></div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>rotation sensor控制舵机</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt; // 声明调用Servo.h库</span></span></div><div class="line">Servo myservo; <span class="comment">// 创建一个舵机对象</span></div><div class="line"><span class="keyword">int</span> potpin = <span class="number">0</span>; <span class="comment">// 连接到模拟口0</span></div><div class="line"><span class="keyword">int</span> val; <span class="comment">//变量val用来存储从模拟口0读到的值</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">Serial.begin(<span class="number">9600</span>);</div><div class="line"> myservo.attach(<span class="number">9</span>); <span class="comment">//将引脚9上的舵机与声明的舵机对象连接起来</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line"> val = analogRead(potpin); <span class="comment">//从模拟口0读值，并通过val记录</span></div><div class="line"> val = <span class="built_in">map</span>(val, <span class="number">0</span>, <span class="number">1023</span>, <span class="number">0</span>, <span class="number">179</span>); <span class="comment">//通过map函数进行数值转换</span></div><div class="line"> myservo.write(val); <span class="comment">// 给舵机写入角度</span></div><div class="line"> Serial.println(<span class="string">"OK"</span>);</div><div class="line"> delay(<span class="number">15</span>); <span class="comment">// 延时15ms让舵机转到指定位置</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PS：md竟然不支持Arduino语法。。我用的c++实现高亮。。</p><p>​    在此特别鸣谢两位白羊座小朋友提供的技术支持！</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;自从退了问题求解之后，感觉一身轻松，每天只有一个字：“闲”。这两天大佬们都走上了ACM远征的道路，留下我们这批小佬暗自神伤。不过还算好，Arduino这个新伙伴让我开心了几天。&lt;/p&gt;
    
    </summary>
    
      <category term="Arduino" scheme="https://luxuantao.github.io/categories/Arduino/"/>
    
    
  </entry>
  
  <entry>
    <title>第一道交互题</title>
    <link href="https://luxuantao.github.io/2017/09/15/%E7%AC%AC%E4%B8%80%E9%81%93%E4%BA%A4%E4%BA%92%E9%A2%98/"/>
    <id>https://luxuantao.github.io/2017/09/15/第一道交互题/</id>
    <published>2017-09-15T10:05:22.000Z</published>
    <updated>2018-01-25T09:01:35.732Z</updated>
    
    <content type="html"><![CDATA[<hr><p>EOJ被我刷屏了。。。满屏的<code>Idleness Limit Exceeded</code>。。。直到ZZW给了答案才知道怎么写。</p><a id="more"></a><p>原题链接：<a href="http://acm.ecnu.edu.cn/problem/3342/" target="_blank" rel="external">经典的猜数游戏</a></p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> low=<span class="number">-1e9</span>;</div><div class="line"><span class="keyword">int</span> up=<span class="number">1e9</span>;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> mid=(low+up)&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;mid&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"><span class="comment">//printf("%d\n",mid);</span></div><div class="line"><span class="comment">//fflush(stdout);</span></div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;s;</div><div class="line"><span class="keyword">if</span>(s==<span class="string">"equal"</span>) <span class="keyword">break</span>;</div><div class="line"><span class="keyword">if</span>(s==<span class="string">"small"</span>) low=mid+<span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">"big"</span>) up=mid<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>题目很简单，关键是你怎么清空缓存。</p><p>两种方法：</p><p>1.<code>cout&lt;&lt;endl</code>直接清空缓存。</p><p>2.如果你用了<code>printf</code>，那么后面就要加<code>fflush(stdout);</code>。</p><p>另附java代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"><span class="keyword">int</span> low=-<span class="number">1000000000</span>;</div><div class="line"><span class="keyword">int</span> up=<span class="number">1000000000</span>;</div><div class="line">String s;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line"><span class="keyword">int</span> mid=(low+up)&gt;&gt;<span class="number">1</span>;</div><div class="line">System.out.println(mid);</div><div class="line">System.out.flush();</div><div class="line">s=in.nextLine();</div><div class="line"><span class="keyword">switch</span>(s) &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"big"</span>:</div><div class="line">up=mid-<span class="number">1</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="string">"small"</span>:</div><div class="line">low=mid+<span class="number">1</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="string">"equal"</span>:</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">while</span>(!s.equals(<span class="string">"equal"</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意用法:<code>System.out.flush();</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;EOJ被我刷屏了。。。满屏的&lt;code&gt;Idleness Limit Exceeded&lt;/code&gt;。。。直到ZZW给了答案才知道怎么写。&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="https://luxuantao.github.io/categories/c/"/>
    
    
      <category term="OJ" scheme="https://luxuantao.github.io/tags/OJ/"/>
    
  </entry>
  
</feed>
